{"version":3,"file":"4756.36e96538d4c52cf94402.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/chat.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BindObservable.tsx","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx","webpack://ESMira/./src/frontend/ts/widgets/SearchWidget.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {SectionAlternative, SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {BindObservable} from \"../widgets/BindObservable\";\nimport {Section} from \"../site/Section\";\nimport {Requests} from \"../singletons/Requests\";\nimport {FILE_ADMIN} from \"../constants/urls\";\nimport {Message} from \"../data/messages/Message\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {SearchWidget} from \"../widgets/SearchWidget\";\nimport {DropdownMenu} from \"../widgets/DropdownMenu\";\nimport {ParticipantMessagesContainer} from \"../data/messages/ParticipantMessagesContainer\";\nimport {SendMessage} from \"../data/messages/SendMessage\";\nimport {MessageAsRead} from \"../data/messages/MessageAsRead\";\nimport {safeConfirm} from \"../constants/methods\";\nimport participantsSvg from \"../../imgs/icons/participants.svg?raw\"\nimport dataSvg from \"../../imgs/icons/data.svg?raw\"\nimport {BtnCustom, BtnOk, BtnReload, BtnTrash} from \"../widgets/BtnWidgets\";\n\nexport class Content extends SectionContent {\n\tprivate readonly userIdList: string[]\n\tprivate readonly studyId: number\n\tprivate userId: string\n\tprivate readonly fixedRecipient: boolean\n\tprivate messages?: ParticipantMessagesContainer\n\tprivate sortedMessages: Message[] = []\n\tprivate toAll: boolean = false\n\tprivate appVersion: ObservablePrimitive<string> = new ObservablePrimitive<string>(\"\", null, \"appVersion\")\n\tprivate appType: ObservablePrimitive<string> = new ObservablePrimitive<string>(\"\", null, \"appType\")\n\tprivate messageContent: ObservablePrimitive<string> = new ObservablePrimitive<string>(\"\", null, \"messageContent\")\n\tprivate isLoading: boolean = false\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\tconst studyId = section.getStaticInt(\"id\") ?? -1\n\t\treturn [\n\t\t\tRequests.loadJson(`${FILE_ADMIN}?type=ListParticipants&study_id=${studyId}`),\n\t\t\tsection.getStudyPromise()\n\t\t]\n\t}\n\t\n\tconstructor(section: Section, userIdList: string[]) {\n\t\tsuper(section)\n\t\tthis.studyId = this.getStaticInt(\"id\") ?? -1\n\t\tuserIdList.sort()\n\t\tthis.userIdList = userIdList\n\t\tthis.userId = atob(this.getStaticString(\"userId\") ?? \"\")\n\t\tthis.fixedRecipient = !!this.userId\n\t}\n\t\n\tpublic preInit(): Promise<any> {\n\t\treturn this.loadParticipantMessages()\n\t}\n\t\n\tpublic title(): string {\n\t\treturn this.fixedRecipient ? this.userId : Lang.get(\"message\")\n\t}\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\tif(this.userId && this.getTools().hasPermission(\"read\", this.getStaticInt(\"id\") ?? -1)) {\n\t\t\tconst userIdAddition = this.getStaticString(\"userId\") ? \"\" : `,userId:${btoa(this.userId)}`\n\t\t\treturn <div>\n\t\t\t\t{BtnReload(\n\t\t\t\t\t() => this.section.loader.showLoader(this.loadParticipantMessages()),\n\t\t\t\t\tLang.get(\"reload\")\n\t\t\t\t)}\n\t\t\t\t{DropdownMenu(\"fileOptions\",\n\t\t\t\t\tBtnCustom(m.trust(dataSvg), undefined, Lang.get(\"data\")),\n\t\t\t\t\t(close) => <div>\n\t\t\t\t\t\t<a class=\"line\" href={this.getUrl(`dataView:general,file:events,filter:userId${userIdAddition}`)} onclick={close}>Events.csv</a>\n\t\t\t\t\t\t{this.getStudyOrThrow().questionnaires.get().map((questionnaire) =>\n\t\t\t\t\t\t\t<a class=\"line\" href={this.getUrl(`dataView:questionnaire,qId:${questionnaire.internalId.get()},filter:userId${userIdAddition}`)}\n\t\t\t\t\t\t\t   onclick={close}>{questionnaire.getTitle()}.csv</a>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<a href={this.getUrl(`statsParticipants${userIdAddition}`)}>\n\t\t\t\t\t{BtnCustom(m.trust(participantsSvg), undefined, Lang.get(\"participants\"))}\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t}\n\t\telse\n\t\t\treturn null\n\t}\n\t\n\tpublic hasAlternatives(): boolean {\n\t\treturn true\n\t}\n\tpublic getAlternatives(): Promise<SectionAlternative[]> {\n\t\treturn this.section.getTools().messagesLoader.getReloadedMessageParticipantInfoList(this.section.getStaticInt(\"id\") ?? -1)\n\t\t\t.then((participantList) => {\n\t\t\t\tconst output: SectionAlternative[] = []\n\t\t\t\tparticipantList.get().forEach((entry) => {\n\t\t\t\t\tconst currentUserId = entry.name.get()\n\t\t\t\t\toutput.push({\n\t\t\t\t\t\ttitle: currentUserId,\n\t\t\t\t\t\ttarget: this.userId != currentUserId && this.getUrl(`chat,userId:${btoa(currentUserId)}`, this.section.depth - 1)\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\treturn output\n\t\t\t})\n\t}\n\t\n\tprivate async loadParticipantMessages(): Promise<void> {\n\t\tif(this.userId) {\n\t\t\tthis.isLoading = true\n\t\t\tm.redraw()\n\t\t\tthis.messages = await this.getTools().messagesLoader.loadMessages(this.studyId, this.userId)\n\t\t\t\n\t\t\tthis.sortedMessages = []\n\t\t\t\n\t\t\tthis.sortedMessages = this.sortedMessages.concat(this.messages.archive)\n\t\t\tthis.sortedMessages = this.sortedMessages.concat(this.messages.unread)\n\t\t\tthis.sortedMessages = this.sortedMessages.concat(this.messages.pending)\n\t\t\tthis.sortedMessages.reverse() //our div is reversed. So we have to reverse data too\n\t\t\tthis.isLoading = false\n\t\t\tm.redraw()\n\t\t}\n\t}\n\t\n\tprivate getUnreadTimestamps(): number[] {\n\t\tconst timestamps: number[] = []\n\t\tconst listUnread = this.messages?.unread\n\t\tif(!listUnread || !listUnread.length)\n\t\t\treturn []\n\t\t\n\t\tfor(let message of listUnread) {\n\t\t\ttimestamps.push(message.sent)\n\t\t}\n\n\t\treturn timestamps\n\t}\n\t\n\tprivate async removeMessage(message: Message): Promise<void> {\n\t\tif(!safeConfirm(Lang.get(\"confirm_delete_message\")))\n\t\t\treturn\n\t\t\n\t\tconst studyId = this.getStaticInt(\"id\") ?? -1\n\t\t\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=DeleteMessage&study_id=${studyId}`,\n\t\t\t\"post\",\n\t\t\t`\"study_id=${studyId}&userId=${this.userId}&sent=${message.sent}`\n\t\t)\n\t\t\n\t\tawait this.loadParticipantMessages()\n\t\tawait this.getTools().messagesLoader.getReloadedMessageParticipantInfoList(studyId)\n\t\tm.redraw()\n\t}\n\t\n\tprivate async sendMessage(): Promise<void> {\n\t\tconst content = this.messageContent.get()\n\t\tconst recipient = this.userId\n\t\tconst toAll = this.toAll\n\t\tconst appVersion = this.appVersion.get()\n\t\tconst appType = this.appType.get()\n\t\tconst studyId = this.getStaticInt(\"id\") ?? -1\n\t\t\n\t\tif(content.length < 2) {\n\t\t\tthis.section.loader.info(Lang.get(\"error_short_message\"))\n\t\t\treturn\n\t\t}\n\t\telse if(!toAll && (!recipient || !recipient.length)) {\n\t\t\tthis.section.loader.info(Lang.get(\"error_not_selected_recipient\"))\n\t\t\treturn\n\t\t}\n\t\tif(!confirm(Lang.get(\"confirm_distribute_message\", content)))\n\t\t\treturn\n\t\t\n\t\t\n\t\tconst sendMessage: SendMessage = {\n\t\t\tuserId: this.userId,\n\t\t\ttoAll: toAll,\n\t\t\tappVersion: appVersion,\n\t\t\tappType: appType,\n\t\t\tcontent: content,\n\t\t\ttimestamps: this.getUnreadTimestamps()\n\t\t}\n\t\t\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=SendMessage&study_id=${studyId}`,\n\t\t\t\"post\",\n\t\t\tJSON.stringify(sendMessage)\n\t\t)\n\t\t\n\t\tawait this.loadParticipantMessages()\n\t\tawait this.getTools().messagesLoader.getReloadedMessageParticipantInfoList(studyId)\n\t\tthis.messageContent.set(\"\")\n\t\tm.redraw()\n\t}\n\t\n\tprivate async setMessagesAsRead(): Promise<void> {\n\t\tconst studyId = this.getStaticInt(\"id\") ?? -1\n\t\tconst data: MessageAsRead = {\n\t\t\tuserId: this.userId,\n\t\t\ttimestamps: this.getUnreadTimestamps()\n\t\t}\n\t\t\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=MessageSetRead&study_id=${studyId}`,\n\t\t\t\"post\",\n\t\t\tJSON.stringify(data)\n\t\t)\n\t\t\n\t\tawait this.loadParticipantMessages()\n\t\tawait this.getTools().messagesLoader.getReloadedMessageParticipantInfoList(studyId)\n\t\tm.redraw()\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn <div>\n\t\t\t<div>\n\t\t\t\t{this.messages &&\n\t\t\t\t\t<div class=\"scrollBox reversedScroll big\">\n\t\t\t\t\t\t{ this.messages.unread.length >= 1 &&\n\t\t\t\t\t\t\tBtnOk(this.setMessagesAsRead.bind(this), Lang.get(\"mark_messages_as_read\"))\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{ this.sortedMessages.map((message) =>\n\t\t\t\t\t\t\tthis.getBubble(message)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t\n\t\t\t\n\t\t\t{ TitleRow(Lang.getWithColon(\"send_message_to_user\")) }\n\t\t\t{ !this.fixedRecipient &&\n\t\t\t\t<div class=\"recipientBox\">\n\t\t\t\t\t<div class=\"vertical\">\n\t\t\t\t\t\t<label class=\"horizontal\">\n\t\t\t\t\t\t\t<input name=\"recipient\" type=\"radio\" checked={this.toAll} onchange={() => {\n\t\t\t\t\t\t\t\tthis.userId = \"\"\n\t\t\t\t\t\t\t\tthis.toAll = true\n\t\t\t\t\t\t\t}}/>\n\t\t\t\t\t\t\t<span>{Lang.get(\"to_all\")}</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{ this.toAll &&\n\t\t\t\t\t\t\t<div class=\"horizontal spacingLeft\">\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<small>{Lang.get(\"app_version\")}</small>\n\t\t\t\t\t\t\t\t\t<input type=\"text\" {... BindObservable(this.appVersion)}/>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<small>{Lang.get(\"app_type\")}</small>\n\t\t\t\t\t\t\t\t\t<select {... BindObservable(this.appType)}>\n\t\t\t\t\t\t\t\t\t\t<option value=\"\">{ Lang.get(\"all\")}</option>\n\t\t\t\t\t\t\t\t\t\t<option>Android</option>\n\t\t\t\t\t\t\t\t\t\t<option>iOS</option>\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"vertical\">\n\t\t\t\t\t\t<label class=\"horizontal\">\n\t\t\t\t\t\t\t<input name=\"recipient\" type=\"radio\" checked={!this.toAll} onchange={() => {\n\t\t\t\t\t\t\t\tthis.toAll = false\n\t\t\t\t\t\t\t}}/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<div class=\"recipientChooser\">\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<small>{Lang.getWithColon(\"recipient\")}</small>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSearchWidget((tools) => {\n\t\t\t\t\t\t\t\t\t\treturn DropdownMenu(\"recipient\",\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"vertical\"\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={this.userId}\n\t\t\t\t\t\t\t\t\t\t\t\tonkeyup={(e: InputEvent) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst value = (e.target as HTMLInputElement).value\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.userId = value\n\t\t\t\t\t\t\t\t\t\t\t\t\ttools.updateSearch(value)\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\tonfocusin={() => { this.toAll = false }}\n\t\t\t\t\t\t\t\t\t\t\t\tonchange={this.loadParticipantMessages.bind(this)}\n\t\t\t\t\t\t\t\t\t\t\t/>,\n\t\t\t\t\t\t\t\t\t\t\t(close) => <div class=\"listParent\"><div class=\"listChild\">\n\t\t\t\t\t\t\t\t\t\t\t\t{this.userIdList.map((userId) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\ttools.searchView(userId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"clickable smallText line\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t onclick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t this.userId = userId\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t close()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t this.loadParticipantMessages()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t }}>{userId}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t</div></div>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t<label class=\"line\">\n\t\t\t\t<small>{Lang.getWithColon(\"message\")}</small>\n\t\t\t\t<textarea {... BindObservable(this.messageContent)}></textarea>\n\t\t\t</label>\n\t\t\t\n\t\t\t<input class=\"right\" type=\"button\" value={Lang.get(\"send\")} onclick={this.sendMessage.bind(this)}/>\n\t\t</div>\n\t}\n\t\n\tprivate getBubble(message: Message): Vnode<any, any> {\n\t\tlet className = \"chatBubble\"\n\t\tif(!this.isLoading)\n\t\t\tclassName += \" fadeIn\"\n\t\tif(message.unread)\n\t\t\tclassName += \" unread\"\n\t\tif(message.pending)\n\t\t\tclassName += \" pending\"\n\t\tif(message.from == this.userId)\n\t\t\tclassName += \" fromClient\"\n\t\telse\n\t\t\tclassName += \" fromServer\"\n\t\t\n\t\treturn <div class={className}>\n\t\t\t<div class=\"headline\">\n\t\t\t\t<span>{Lang.getWithColon(\"from\")}</span>\n\t\t\t\t&nbsp;\n\t\t\t\t<span>{message.from}</span>\n\t\t\t</div>\n\t\t\t\n\t\t\t{ message.pending &&\n\t\t\t\t<div class=\"horizontal\">\n\t\t\t\t\t{BtnTrash(this.removeMessage.bind(this, message))}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t<div class=\"msg\">\n\t\t\t\t<div class=\"header\">{new Date(message.sent).toLocaleString()}</div>\n\t\t\t\t<div class=\"content\">{message.content}</div>\n\t\t\t\t<div class=\"footer\">\n\t\t\t\t\t{message.pending &&\n\t\t\t\t\t\t<span>{Lang.get(\"delivered_x_times\", message.delivered)}</span>\n\t\t\t\t\t}\n\t\t\t\t\t{(!message.pending && message.read != 0) &&\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<span>{Lang.getWithColon(\"confirmed\")}</span>\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t<span>{new Date(message.read).toLocaleString()}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m from \"mithril\"\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {getMidnightMillis, timeStampToTimeString} from \"../constants/methods\";\n\nexport interface Transformer {\n\ttoAttribute(value: PrimitiveType): PrimitiveType\n\ttoObs(value: string, obs: BaseObservable<PrimitiveType>): PrimitiveType\n}\nconst OptimusPrimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value\n\t}\n}\nconst OptimusPrimeNumberTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn parseInt(value) || 0\n\t}\n}\n\nexport class OnBeforeChangeTransformer<T extends PrimitiveType> implements Transformer {\n\tprivate readonly onBeforeChange: (before: T, after: T) => T\n\tconstructor(onBeforeChange: (before: T, after: T) => T) {\n\t\tthis.onBeforeChange = onBeforeChange\n\t}\n\tpublic toAttribute(value: T): T {\n\t\treturn value\n\t}\n\tpublic toObs(value: string, obs: BaseObservable<T>): T {\n\t\treturn this.onBeforeChange(obs.get(), value as T) || value as T\n\t}\n}\nexport const BooleanTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value ? \"1\" : \"0\"\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value == \"1\"\n\t}\n}\nexport const DateTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == 0)\n\t\t\treturn \"\"\n\t\treturn (new Date(intValue)).toISOString().split(\"T\")[0]\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value === \"\")\n\t\t\treturn 0\n\t\telse\n\t\t\treturn (new Date(value)).getTime()\n\t}\n}\nexport const TimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == -1)\n\t\t\treturn \"\"\n\t\telse {\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\treturn timeStampToTimeString(midnight + intValue)\n\t\t}\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value == \"\")\n\t\t\treturn -1\n\t\telse {\n\t\t\tconst parts = value.split(\":\")\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\tconst date = new Date()\n\t\t\tdate.setHours(parseInt(parts[0]) || 0)\n\t\t\tdate.setMinutes(parseInt(parts[1]) || 0)\n\t\t\t\n\t\t\treturn date.getTime() - midnight\n\t\t}\n\t}\n}\n\nexport function BindObservable(obs: BaseObservable<PrimitiveType>, transformer?: Transformer, attr?: keyof HTMLInputElement, event: keyof HTMLInputElement = \"onchange\"): Record<string, any> {\n\tconst attrValue = obs.get()\n\tif(!transformer) {\n\t\tif(typeof attrValue == \"number\")\n\t\t\ttransformer = OptimusPrimeNumberTransformer\n\t\telse\n\t\t\ttransformer = OptimusPrimeTransformer\n\t}\n\tif(!attr) {\n\t\tif(typeof attrValue == \"boolean\")\n\t\t\tattr = \"checked\"\n\t\telse\n\t\t\tattr = \"value\"\n\t}\n\t\n\treturn {\n\t\t[attr]: transformer.toAttribute(attrValue),\n\t\t[event]: (e: InputEvent) => {\n\t\t\tconst element = e.target as HTMLInputElement\n\t\t\tobs.set(transformer!.toObs(element[attr!] as string, obs))\n\t\t}\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n","import m, {Component, Vnode} from \"mithril\"\n\nexport interface SearchTools {\n\tsearchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null\n\tupdateSearchFromEvent(e: InputEvent): void\n\tupdateSearch(s: string): void\n}\ninterface SearchBarComponentOptions {\n\tcontent: (tools: SearchTools) => Vnode<any, any>\n\tclassName?: string //in case the parent has added a className that we need to include\n}\nclass SearchBarComponent implements SearchTools, Component<SearchBarComponentOptions, any> {\n\tprivate currentSearchValue: string = \"\"\n\t\n\tpublic updateSearch(s: string): void {\n\t\tthis.currentSearchValue = s\n\t}\n\tpublic updateSearchFromEvent(e: InputEvent): void {\n\t\tthis.updateSearch((e.target as HTMLInputElement).value)\n\t}\n\tpublic searchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null {\n\t\treturn key.search(this.currentSearchValue) != -1 ? content : null\n\t}\n\t\n\tpublic view(vNode: Vnode<SearchBarComponentOptions, any>): Vnode<any, any> {\n\t\tconst view = vNode.attrs.content(this)\n\t\tview.attrs.className = `${vNode.attrs.className ?? \"\"} ${view.attrs.className ?? \"\"}`\n\t\treturn view\n\t}\n}\n\nexport function SearchWidget(content: (tools: SearchTools) => Vnode<any, any>): Vnode<any, any> {\n\treturn m(SearchBarComponent, { content: content })\n}","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["section","userIdList","sortedMessages","toAll","appVersion","appType","messageContent","isLoading","studyId","getStaticInt","sort","userId","atob","getStaticString","fixedRecipient","preLoad","loadJson","getStudyPromise","preInit","this","loadParticipantMessages","title","get","titleExtra","getTools","hasPermission","btoa","loader","showLoader","undefined","close","class","href","getUrl","onclick","getStudyOrThrow","questionnaires","map","questionnaire","internalId","getTitle","hasAlternatives","getAlternatives","messagesLoader","getReloadedMessageParticipantInfoList","then","participantList","output","forEach","entry","currentUserId","name","push","target","depth","loadMessages","messages","concat","archive","unread","pending","reverse","getUnreadTimestamps","timestamps","listUnread","length","message","sent","removeMessage","sendMessage","content","recipient","info","confirm","JSON","stringify","set","setMessagesAsRead","data","getView","bind","getBubble","getWithColon","type","checked","onchange","value","tools","onkeyup","e","updateSearch","onfocusin","searchView","className","from","Date","toLocaleString","delivered","read","_section","Promise","resolve","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","study","Error","getQuestionnaireOrNull","qId","getQuestionnaireOrThrow","getAdmin","isLoggedIn","getHash","goTo","window","location","hash","newSection","destroy","OptimusPrimeTransformer","toAttribute","toObs","OptimusPrimeNumberTransformer","parseInt","onBeforeChange","obs","BooleanTransformer","DateTransformer","intValue","toString","toISOString","split","getTime","TimeTransformer","midnight","parts","date","setHours","setMinutes","BindObservable","transformer","attr","event","attrValue","element","BtnCustom","icon","hoverTitle","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer","currentSearchValue","s","updateSearchFromEvent","search","view","vNode","attrs","SearchWidget","SearchBarComponent","TitleRow"],"sourceRoot":""}