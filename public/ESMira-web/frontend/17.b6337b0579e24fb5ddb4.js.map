{"version":3,"file":"17.b6337b0579e24fb5ddb4.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/charts.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx","webpack://ESMira/./src/frontend/ts/widgets/DragContainer.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {DragContainer} from \"../widgets/DragContainer\";\nimport {ObservableStructureDataType} from \"../observable/ObservableStructure\";\nimport {ChartData} from \"../data/study/ChartData\";\nimport {Section} from \"../site/Section\";\nimport {ArrayInterface} from \"../observable/interfaces/ArrayInterface\";\nimport {BtnAdd, BtnCopy, BtnTrash} from \"../widgets/BtnWidgets\";\n\nexport class Content extends SectionContent {\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [section.getStudyPromise()]\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"create_charts\")\n\t}\n\t\n\tprivate removeChart(list: ArrayInterface<ObservableStructureDataType, ChartData>, index: number): void {\n\t\tif(!confirm())\n\t\t\treturn\n\t\tlist.remove(index)\n\t\twindow.location.hash = `${this.section.getHash(this.section.depth)}`\n\t}\n\tprivate addChart(list: ArrayInterface<ObservableStructureDataType, ChartData>, url: string): void {\n\t\tlist.push({})\n\t\tthis.newSection(url)\n\t}\n\tprivate copyChart(list: ArrayInterface<ObservableStructureDataType, ChartData>, chart: ChartData, index: number): void {\n\t\tlist.addCopy(chart, index)\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst study = this.getStudyOrThrow()\n\t\tconst publicCharts = study.publicStatistics.charts\n\t\tconst personalCharts = study.personalStatistics.charts\n\t\t\n\t\tif(!study.questionnaires.get().length)\n\t\t\treturn <div class=\"center spacingTop\">{Lang.get(\"info_no_questionnaires_created\")}</div>\n\t\t\n\t\treturn <div>\n\t\t\t{TitleRow(Lang.getWithColon(\"charts_public\"))}\n\t\t\t<div class=\"listParent\">\n\t\t\t\t{DragContainer((dragTools) =>\n\t\t\t\t\t<div class=\"listChild\">\n\t\t\t\t\t\t{publicCharts.get().map((chart, index) =>\n\t\t\t\t\t\t\tdragTools.getDragTarget(index, publicCharts,\n\t\t\t\t\t\t\t\t<div class=\"verticalPadding\">\n\t\t\t\t\t\t\t\t\t{dragTools.getDragStarter(index, publicCharts)}\n\t\t\t\t\t\t\t\t\t{BtnTrash(this.removeChart.bind(this, publicCharts, index))}\n\t\t\t\t\t\t\t\t\t{BtnCopy(this.copyChart.bind(this, publicCharts, chart, index))}\n\t\t\t\t\t\t\t\t\t<a href={this.getUrl(`chartEdit:public,chartI:${index}`)}>\n\t\t\t\t\t\t\t\t\t\t<span>{chart.title.get()}</span>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<br/>\n\t\t\t\t{BtnAdd(this.addChart.bind(this, publicCharts, `chartEdit:public,chartI:${publicCharts.get().length}`),  Lang.get(\"add\"))}\n\t\t\t</div>\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"charts_personal\"))}\n\t\t\t<div class=\"listParent\">\n\t\t\t\t{DragContainer((dragTools) =>\n\t\t\t\t\t<div class=\"listChild\">\n\t\t\t\t\t\t{personalCharts.get().map((chart, index) =>\n\t\t\t\t\t\t\tdragTools.getDragTarget(index, personalCharts,\n\t\t\t\t\t\t\t\t<div class=\"verticalPadding\">\n\t\t\t\t\t\t\t\t\t{dragTools.getDragStarter(index, personalCharts)}\n\t\t\t\t\t\t\t\t\t{BtnTrash(this.removeChart.bind(this, personalCharts, index))}\n\t\t\t\t\t\t\t\t\t{BtnCopy(this.copyChart.bind(this, publicCharts, chart, index))}\n\t\t\t\t\t\t\t\t\t<a href={this.getUrl(`chartEdit:personal,chartI:${index}`)}>\n\t\t\t\t\t\t\t\t\t\t<span>{chart.title.get()}</span>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<br/>\n\t\t\t\t{BtnAdd(this.addChart.bind(this, personalCharts, `chartEdit:personal,chartI:${personalCharts.get().length}`),  Lang.get(\"add\"))}\n\t\t\t</div>\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n","import m, {Component, Vnode, VnodeDOM} from \"mithril\"\nimport addSvg from \"../../imgs/icons/dragHandle.svg?raw\"\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {ArrayInterface} from \"../observable/interfaces/ArrayInterface\";\n\nexport interface DragTools {\n\tgetDragTarget(index: number, targetList: ArrayType, content?: Vnode<any, any>): Vnode<any, any>\n\tgetDragStarter(index: number, dragTarget: ArrayType): Vnode<any, any>\n}\n\ntype ArrayType = ArrayInterface<any, BaseObservable<any>>\n\ninterface DragContainerImpOptions {\n\tcontent: (container: DragTools) => Vnode<any, any>\n}\nclass DragContainerImp implements DragTools, Component<DragContainerImpOptions, any> {\n\tprivate contentVNode?: VnodeDOM<any, any>\n\tprivate currentStartList?: ArrayType\n\tprivate currentTargetList?: ArrayType\n\tprivate currentStartIndex: number = 0\n\tprivate currentTargetIndex: number = 0\n\tprivate currentDragClone?: HTMLElement\n\tprivate currentStartElement?: HTMLElement\n\tprivate startIndex: number = 0\n\t\n\tpublic getDragTarget(index: number, targetList: ArrayType, content: Vnode<any, any> = <div></div>): Vnode<any, any> {\n\t\tcontent.attrs[\"className\"] = `dragTarget ${content.attrs[\"className\"] ?? \"\"}`\n\t\tcontent.attrs[\"ondragend\"] = this.ondragend.bind(this)\n\t\tcontent.attrs[\"ondragenter\"] = this.ondragenter.bind(this, index, targetList)\n\t\treturn content\n\t}\n\t\n\tpublic getDragStarter(index: number, targetList: ArrayType): Vnode<any, any> {\n\t\treturn <div class=\"btn clickable dragStarter\" draggable=\"true\" ondragstart={this.ondragstart.bind(this, index, targetList)}>\n\t\t\t{m.trust(addSvg)}\n\t\t</div>\n\t}\n\t\n\t\n\tprivate getIndexInContainer(searchEl: HTMLElement): number {\n\t\tconst htmlCollection = this.contentVNode?.dom.getElementsByClassName(\"dragTarget\")\n\t\tif(htmlCollection) {\n\t\t\tfor(let i = htmlCollection.length - 1; i >= 0; --i) {\n\t\t\t\tif(htmlCollection[i] === searchEl)\n\t\t\t\t\treturn i\n\t\t\t}\n\t\t}\n\t\treturn -1\n\t}\n\t\n\tprivate addDragSpacer(locationEl: HTMLElement): void {\n\t\tlet insertBefore: Element | null = locationEl //when insertBefore is null, currentDragClone will be placed at the end\n\t\tif(!this.currentDragClone)\n\t\t\treturn\n\t\tif(this.currentDragClone.parentNode) {\n\t\t\tconst locationIndex = this.getIndexInContainer(locationEl)\n\t\t\tconst spacerIndex = this.getIndexInContainer(this.currentDragClone)\n\t\t\t\n\t\t\tif(spacerIndex < this.startIndex) { //mouse moved up (/right) from starting point\n\t\t\t\tif(spacerIndex < locationIndex) { //mouse is moving down (/left) again\n\t\t\t\t\tinsertBefore = locationEl.nextElementSibling\n\t\t\t\t\t++this.currentTargetIndex\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { //mouse moved down (/left) from starting point\n\t\t\t\t\n\t\t\t\t//we need to add one to targetIndex.\n\t\t\t\t// But when we are in the same list, removing the item (before moving it) means that targetIndex points to the element afterwards anyway.\n\t\t\t\t// But when we are in another list, we need to correct manually:\n\t\t\t\tif(this.currentStartList != this.currentTargetList)\n\t\t\t\t\t++this.currentTargetIndex\n\t\t\t\t\n\t\t\t\tif(spacerIndex > locationIndex) //mouse is moving up (/right) again\n\t\t\t\t\t--this.currentTargetIndex\n\t\t\t\telse\n\t\t\t\t\tinsertBefore = locationEl.nextElementSibling\n\t\t\t}\n\t\t\tthis.currentDragClone.parentNode.removeChild(this.currentDragClone)\n\t\t}\n\t\tlocationEl.parentNode?.insertBefore(this.currentDragClone, insertBefore)\n\t}\n\t\n\tprivate ondragstart(index: number, targetList: ArrayType, e: DragEvent): boolean {\n\t\tlet targetElement = e.currentTarget as HTMLElement\n\t\twhile(targetElement && !targetElement.classList.contains(\"dragTarget\")) {\n\t\t\ttargetElement = targetElement.parentNode as HTMLElement\n\t\t}\n\t\tconst dragRoot = this.contentVNode?.dom\n\t\tif(!dragRoot)\n\t\t\treturn false\n\t\t\n\t\t\n\t\tthis.startIndex = this.getIndexInContainer(targetElement)\n\t\t\n\t\tthis.currentStartList = targetList\n\t\tthis.currentStartIndex = index\n\t\t\n\t\tthis.currentDragClone = targetElement.cloneNode(true) as HTMLElement\n\t\tthis.currentDragClone?.classList.add(\"drag_spacer\")\n\t\t\n\t\tthis.currentDragClone?.addEventListener(\"dragover\", this.ondragover.bind(this))\n\t\tthis.currentDragClone?.addEventListener(\"dragleave\", this.ondragleave.bind(this))\n\t\tthis.currentDragClone?.addEventListener(\"drop\", this.ondrop.bind(this))\n\t\t\n\t\ttargetElement.classList.add(\"dragStarted\")\n\t\te.dataTransfer?.setDragImage(targetElement, 0, 0)\n\t\t\n\t\t\n\t\tthis.currentStartElement = targetElement\n\t\t\n\t\twindow.setTimeout( () => {\n\t\t\t//in firefox: setDragImage() seems to stop working when the class of document.body is changed\n\t\t\t//in chrome: DOM changes seem to cancel dragging altogether\n\t\t\t//solution: doing this stuff in a different \"thread\" seems to do the trick\n\t\t\tthis.addDragSpacer(targetElement)\n\t\t\tdragRoot.classList.add(\"is_dragging\")\n\t\t}, 0)\n\t\treturn true\n\t}\n\tprivate ondragend(e: DragEvent): void {\n\t\tthis.ondragleave(e)\n\t\te.preventDefault()\n\t\t\n\t\tthis.contentVNode?.dom.classList.remove(\"is_dragging\")\n\t\tthis.currentStartElement?.classList.remove(\"dragStarted\")\n\t\tif(this.currentDragClone?.parentNode)\n\t\t\tthis.currentDragClone.parentNode.removeChild(this.currentDragClone)\n\t\t\n\t\tthis.currentDragClone = undefined\n\t}\n\tprivate ondragenter(index: number, targetList: ArrayType, e: DragEvent): false {\n\t\tconst targetElement = e.currentTarget as HTMLElement\n\t\tif(!this.contentVNode?.dom.contains(targetElement))\n\t\t\treturn false\n\t\t\n\t\tif(e.dataTransfer)\n\t\t\te.dataTransfer.dropEffect = \"none\"\n\t\te.preventDefault()\n\t\t\n\t\tthis.currentTargetList = targetList\n\t\tthis.currentTargetIndex = index\n\t\t\n\t\tthis.addDragSpacer(targetElement)\n\t\treturn false\n\t}\n\t\n\tprivate ondragover(e: DragEvent): void {\n\t\te.preventDefault()\n\t\tif(e.dataTransfer)\n\t\t\te.dataTransfer.dropEffect = \"move\"\n\t}\n\tprivate ondragleave(e: DragEvent): void {\n\t\te.preventDefault()\n\t}\n\tprivate ondrop(e: DragEvent): void {\n\t\te.preventDefault()\n\t\t\n\t\tif(this.currentStartList == null || this.currentTargetList == null)\n\t\t\treturn\n\t\t\n\t\tif(this.currentTargetList == this.currentStartList)\n\t\t\tthis.currentTargetList.move(this.currentStartIndex, this.currentTargetIndex)\n\t\telse\n\t\t\tthis.currentTargetList.moveFromOtherList(this.currentStartList, this.currentStartIndex, this.currentTargetIndex)\n\t\t\n\t\tthis.currentStartList = this.currentTargetList = undefined\n\t\tthis.ondragend(e)\n\t}\n\t\n\tpublic onupdate(vNode: VnodeDOM<DragContainerImpOptions, any>): void {\n\t\tthis.contentVNode = vNode\n\t}\n\t\n\tpublic view(vNode: Vnode<DragContainerImpOptions, any>): Vnode<any, any> {\n\t\treturn vNode.attrs.content(this)\n\t}\n}\n\n\nexport function DragContainer(\n\tcontent: (container: DragTools) => Vnode<any, any>\n): Vnode<any, any> {\n\treturn m(DragContainerImp, { content: content })\n}","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["preLoad","section","getStudyPromise","title","get","removeChart","list","index","confirm","remove","window","location","hash","this","getHash","depth","addChart","url","push","newSection","copyChart","chart","addCopy","getView","study","getStudyOrThrow","publicCharts","publicStatistics","charts","personalCharts","personalStatistics","questionnaires","length","getWithColon","class","dragTools","map","getDragTarget","getDragStarter","bind","href","getUrl","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticInt","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","Error","getQuestionnaireOrNull","qId","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","goTo","target","destroy","BtnCustom","icon","onclick","hoverTitle","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer","currentStartIndex","currentTargetIndex","startIndex","targetList","content","attrs","ondragend","ondragenter","draggable","ondragstart","getIndexInContainer","searchEl","htmlCollection","contentVNode","dom","getElementsByClassName","i","addDragSpacer","locationEl","insertBefore","currentDragClone","parentNode","locationIndex","spacerIndex","nextElementSibling","currentStartList","currentTargetList","removeChild","e","targetElement","currentTarget","classList","contains","dragRoot","cloneNode","add","addEventListener","ondragover","ondragleave","ondrop","dataTransfer","setDragImage","currentStartElement","setTimeout","preventDefault","undefined","dropEffect","move","moveFromOtherList","onupdate","vNode","view","DragContainer","DragContainerImp","TitleRow"],"sourceRoot":""}