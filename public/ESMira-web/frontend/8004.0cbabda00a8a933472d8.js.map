{"version":3,"file":"8004.0cbabda00a8a933472d8.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/helpers/AddJsToServerHtml.ts","webpack://ESMira/./src/frontend/ts/pages/appInstall.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx"],"sourcesContent":["import {createStudyUrl} from \"../constants/methods\";\nimport qrcode from \"qrcode-generator\";\nimport {SectionContent} from \"../site/SectionContent\";\n\nexport class AddJsToServerHtml {\n\tprivate static getAccessKey(sectionContent: SectionContent): string {\n\t\tconst study = sectionContent.getStudyOrThrow()\n\t\treturn sectionContent.getDynamic(\"accessKey\", study.accessKeys.get().length ? study.accessKeys.get()[0].get() : \"\").get()\n\t}\n\t\n\tprivate static processView(view: HTMLElement, sectionContent: SectionContent): void {\n\t\tconst type = view.getAttribute(\"js-action\")\n\t\t\n\t\tswitch(type) {\n\t\t\tcase \"internalUrl\":\n\t\t\t\tview.setAttribute(\"href\", sectionContent.getUrl(view.getAttribute(\"href\")?.substring(1) ?? \"\"))\n\t\t\t\tbreak\n\t\t\tcase \"shown\":\n\t\t\t\tview.classList.remove(\"hidden\")\n\t\t\t\tbreak\n\t\t\tcase \"hidden\":\n\t\t\t\tview.classList.add(\"hidden\")\n\t\t\t\tbreak\n\t\t\tcase \"clickable\":\n\t\t\t\tview.classList.add(\"clickable\")\n\t\t\t\tif(view.hasAttribute(\"click-show\")) {\n\t\t\t\t\tconst showTarget = document.getElementById(view.getAttribute(\"click-show\") ?? \"\") as HTMLElement\n\t\t\t\t\tif(showTarget) {\n\t\t\t\t\t\tview.addEventListener(\"click\", () => {\n\t\t\t\t\t\t\tif(showTarget.classList.contains(\"hidden\"))\n\t\t\t\t\t\t\t\tshowTarget.classList.remove(\"hidden\")\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tshowTarget.classList.add(\"hidden\")\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase \"qr\":\n\t\t\t\tconst id = sectionContent.getStaticInt(\"id\") ?? -1\n\t\t\t\tconst qrCodeUrl = createStudyUrl(this.getAccessKey(sectionContent), id, id != -1)\n\t\t\t\tconst qr = qrcode(0, 'L')\n\t\t\t\t\n\t\t\t\tqr.addData(qrCodeUrl)\n\t\t\t\tqr.make()\n\t\t\t\tconst imgUrl = qr.createDataURL(6);\n\t\t\t\t(view as HTMLImageElement).src = imgUrl\n\t\t\t\tbreak\n\t\t}\n\t}\n\t\n\tpublic static process(rootView: HTMLElement, sectionContent: SectionContent): void {\n\t\tconst views = rootView.querySelectorAll(\"*[js-action]\")\n\t\tfor(let view of views as any) {\n\t\t\tthis.processView(view, sectionContent)\n\t\t}\n\t}\n}","import {SectionContent} from \"../site/SectionContent\";\nimport m, {Component, Vnode, VnodeDOM} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {AddJsToServerHtml} from \"../helpers/AddJsToServerHtml\";\nimport {Requests} from \"../singletons/Requests\";\nimport {FILE_APP_INSTALL_INSTRUCTIONS} from \"../constants/urls\";\ninterface AppInstallComponentOptions {\n\tsectionContent: SectionContent\n\thtml: string\n}\n\nclass AppInstallComponent implements Component<AppInstallComponentOptions, any> {\n\tpublic oncreate(vNode: VnodeDOM<AppInstallComponentOptions, any>): void {\n\t\tconst sectionContent = vNode.attrs.sectionContent\n\t\ttry {\n\t\t\tAddJsToServerHtml.process(vNode.dom as HTMLElement, sectionContent)\n\t\t}\n\t\tcatch(e: any) {\n\t\t\tsectionContent.section.loader.error(e.message || e)\n\t\t}\n\t}\n\t\n\tpublic view(vNode: Vnode<AppInstallComponentOptions, any>): Vnode<any, any> {\n\t\treturn <div>{m.trust(vNode.attrs.html)}</div>\n\t}\n}\n\nexport class Content extends SectionContent {\n\tprivate readonly pageHtml: string\n\tprivate readonly pageTitle: string\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\tconst accessKey = section.getDynamic(\"accessKey\", \"\").get()\n\t\treturn [\n\t\t\tRequests.loadJson(\n\t\t\t\tFILE_APP_INSTALL_INSTRUCTIONS\n\t\t\t\t\t.replace(\"%d1\", (section.getStaticInt(\"id\") ?? 0).toString())\n\t\t\t\t\t.replace(\"%s1\", accessKey)\n\t\t\t\t\t.replace(\"%s2\", Lang.code)\n\t\t\t),\n\t\t\tsection.getAvailableStudiesPromise(accessKey)\n\t\t]\n\t}\n\t\n\tconstructor(section: Section, html: { pageHtml: string, pageTitle: string, forwarded: boolean }) {\n\t\tsuper(section)\n\t\tif(html.forwarded)\n\t\t\tthis.newSection(\"studies:appInstall\", this.section.depth - 1)\n\t\t\n\t\tthis.pageHtml = html.pageHtml\n\t\tthis.pageTitle = html.pageTitle\n\t}\n\t\n\tpublic title(): string {\n\t\treturn this.pageTitle\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn m(AppInstallComponent, {\n\t\t\thtml: this.pageHtml,\n\t\t\tsectionContent: this\n\t\t})\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}"],"names":["getAccessKey","sectionContent","study","getStudyOrThrow","getDynamic","accessKeys","get","length","processView","view","getAttribute","setAttribute","getUrl","substring","classList","remove","add","hasAttribute","document","getElementById","addEventListener","contains","id","getStaticInt","qrCodeUrl","this","qr","addData","make","imgUrl","createDataURL","src","process","rootView","querySelectorAll","oncreate","vNode","attrs","dom","e","section","loader","error","message","html","forwarded","newSection","depth","pageHtml","pageTitle","preLoad","accessKey","loadJson","replace","toString","code","getAvailableStudiesPromise","title","getView","AppInstallComponent","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticString","getStudyOrNull","studies","studyLoader","getStudies","getCount","getFirst","getEntry","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","getHash","goTo","target","window","location","hash","destroy"],"sourceRoot":""}