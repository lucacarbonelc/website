{"version":3,"file":"7070.9c0423378ff820d47063.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/observable/ObservablePromise.ts","webpack://ESMira/./src/frontend/ts/pages/statsStudy.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BindObservable.tsx","webpack://ESMira/./src/frontend/ts/widgets/ChartView.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashElement.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashRow.tsx","webpack://ESMira/./src/frontend/ts/widgets/NotCompatibleIcon.tsx","webpack://ESMira/./src/frontend/ts/widgets/SearchBox.tsx","webpack://ESMira/./src/frontend/ts/widgets/SearchWidget.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {ObservableTypes} from \"./types/ObservableTypes\";\nimport {BaseObservable} from \"./BaseObservable\";\nimport { JsonTypes } from \"./types/JsonTypes\";\n\n/**\n * A observable Wrapper that can hold a Promise\n */\nexport class ObservablePromise<T> extends BaseObservable<Promise<T>> {\n\tprotected backingField: Promise<T>\n\t\n\tconstructor(value: Promise<T>, parent: BaseObservable<ObservableTypes> | null, key: string) {\n\t\tsuper(parent, key)\n\t\tthis.keyName = key\n\t\tthis.backingField = value\n\t}\n\t\n\tpublic reCalcIsDifferent(_: boolean = false): void {\n\t\t//do nothing\n\t}\n\t\n\tpublic createJson(): JsonTypes {\n        return \"\"\n    }\n\t\n\tpublic isDifferent(): boolean {\n\t\treturn false\n\t}\n\t\n\tpublic get(): Promise<any> {\n\t\treturn this.backingField\n\t}\n\tpublic set(value: Promise<T>, silently: boolean = false): void {\n\t\tthis.backingField = value\n\t\tif(!silently)\n\t\t\tthis.hasMutated(true, true)\n\t}\n\tpublic setValue(value: T, silently: boolean = false) {\n\t\tthis.set(Promise.resolve(value), silently)\n\t}\n}","import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {DashRow} from \"../widgets/DashRow\";\nimport {DashElement} from \"../widgets/DashElement\";\nimport {FILE_RESPONSES} from \"../constants/urls\";\nimport {CsvLoader} from \"../loader/csv/CsvLoader\";\nimport {ChartData} from \"../data/study/ChartData\";\nimport {\n\tCONDITION_OPERATOR_GREATER,\n\tCONDITION_OPERATOR_LESS,\n\tCONDITION_TYPE_AND,\n\tSTATISTICS_CHARTTYPES_BARS, STATISTICS_CHARTTYPES_PIE,\n\tSTATISTICS_DATATYPES_FREQ_DISTR, STATISTICS_DATATYPES_SUM,\n\tSTATISTICS_VALUETYPES_COUNT\n} from \"../constants/statistics\";\nimport {getChartColor} from \"../helpers/ChartJsBox\";\nimport {LoadedStatistics} from \"../loader/csv/CsvLoaderCollectionFromCharts\";\nimport {ObservablePromise} from \"../observable/ObservablePromise\";\nimport {ChartView} from \"../widgets/ChartView\";\nimport {JsonTypes} from \"../observable/types/JsonTypes\";\nimport {SearchBox} from \"../widgets/SearchBox\";\nimport {ValueListInfo} from \"../loader/csv/ValueListInfo\";\nimport {BindObservable} from \"../widgets/BindObservable\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {BtnReload} from \"../widgets/BtnWidgets\";\n\nconst ONE_DAY_MS = 86400000\nexport class Content extends SectionContent {\n\tprivate csvLoader: CsvLoader\n\tprivate readonly enableGroupStatistics: boolean\n\tprivate days: ObservablePrimitive<number> = new ObservablePrimitive<number>(7, null, \"days\")\n\t\n\tprivate questionnairesTotalCount: number = 0\n\tprivate joinedTotalCount: number = 0\n\tprivate quitTotalCount: number = 0\n\t\n\tprivate modelsList: ValueListInfo[] = []\n\t\n\tprivate readonly appTypeChart: ChartData\n\tprivate readonly questionnairesChart?: ChartData\n\tprivate readonly joinedPerDayChart: ChartData\n\tprivate readonly groupJoinedChart?: ChartData\n\tprivate readonly quitPerDayChart: ChartData\n\tprivate readonly groupQuitChart?: ChartData\n\tprivate readonly questionnairePerDayChart: ChartData\n\tprivate readonly groupQuestionnairePerDayChart: ChartData\n\tprivate readonly appVersionPerDayChart: ChartData\n\tprivate readonly studyVersionPerDayChart: ChartData\n\t\n\tprivate readonly appTypePromise: ObservablePromise<LoadedStatistics>\n\tprivate readonly questionnairesPromise: ObservablePromise<LoadedStatistics>\n\tprivate readonly questionnairePerDayPromise: ObservablePromise<LoadedStatistics>\n\tprivate readonly joinedPerDayPromise: ObservablePromise<LoadedStatistics>\n\tprivate readonly groupJoinedPromise: ObservablePromise<LoadedStatistics>\n\tprivate readonly quitPerDayPromise: ObservablePromise<LoadedStatistics>\n\tprivate readonly groupQuitPromise: ObservablePromise<LoadedStatistics>\n\tprivate readonly appVersionPerDayPromise: ObservablePromise<LoadedStatistics>\n\tprivate readonly studyVersionPerDayPromise: ObservablePromise<LoadedStatistics>\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\tconst url = FILE_RESPONSES.replace('%1', (section.getStaticInt(\"id\") ?? 0).toString()).replace('%2', 'events');\n\t\treturn [\n\t\t\tCsvLoader.fromUrl(section.loader, url),\n\t\t\tsection.getStudyPromise()\n\t\t]\n\t}\n\t\n\tconstructor(section: Section, csvLoader: CsvLoader) {\n\t\tsuper(section)\n\t\tthis.csvLoader = csvLoader\n\t\tthis.enableGroupStatistics = csvLoader.hasColumn(\"group\")\n\t\t\n\t\tconst tempPromise = Promise.resolve({mainStatistics: {}})\n\t\tthis.appTypePromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"appTypePromise\")\n\t\tthis.questionnairesPromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"questionnairesPromise\")\n\t\tthis.questionnairePerDayPromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"questionnairePerDayPromise\")\n\t\tthis.joinedPerDayPromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"joinedPerDayPromise\")\n\t\tthis.groupJoinedPromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"groupJoinedPromise\")\n\t\tthis.quitPerDayPromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"quitPerDayPromise\")\n\t\tthis.groupQuitPromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"groupQuitPromise\")\n\t\tthis.appVersionPerDayPromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"appVersionPerDayPromise\")\n\t\tthis.studyVersionPerDayPromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"studyVersionPerDayPromise\")\n\t\t\n\t\tthis.appTypeChart = this.createSumChartData(Lang.get(\"app_type_per_questionnaire\"), \"appType\", STATISTICS_CHARTTYPES_PIE)\n\t\tif(this.enableGroupStatistics) {\n\t\t\tthis.questionnairesChart = this.createSumChartData(Lang.get(\"questionnaires_per_group\"), \"group\", STATISTICS_CHARTTYPES_PIE)\n\t\t\tthis.joinedPerDayChart = this.createPerDayChartData(Lang.get(\"joined_study\"), STATISTICS_DATATYPES_FREQ_DISTR, \"group\", this.days.get())\n\t\t\tthis.groupJoinedChart = this.createSumChartData(Lang.get(\"joined_per_group\"), \"group\", STATISTICS_CHARTTYPES_PIE)\n\t\t\tthis.quitPerDayChart = this.createPerDayChartData(Lang.get(\"quit_study\"), STATISTICS_DATATYPES_FREQ_DISTR, \"group\", this.days.get())\n\t\t\tthis.groupQuitChart = this.createSumChartData(Lang.get(\"quit_per_group\"), \"group\", STATISTICS_CHARTTYPES_PIE)\n\t\t}\n\t\telse {\n\t\t\tthis.joinedPerDayChart = this.createPerDayChartData(Lang.get(\"joined_study\"), STATISTICS_DATATYPES_SUM, \"userId\", this.days.get())\n\t\t\tthis.quitPerDayChart = this.createPerDayChartData(Lang.get(\"quit_study\"), STATISTICS_DATATYPES_SUM, \"userId\", this.days.get())\n\t\t}\n\t\t\n\t\tthis.questionnairePerDayChart = this.createPerDayChartData(Lang.get(\"questionnaires\"), STATISTICS_DATATYPES_FREQ_DISTR, \"questionnaireName\", this.days.get())\n\t\tthis.groupQuestionnairePerDayChart = this.createPerDayChartData(Lang.get(\"questionnaires_per_group\"), STATISTICS_DATATYPES_FREQ_DISTR, \"group\", this.days.get())\n\t\tthis.appVersionPerDayChart = this.createPerDayChartData(Lang.get(\"used_app_version\"), STATISTICS_DATATYPES_FREQ_DISTR, \"appVersion\", this.days.get())\n\t\tthis.studyVersionPerDayChart = this.createPerDayChartData(Lang.get(\"used_study_version\"), STATISTICS_DATATYPES_FREQ_DISTR, \"studyVersion\", this.days.get())\n\t\t\n\t\tthis.days.addObserver(this.reloadDynamicStatistics.bind(this))\n\t}\n\t\n\tpublic async preInit(): Promise<void> {\n\t\tawait this.createFixedStatistics()\n\t\tawait this.reloadDynamicStatistics()\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"summary\")\n\t}\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn <div>\n\t\t\t<label class=\"noTitle noDesc spacingRight\">\n\t\t\t\t<span>{Lang.getWithColon(\"days\")}</span>\n\t\t\t\t<input type=\"number\" {... BindObservable(this.days)}/>\n\t\t\t</label>\n\t\t\t{BtnReload(this.section.reload.bind(this.section), Lang.get(\"reload\"))}\n\t\t</div>\n\t}\n\t\n\tprivate getDayChartAxisContainerCode(variableName: string, days: number): Record<string, JsonTypes>[] {\n\t\tlet day = Math.ceil(Date.now() / ONE_DAY_MS) * ONE_DAY_MS + (new Date).getTimezoneOffset()\n\t\tconst axisContainerArray: Record<string, JsonTypes>[] = []\n\t\tfor(let i = 0; i < days; ++i) {\n\t\t\tlet label: string\n\t\t\tif(!i)\n\t\t\t\tlabel = Lang.get(\"today\")\n\t\t\telse if(i == 1)\n\t\t\t\tlabel = Lang.get(\"yesterday\")\n\t\t\telse\n\t\t\t\tlabel = Lang.get(\"x_days_ago\", i)\n\t\t\t\n\t\t\tconst dayValue = day.toString()\n\t\t\tday -= ONE_DAY_MS\n\t\t\tconst dayBeforeValue = day.toString()\n\t\t\taxisContainerArray.push({\n\t\t\t\txAxis: {\n\t\t\t\t\tconditions: []\n\t\t\t\t},\n\t\t\t\tyAxis: {\n\t\t\t\t\tconditions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"responseTime\",\n\t\t\t\t\t\t\tvalue: dayValue,\n\t\t\t\t\t\t\toperator: CONDITION_OPERATOR_LESS\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: \"responseTime\",\n\t\t\t\t\t\t\tvalue: dayBeforeValue,\n\t\t\t\t\t\t\toperator: CONDITION_OPERATOR_GREATER\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tvariableName: variableName,\n\t\t\t\t\tobservedVariableIndex: i,\n\t\t\t\t\tconditionType: CONDITION_TYPE_AND\n\t\t\t\t},\n\t\t\t\tlabel: label,\n\t\t\t\tcolor: getChartColor(i)\n\t\t\t})\n\t\t}\n\t\treturn axisContainerArray\n\t}\n\tprivate createPerDayChartData(title: string, dataType: number, variableName: string, days: number): ChartData {\n\t\treturn ChartData.createPerDayChartData(title, this.getDayChartAxisContainerCode(variableName, days), dataType)\n\t}\n\t\n\tprivate createSumChartData(title: string, variableName: string, chartType: number): ChartData {\n\t\treturn new ChartData(\n\t\t\t{\n\t\t\t\ttitle: title,\n\t\t\t\taxisContainer: [{\n\t\t\t\t\txAxis: {\n\t\t\t\t\t\tconditions: []\n\t\t\t\t\t},\n\t\t\t\t\tyAxis: {\n\t\t\t\t\t\tconditions: [],\n\t\t\t\t\t\tvariableName: variableName,\n\t\t\t\t\t\tobservedVariableIndex: 0\n\t\t\t\t\t},\n\t\t\t\t\tlabel: variableName\n\t\t\t\t}],\n\t\t\t\tvalueType: STATISTICS_VALUETYPES_COUNT,\n\t\t\t\tdataType: STATISTICS_DATATYPES_FREQ_DISTR,\n\t\t\t\tchartType: chartType\n\t\t\t},\n\t\t\tnull,\n\t\t\t\"chartTemp\"\n\t\t)\n\t}\n\t\n\tprivate updateCharts(): void {\n\t\tif(this.enableGroupStatistics) {\n\t\t\tthis.joinedPerDayChart.axisContainer.replace(this.getDayChartAxisContainerCode(\"group\", this.days.get()), true)\n\t\t\tthis.quitPerDayChart.axisContainer.replace(this.getDayChartAxisContainerCode(\"group\", this.days.get()), true)\n\t\t}\n\t\telse {\n\t\t\tthis.joinedPerDayChart.axisContainer.replace(this.getDayChartAxisContainerCode(\"userId\", this.days.get()), true)\n\t\t\tthis.quitPerDayChart.axisContainer.replace(this.getDayChartAxisContainerCode(\"userId\", this.days.get()), true)\n\t\t}\n\t\tthis.questionnairePerDayChart.axisContainer.replace(this.getDayChartAxisContainerCode(\"questionnaireName\", this.days.get()), true)\n\t\tthis.groupQuestionnairePerDayChart.axisContainer.replace(this.getDayChartAxisContainerCode(\"group\", this.days.get()), true)\n\t\tthis.appVersionPerDayChart.axisContainer.replace(this.getDayChartAxisContainerCode(\"appVersion\", this.days.get()), true)\n\t\tthis.studyVersionPerDayChart.axisContainer.replace(this.getDayChartAxisContainerCode(\"studyVersion\", this.days.get()), true)\n\t}\n\t\n\tprivate async createFixedStatistics(): Promise<void> {\n\t\tconst eventTypeValueCount = await this.csvLoader.getValueCount(\"eventType\", [\"questionnaire\", \"joined\", \"quit\"])\n\t\tthis.questionnairesTotalCount = eventTypeValueCount.questionnaire\n\t\tawait this.csvLoader.filterEntireColumn(false, \"eventType\")\n\t\tawait this.csvLoader.filterByValue(true, \"eventType\", \"questionnaire\")\n\n\t\tif(this.enableGroupStatistics)\n\t\t\tthis.questionnairesPromise.set(this.csvLoader.getPersonalStatisticsFromChart(this.questionnairesChart!))\n\t\telse {\n\t\t\tthis.joinedTotalCount = eventTypeValueCount.joined\n\t\t\tthis.quitTotalCount = eventTypeValueCount.quit\n\t\t}\n\n\t\tthis.appTypePromise.set(this.csvLoader.getPersonalStatisticsFromChart(this.appTypeChart))\n\t\tthis.modelsList = await this.csvLoader.getValueListInfo(\"model\", true)\n\t}\n\t\n\tprivate async reloadDynamicStatistics(): Promise<void> {\n\t\tthis.updateCharts()\n\t\tawait this.csvLoader.reset()\n\t\t\n\t\tconst day = Date.now() - (ONE_DAY_MS * this.days.get())\n\t\tawait this.csvLoader.filterRowsByResponseTime(false, day)\n\t\tawait this.csvLoader.filterEntireColumn(false, \"eventType\")\n\t\t\n\t\tawait this.csvLoader.filterByValue(true, \"eventType\", \"joined\")\n\t\t\n\t\tif(this.enableGroupStatistics) {\n\t\t\tthis.joinedPerDayPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.joinedPerDayChart))\n\t\t\tthis.groupJoinedPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.groupJoinedChart!))\n\t\t}\n\t\telse\n\t\t\tthis.joinedPerDayPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.joinedPerDayChart))\n\t\t\n\t\tawait this.csvLoader.filterByValue(false, \"eventType\", \"joined\")\n\t\tawait this.csvLoader.filterByValue(true, \"eventType\", \"quit\")\n\t\t\n\t\tif(this.enableGroupStatistics) {\n\t\t\tthis.quitPerDayPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.quitPerDayChart))\n\t\t\tthis.groupQuitPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.groupQuitChart!))\n\t\t}\n\t\telse\n\t\t\tthis.quitPerDayPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.quitPerDayChart))\n\t\t\n\t\tawait this.csvLoader.filterByValue(false, \"eventType\", \"quit\")\n\t\tawait this.csvLoader.filterByValue(true, \"eventType\", \"questionnaire\")\n\t\t\n\t\tthis.questionnairePerDayPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.questionnairePerDayChart))\n\t\tif(this.enableGroupStatistics)\n\t\t\tthis.questionnairePerDayPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.groupQuestionnairePerDayChart))\n\t\t\n\t\t\n\t\tawait this.csvLoader.filterEntireColumn(true, \"eventType\")\n\t\t\n\t\tthis.appVersionPerDayPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.appVersionPerDayChart))\n\t\tthis.studyVersionPerDayPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.studyVersionPerDayChart))\n\t}\n\t\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn <div>\n\t\t\t{TitleRow(Lang.getWithColon(\"joined_study\"))}\n\t\t\t{DashRow(\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent: ChartView(this.joinedPerDayChart, this.joinedPerDayPromise)\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent:\n\t\t\t\t\t\tthis.enableGroupStatistics\n\t\t\t\t\t\t\t? ChartView(this.groupJoinedChart!, this.groupJoinedPromise)\n\t\t\t\t\t\t\t: <div>\n\t\t\t\t\t\t\t\t<h2 class=\"center\">{Lang.get(\"total\")}</h2>\n\t\t\t\t\t\t\t\t<div class=\"center largeText spacingTop\">{this.joinedTotalCount}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t})\n\t\t\t)}\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"quit_study\"))}\n\t\t\t{DashRow(\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent: ChartView(this.quitPerDayChart, this.quitPerDayPromise)\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent:\n\t\t\t\t\t\tthis.enableGroupStatistics\n\t\t\t\t\t\t\t? ChartView(this.groupQuitChart!, this.groupQuitPromise)\n\t\t\t\t\t\t\t: <div>\n\t\t\t\t\t\t\t\t<h2 class=\"center\">{Lang.get(\"total\")}</h2>\n\t\t\t\t\t\t\t\t<div class=\"center largeText spacingTop\">{this.quitTotalCount}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t})\n\t\t\t)}\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"questionnaires\"))}\n\t\t\t{DashRow(\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent: ChartView(this.questionnairePerDayChart, this.questionnairePerDayPromise)\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent: <div>\n\t\t\t\t\t\t<h2 class=\"center\">{Lang.get(\"total\")}</h2>\n\t\t\t\t\t\t<div class=\"center largeText spacingTop\">{this.questionnairesTotalCount}</div>\n\t\t\t\t\t</div>\n\t\t\t\t}),\n\t\t\t\tthis.enableGroupStatistics && DashElement(null, {\n\t\t\t\t\tcontent: ChartView(this.groupQuestionnairePerDayChart, this.questionnairePerDayPromise)\n\t\t\t\t}),\n\t\t\t\tthis.questionnairesChart && DashElement(null, {\n\t\t\t\t\tcontent: ChartView(this.questionnairesChart, this.questionnairesPromise)\n\t\t\t\t})\n\t\t\t)}\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"device_information\"))}\n\t\t\t{DashRow(\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent: ChartView(this.appVersionPerDayChart, this.appVersionPerDayPromise)\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent: ChartView(this.studyVersionPerDayChart, this.studyVersionPerDayPromise)\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent: ChartView(this.appTypeChart, this.appTypePromise)\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent: SearchBox(Lang.get(\"model_with_count\", this.modelsList.length), this.modelsList.map((valueList) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: valueList.name,\n\t\t\t\t\t\t\tview: <div class=\"smallText\">{Lang.get(\"text_with_questionnaireCount\", valueList.name, valueList.count)}</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t}))\n\t\t\t\t})\n\t\t\t)}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m from \"mithril\"\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {getMidnightMillis, timeStampToTimeString} from \"../constants/methods\";\n\nexport interface Transformer {\n\ttoAttribute(value: PrimitiveType): PrimitiveType\n\ttoObs(value: string, obs: BaseObservable<PrimitiveType>): PrimitiveType\n}\nconst OptimusPrimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value\n\t}\n}\nconst OptimusPrimeNumberTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn parseInt(value) || 0\n\t}\n}\n\nexport class OnBeforeChangeTransformer<T extends PrimitiveType> implements Transformer {\n\tprivate readonly onBeforeChange: (before: T, after: T) => T\n\tconstructor(onBeforeChange: (before: T, after: T) => T) {\n\t\tthis.onBeforeChange = onBeforeChange\n\t}\n\tpublic toAttribute(value: T): T {\n\t\treturn value\n\t}\n\tpublic toObs(value: string, obs: BaseObservable<T>): T {\n\t\treturn this.onBeforeChange(obs.get(), value as T) || value as T\n\t}\n}\nexport const BooleanTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value ? \"1\" : \"0\"\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value == \"1\"\n\t}\n}\nexport const DateTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == 0)\n\t\t\treturn \"\"\n\t\treturn (new Date(intValue)).toISOString().split(\"T\")[0]\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value === \"\")\n\t\t\treturn 0\n\t\telse\n\t\t\treturn (new Date(value)).getTime()\n\t}\n}\nexport const TimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == -1)\n\t\t\treturn \"\"\n\t\telse {\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\treturn timeStampToTimeString(midnight + intValue)\n\t\t}\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value == \"\")\n\t\t\treturn -1\n\t\telse {\n\t\t\tconst parts = value.split(\":\")\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\tconst date = new Date()\n\t\t\tdate.setHours(parseInt(parts[0]) || 0)\n\t\t\tdate.setMinutes(parseInt(parts[1]) || 0)\n\t\t\t\n\t\t\treturn date.getTime() - midnight\n\t\t}\n\t}\n}\n\nexport function BindObservable(obs: BaseObservable<PrimitiveType>, transformer?: Transformer, attr?: keyof HTMLInputElement, event: keyof HTMLInputElement = \"onchange\"): Record<string, any> {\n\tconst attrValue = obs.get()\n\tif(!transformer) {\n\t\tif(typeof attrValue == \"number\")\n\t\t\ttransformer = OptimusPrimeNumberTransformer\n\t\telse\n\t\t\ttransformer = OptimusPrimeTransformer\n\t}\n\tif(!attr) {\n\t\tif(typeof attrValue == \"boolean\")\n\t\t\tattr = \"checked\"\n\t\telse\n\t\t\tattr = \"value\"\n\t}\n\t\n\treturn {\n\t\t[attr]: transformer.toAttribute(attrValue),\n\t\t[event]: (e: InputEvent) => {\n\t\t\tconst element = e.target as HTMLInputElement\n\t\t\tobs.set(transformer!.toObs(element[attr!] as string, obs))\n\t\t}\n\t}\n}","import m, {Component, Vnode, VnodeDOM} from \"mithril\";\nimport {LoadedStatistics} from \"../loader/csv/CsvLoaderCollectionFromCharts\";\nimport {ChartJsBox} from \"../helpers/ChartJsBox\";\nimport {ObserverId} from \"../observable/BaseObservable\";\nimport {ChartData} from \"../data/study/ChartData\";\nimport {LoadingSpinner} from \"./LoadingSpinner\";\nimport {ObservablePromise} from \"../observable/ObservablePromise\";\n\ninterface ChartComponentOptions {\n\tpromise: ObservablePromise<LoadedStatistics>\n\tchart: ChartData\n\tclassName?: string //in case the parent has added a className that we need to include\n\tnoSort: boolean\n}\n\nclass ChartComponent implements Component<ChartComponentOptions, any> {\n\tprivate enabled: boolean = false\n\tprivate chart?: ChartData\n\tprivate chartView?: HTMLElement\n\tprivate chartViewBox?: ChartJsBox\n\tprivate promiseObserverId?: ObserverId\n\t\n\t\n\tprivate async drawGraph(chart: ChartData, promise: Promise<LoadedStatistics>, noSort: boolean): Promise<void> {\n\t\tthis.enabled = false\n\t\tm.redraw()\n\t\t\n\t\tconst data = await promise\n\t\tconst view = this.chartView\n\t\t\n\t\tif(!view)\n\t\t\treturn\n\t\twhile(view?.hasChildNodes()) {\n\t\t\tview.removeChild(view.lastChild!)\n\t\t}\n\t\t\n\t\tthis.chartViewBox = new ChartJsBox(view, data.mainStatistics, data.additionalStatistics ?? {}, chart, noSort)\n\t\tthis.enabled = true\n\t\tm.redraw()\n\t}\n\t\n\tpublic oncreate(vNode: VnodeDOM<ChartComponentOptions, any>): void {\n\t\tconst promise = vNode.attrs.promise\n\t\tconst chart = vNode.attrs.chart\n\t\tconst noSort = vNode.attrs.noSort\n\t\tthis.chart = chart\n\t\tthis.chartView = vNode.dom.getElementsByClassName(\"chartViewWindow\")[0] as HTMLElement\n\t\t\n\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\tthis.promiseObserverId = promise.addObserver(() => {\n\t\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\t})\n\t}\n\t\n\tpublic onupdate(vNode: VnodeDOM<ChartComponentOptions, any>): void {\n\t\t//when a section is replaced with another section with the same content (but from a different study), mithril js will not reload this ChartView but call onupdate instead\n\t\tconst promise = vNode.attrs.promise\n\t\tconst chart = vNode.attrs.chart\n\t\tconst noSort = vNode.attrs.noSort\n\t\t\n\t\tif(chart != this.chart) {\n\t\t\tthis.chart = chart\n\t\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\t\tthis.promiseObserverId?.removeObserver()\n\t\t\t\n\t\t\tthis.promiseObserverId = promise.addObserver(() => {\n\t\t\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\t\t})\n\t\t}\n\t}\n\t\n\tpublic onremove(): void {\n\t\tthis.promiseObserverId?.removeObserver()\n\t}\n\t\n\tpublic view(vNode: VnodeDOM<ChartComponentOptions, any>): Vnode<any, any> {\n\t\treturn <div class={`chartView center ${vNode.attrs.className ?? \"\"}`}>\n\t\t\t<div class={`chartViewWindow ${this.enabled ? \"fadeIn\" : \"\"}`}></div>\n\t\t\t{!this.enabled &&\n\t\t\t\tLoadingSpinner()\n\t\t\t}\n\t\t</div>\n\t}\n}\n\nexport function ChartView(chart: ChartData, promise: ObservablePromise<LoadedStatistics>, noSort: boolean = false) {\n\treturn m(ChartComponent, {\n\t\tchart: chart,\n\t\tpromise: promise,\n\t\tnoSort: noSort\n\t})\n}","import m, {Vnode} from \"mithril\"\nimport {NotCompatibleIcon, PossibleDevices} from \"./NotCompatibleIcon\";\n\ntype DashTemplateOptions = {\n\ttitle: string\n\ticon?: Vnode<any, any>\n\tnoCompatibilityIcon?: PossibleDevices[]\n\tmsg?: string | Vnode<any, any>\n\tinnerLinkTitle?: string\n\tinnerLinkHref?: string\n}\n\ntype DashContainerOptions = \"stretched\" | \"cramped\" | \"vertical\" | \"horizontal\" | null\nexport type DashViewOptions = {\n\tdisabled?: boolean\n\tonclick?: (e: MouseEvent) => void\n\thref?: string\n\tshowAsClickable?: boolean\n\tfloating?: boolean\n\tfloatingRight?: boolean\n\thighlight?: boolean\n\tsmall?: boolean\n\ttemplate?: DashTemplateOptions\n\tcontent?: Vnode<any, any>\n}\n\nfunction DashTemplateView(options: DashTemplateOptions): Vnode<any, any> {\n\treturn (\n\t\t<div>\n\t\t\t{(options.icon || options.noCompatibilityIcon) &&\n\t\t\t\t<div class=\"dashIcon\">\n\t\t\t\t\t{options.icon}\n\t\t\t\t\t{options.noCompatibilityIcon && NotCompatibleIcon(... options.noCompatibilityIcon)}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t<div class=\"dashTitle\">{options.title}</div>\n\t\t\t{options.msg && <p class=\"dashMsg\">{options.msg}</p>}\n\t\t\t{options.innerLinkTitle && options.innerLinkHref && <a class=\"link\" href={options.innerLinkHref}>{options.innerLinkTitle}</a>}\n\t\t</div>\n\t)\n}\n\nfunction DashElementView(options: DashViewOptions): Vnode<any, any> {\n\tlet classString = \"dashEl\"\n\tif(options.floatingRight)\n\t\tclassString += \" floating right\"\n\telse if(options.floating)\n\t\tclassString += \" floating\"\n\t\n\tif(options.small)\n\t\tclassString += \" small\"\n\tif(options.highlight)\n\t\tclassString += \" highlight\"\n\tif(options.disabled)\n\t\tclassString += \" disabled\"\n\t\n\tlet view: Vnode<any, any>\n\tif(options.content)\n\t\tview = options.content\n\telse if(options.template)\n\t\tview = DashTemplateView(options.template)\n\telse\n\t\tview = <div class=\"highlight\">Missing Dash Information</div>\n\t\n\tif(options.href) {\n\t\treturn <a target={options.href.startsWith(\"http\") ? \"_blank\" : \"\"} class={`${classString} dashLink`} href={options.href}>{view}</a>\n\t}\n\telse if(options.onclick)\n\t\treturn <a class={`${classString} dashLink`} onclick={options.onclick}>{view}</a>\n\telse if(options.showAsClickable)\n\t\treturn <a class={`${classString} dashLink`}>{view}</a>\n\telse {\n\t\tview.attrs[\"className\"] = `${classString} ${view.attrs.hasOwnProperty(\"className\") ? view.attrs[\"className\"] : \"\"}`\n\t\treturn view\n\t}\n}\n\nfunction getNewClassString(size: DashContainerOptions, oldClassString: string): string {\n\tif(size)\n\t\toldClassString += \" \" + size\n\treturn oldClassString\n}\n\nexport function DashElement(\n\tsize: DashContainerOptions,\n\t... options: (DashViewOptions | false)[]\n): Vnode<any, any> {\n\tif(options.length == 1) {\n\t\tif(!options[0])\n\t\t\treturn <div></div>\n\t\t\n\t\tconst view =  DashElementView(options[0])\n\t\tview.attrs[\"className\"] = getNewClassString(size, view.attrs[\"className\"])\n\t\treturn view\n\t}\n\telse {\n\t\tconst classString = getNewClassString(size, \"multipleChildren\")\n\t\treturn <div class={classString}>\n\t\t\t{options.map((option) => option && DashElementView(option))}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\"\nexport function DashRow(... content: Array<Vnode<any, any> | undefined | false>): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"dashRow\">{content}</div>\n\t)\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport androidSvg from \"../../imgs/devices/android.svg?raw\"\nimport iosSvg from \"../../imgs/devices/ios.svg?raw\"\nimport webSvg from \"../../imgs/devices/web.svg?raw\"\nimport {closeDropdown, openDropdown} from \"./DropdownMenu\";\n\n\nexport type PossibleDevices = \"Android\" | \"iOS\" | \"Web\"\n\nconst imageRecord: Record<PossibleDevices, string> = {\n\tAndroid: androidSvg,\n\tiOS: iosSvg,\n\tWeb: webSvg\n}\n\nfunction onPointerEnter(title: string, e: MouseEvent) {\n\topenDropdown(\"notCompatible\", e.target as HTMLElement,\n\t\t() => <div class=\"smallText center\">{title}</div>\n\t)\n}\nfunction onPointerLeave() {\n\tcloseDropdown(\"notCompatible\")\n}\n\nexport function NotCompatibleIcon(... devices: PossibleDevices[]): Vnode<any, any> {\n\tconst translationRecord: Record<PossibleDevices, string> = {\n\t\tAndroid: Lang.get(\"Android\"),\n\t\tiOS: Lang.get(\"iOS\"),\n\t\tWeb: Lang.get(\"web_questionnaire\")\n\t}\n\tconst title = Lang.get(\"not_compatible_with\", devices.map((device) => translationRecord[device]).join(\", \"))\n\treturn <div class=\"notCompatibleIcon\" onpointerenter={onPointerEnter.bind(null, title)} onpointerleave={onPointerLeave.bind(null)}>\n\t\t{devices.map((device) =>\n\t\t\t<div class=\"deviceIcon\">{m.trust(imageRecord[device])}</div>)}\n\t</div>\n\n}\n","import m, {Vnode} from \"mithril\"\nimport {SearchWidget} from \"./SearchWidget\";\nimport {Lang} from \"../singletons/Lang\";\n\nexport interface SearchBoxEntry {\n\tkey: string\n\tview: Vnode<any, any>\n}\nexport function SearchBox(title: string, viewList: SearchBoxEntry[]): Vnode<any, any> {\n\treturn SearchWidget((tools) =>\n\t\t<div class=\"searchBox\">\n\t\t\t<h2>{title}</h2>\n\t\t\t<input placeholder={Lang.get(\"search\")} class=\"search small vertical\" type=\"text\" onkeyup={tools.updateSearchFromEvent.bind(tools)}/>\n\t\t\t<div class=\"scrollBox noBorder\">\n\t\t\t\t{viewList.map((entry) => tools.searchView(entry.key, entry.view))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import m, {Component, Vnode} from \"mithril\"\n\nexport interface SearchTools {\n\tsearchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null\n\tupdateSearchFromEvent(e: InputEvent): void\n\tupdateSearch(s: string): void\n}\ninterface SearchBarComponentOptions {\n\tcontent: (tools: SearchTools) => Vnode<any, any>\n\tclassName?: string //in case the parent has added a className that we need to include\n}\nclass SearchBarComponent implements SearchTools, Component<SearchBarComponentOptions, any> {\n\tprivate currentSearchValue: string = \"\"\n\t\n\tpublic updateSearch(s: string): void {\n\t\tthis.currentSearchValue = s\n\t}\n\tpublic updateSearchFromEvent(e: InputEvent): void {\n\t\tthis.updateSearch((e.target as HTMLInputElement).value)\n\t}\n\tpublic searchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null {\n\t\treturn key.search(this.currentSearchValue) != -1 ? content : null\n\t}\n\t\n\tpublic view(vNode: Vnode<SearchBarComponentOptions, any>): Vnode<any, any> {\n\t\tconst view = vNode.attrs.content(this)\n\t\tview.attrs.className = `${vNode.attrs.className ?? \"\"} ${view.attrs.className ?? \"\"}`\n\t\treturn view\n\t}\n}\n\nexport function SearchWidget(content: (tools: SearchTools) => Vnode<any, any>): Vnode<any, any> {\n\treturn m(SearchBarComponent, { content: content })\n}","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["value","parent","key","keyName","backingField","reCalcIsDifferent","_","createJson","isDifferent","get","this","set","silently","hasMutated","setValue","Promise","resolve","ONE_DAY_MS","section","csvLoader","days","questionnairesTotalCount","joinedTotalCount","quitTotalCount","modelsList","enableGroupStatistics","hasColumn","tempPromise","mainStatistics","appTypePromise","questionnairesPromise","questionnairePerDayPromise","joinedPerDayPromise","groupJoinedPromise","quitPerDayPromise","groupQuitPromise","appVersionPerDayPromise","studyVersionPerDayPromise","appTypeChart","createSumChartData","questionnairesChart","joinedPerDayChart","createPerDayChartData","groupJoinedChart","quitPerDayChart","groupQuitChart","questionnairePerDayChart","groupQuestionnairePerDayChart","appVersionPerDayChart","studyVersionPerDayChart","addObserver","reloadDynamicStatistics","bind","preLoad","url","replace","getStaticInt","toString","fromUrl","loader","getStudyPromise","preInit","createFixedStatistics","title","titleExtra","class","getWithColon","type","reload","getDayChartAxisContainerCode","variableName","day","Math","ceil","Date","now","getTimezoneOffset","axisContainerArray","i","label","dayValue","dayBeforeValue","push","xAxis","conditions","yAxis","operator","observedVariableIndex","conditionType","color","dataType","chartType","axisContainer","valueType","updateCharts","getValueCount","eventTypeValueCount","questionnaire","filterEntireColumn","filterByValue","getPersonalStatisticsFromChart","joined","quit","getValueListInfo","reset","filterRowsByResponseTime","getView","content","length","map","valueList","name","view","count","_section","hasAlternatives","getAlternatives","getDynamic","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","studyId","isLoggedIn","getUrl","depth","getHash","goTo","target","window","location","hash","newSection","destroy","OptimusPrimeTransformer","toAttribute","toObs","OptimusPrimeNumberTransformer","parseInt","onBeforeChange","obs","BooleanTransformer","DateTransformer","intValue","toISOString","split","getTime","TimeTransformer","midnight","parts","date","setHours","setMinutes","BindObservable","transformer","attr","event","attrValue","e","element","enabled","drawGraph","chart","promise","noSort","data","chartView","hasChildNodes","removeChild","lastChild","chartViewBox","additionalStatistics","oncreate","vNode","attrs","dom","getElementsByClassName","promiseObserverId","onupdate","removeObserver","onremove","className","ChartView","ChartComponent","DashElementView","options","classString","floatingRight","floating","small","highlight","disabled","template","icon","noCompatibilityIcon","msg","innerLinkTitle","innerLinkHref","href","DashTemplateView","startsWith","onclick","showAsClickable","hasOwnProperty","getNewClassString","size","oldClassString","DashElement","option","DashRow","imageRecord","Android","iOS","Web","onPointerEnter","onPointerLeave","NotCompatibleIcon","translationRecord","Lang","devices","device","join","onpointerenter","onpointerleave","SearchBox","viewList","tools","placeholder","onkeyup","updateSearchFromEvent","entry","searchView","currentSearchValue","updateSearch","s","search","SearchWidget","SearchBarComponent","TitleRow"],"sourceRoot":""}