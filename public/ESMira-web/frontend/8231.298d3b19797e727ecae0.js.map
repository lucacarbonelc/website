{"version":3,"file":"8231.298d3b19797e727ecae0.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/loader/AboutESMiraLoader.ts","webpack://ESMira/./src/frontend/ts/pages/screenshots.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashElement.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashRow.tsx","webpack://ESMira/./src/frontend/ts/widgets/NotCompatibleIcon.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {URL_ABOUT_ESMIRA_JSON, URL_ABOUT_ESMIRA_PUBLICATIONS_JSON, URL_ABOUT_ESMIRA_STRUCTURE_JSON} from \"../constants/urls\";\nimport {Lang} from \"../singletons/Lang\";\nimport {PromiseCache} from \"../singletons/PromiseCache\";\nimport {Requests} from \"../singletons/Requests\";\n\nexport interface AboutESMiraInterface {\n\tstructure: {\n\t\trepository_link: string,\n\t\tpage_about: {\n\t\t\tid: string\n\t\t\tdash?: {\n\t\t\t\tid: string,\n\t\t\t\tscreenshots?: string,\n\t\t\t\ticon: string\n\t\t\t}[],\n\t\t\turls?: {\n\t\t\t\tid: string,\n\t\t\t\thref: string\n\t\t\t}[]\n\t\t}[],\n\t\tpage_screenshots: {\n\t\t\tid: string\n\t\t\timages: {\n\t\t\t\tsrc: string,\n\t\t\t\tdesc?: string\n\t\t\t}[][]\n\t\t}[],\n\t\tpage_instances: {\n\t\t\ttitle: string,\n\t\t\tdescription: string,\n\t\t\tlogo: string,\n\t\t\turl: string\n\t\t}[]\n\t}\n\ttranslations: Record<string, string>\n}\n\nexport interface ESMiraPublicationsInterface {\n\tyears: number[],\n\tentries: Record<number, Publication[]>\n}\n\ninterface Publication {\n\tyear: number,\n\ttitle: string\n\turl: string\n}\n\nexport class AboutESMiraLoader {\n\tpublic static load(): Promise<AboutESMiraInterface> {\n\t\treturn PromiseCache.get(\"aboutESMira\", async () => {\n\t\t\tconst structure = await Requests.loadRaw(URL_ABOUT_ESMIRA_STRUCTURE_JSON)\n\t\t\ttry {\n\t\t\t\tconst lang = await Requests.loadRaw(URL_ABOUT_ESMIRA_JSON.replace(\"%s\", Lang.code))\n\t\t\t\treturn {\n\t\t\t\t\tstructure: JSON.parse(structure),\n\t\t\t\t\ttranslations: JSON.parse(lang)\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(e) {\n\t\t\t\tconst fallbackLang = await Requests.loadRaw(URL_ABOUT_ESMIRA_JSON.replace(\"%s\", \"en\"))\n\t\t\t\treturn {\n\t\t\t\t\tstructure: JSON.parse(structure),\n\t\t\t\t\ttranslations: JSON.parse(fallbackLang)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\t\n\tpublic static loadPublications(): Promise<ESMiraPublicationsInterface> {\n\t\treturn PromiseCache.get(\"ESMiraPublications\", async () => {\n\t\t\tconst publicationsArray: Publication[] = JSON.parse(await Requests.loadRaw(URL_ABOUT_ESMIRA_PUBLICATIONS_JSON))\n\t\t\t\n\t\t\tconst publications: Record<number,Publication[]> = {}\n\t\t\tconst years: number[] = []\n\t\t\tfor(let publication of publicationsArray) {\n\t\t\t\tif(!publications.hasOwnProperty(publication.year)) {\n\t\t\t\t\tpublications[publication.year] = []\n\t\t\t\t\tyears.push(publication.year)\n\t\t\t\t}\n\t\t\t\tpublications[publication.year].push(publication)\n\t\t\t}\n\t\t\tfor(const year in publications) {\n\t\t\t\tpublications[year].sort((a, b) => {\n\t\t\t\t\tif(a.title > b.title)\n\t\t\t\t\t\treturn 1\n\t\t\t\t\telse if(a.title < b.title)\n\t\t\t\t\t\treturn -1\n\t\t\t\t\telse\n\t\t\t\t\t\treturn 0\n\t\t\t\t})\n\t\t\t}\n\t\t\tyears.sort((a, b) => {\n\t\t\t\tif(a < b)\n\t\t\t\t\treturn 1\n\t\t\t\telse if(a > b)\n\t\t\t\t\treturn -1\n\t\t\t\telse\n\t\t\t\t\treturn 0\n\t\t\t})\n\t\t\t\n\t\t\treturn {\n\t\t\t\tyears: years,\n\t\t\t\tentries: publications\n\t\t\t}\n\t\t})\n\t}\n}","import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {DashRow} from \"../widgets/DashRow\";\nimport {DashElement} from \"../widgets/DashElement\";\nimport {Lang} from \"../singletons/Lang\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {Section} from \"../site/Section\";\nimport {AboutESMiraInterface, AboutESMiraLoader} from \"../loader/AboutESMiraLoader\";\nimport {URL_ABOUT_ESMIRA_SOURCE} from \"../constants/urls\";\nimport {DropdownMenu} from \"../widgets/DropdownMenu\";\n\nexport class Content extends SectionContent {\n\tprivate about: AboutESMiraInterface\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tAboutESMiraLoader.load()\n\t\t]\n\t}\n\t\n\tconstructor(section: Section, about: AboutESMiraInterface) {\n\t\tsuper(section)\n\t\tthis.about = about\n\t\t\n\t\twindow.setTimeout(() => {\n\t\t\tconst img = document.getElementById(`screenshots_${this.section.sectionValue}`)\n\t\t\tif(img)\n\t\t\t\timg.scrollIntoView({behavior: 'smooth'})\n\t\t}, 500)\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"screenshots\")\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst structure = this.about.structure\n\t\tconst translations = this.about.translations\n\t\treturn <div>\n\t\t\t{structure.page_screenshots.map((entry) =>\n\t\t\t\t<div>\n\t\t\t\t\t{TitleRow(translations[`${entry.id}_title`])}\n\t\t\t\t\t{DashRow(\n\t\t\t\t\t\t...entry.images.map((imageSection) =>\n\t\t\t\t\t\t\tDashElement(null, {\n\t\t\t\t\t\t\t\tcontent:<div>\n\t\t\t\t\t\t\t\t\t{imageSection.map((screenshot) =>\n\t\t\t\t\t\t\t\t\t\tDropdownMenu(\"screenshot\",\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"imageBox\" id={`screenshots_${entry.id}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t<img alt=\"screenshot\" src={`${URL_ABOUT_ESMIRA_SOURCE}${screenshot.src}`}/>\n\t\t\t\t\t\t\t\t\t\t\t\t{screenshot.desc && <span class=\"desc smallText\">{screenshot.desc}</span>}\n\t\t\t\t\t\t\t\t\t\t\t</div>,\n\t\t\t\t\t\t\t\t\t\t\t(close) =>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"screenshotWindow\" onclick={close}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img alt=\"screenshot\" src={`${URL_ABOUT_ESMIRA_SOURCE}${screenshot.src}`}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{screenshot.desc && <span class=\"desc smallText\">{screenshot.desc}</span>}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>,\n\t\t\t\t\t\t\t\t\t\t\t{fullScreen: true}\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {NotCompatibleIcon, PossibleDevices} from \"./NotCompatibleIcon\";\n\ntype DashTemplateOptions = {\n\ttitle: string\n\ticon?: Vnode<any, any>\n\tnoCompatibilityIcon?: PossibleDevices[]\n\tmsg?: string | Vnode<any, any>\n\tinnerLinkTitle?: string\n\tinnerLinkHref?: string\n}\n\ntype DashContainerOptions = \"stretched\" | \"cramped\" | \"vertical\" | \"horizontal\" | null\nexport type DashViewOptions = {\n\tdisabled?: boolean\n\tonclick?: (e: MouseEvent) => void\n\thref?: string\n\tshowAsClickable?: boolean\n\tfloating?: boolean\n\tfloatingRight?: boolean\n\thighlight?: boolean\n\tsmall?: boolean\n\ttemplate?: DashTemplateOptions\n\tcontent?: Vnode<any, any>\n}\n\nfunction DashTemplateView(options: DashTemplateOptions): Vnode<any, any> {\n\treturn (\n\t\t<div>\n\t\t\t{(options.icon || options.noCompatibilityIcon) &&\n\t\t\t\t<div class=\"dashIcon\">\n\t\t\t\t\t{options.icon}\n\t\t\t\t\t{options.noCompatibilityIcon && NotCompatibleIcon(... options.noCompatibilityIcon)}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t<div class=\"dashTitle\">{options.title}</div>\n\t\t\t{options.msg && <p class=\"dashMsg\">{options.msg}</p>}\n\t\t\t{options.innerLinkTitle && options.innerLinkHref && <a class=\"link\" href={options.innerLinkHref}>{options.innerLinkTitle}</a>}\n\t\t</div>\n\t)\n}\n\nfunction DashElementView(options: DashViewOptions): Vnode<any, any> {\n\tlet classString = \"dashEl\"\n\tif(options.floatingRight)\n\t\tclassString += \" floating right\"\n\telse if(options.floating)\n\t\tclassString += \" floating\"\n\t\n\tif(options.small)\n\t\tclassString += \" small\"\n\tif(options.highlight)\n\t\tclassString += \" highlight\"\n\tif(options.disabled)\n\t\tclassString += \" disabled\"\n\t\n\tlet view: Vnode<any, any>\n\tif(options.content)\n\t\tview = options.content\n\telse if(options.template)\n\t\tview = DashTemplateView(options.template)\n\telse\n\t\tview = <div class=\"highlight\">Missing Dash Information</div>\n\t\n\tif(options.href) {\n\t\treturn <a target={options.href.startsWith(\"http\") ? \"_blank\" : \"\"} class={`${classString} dashLink`} href={options.href}>{view}</a>\n\t}\n\telse if(options.onclick)\n\t\treturn <a class={`${classString} dashLink`} onclick={options.onclick}>{view}</a>\n\telse if(options.showAsClickable)\n\t\treturn <a class={`${classString} dashLink`}>{view}</a>\n\telse {\n\t\tview.attrs[\"className\"] = `${classString} ${view.attrs.hasOwnProperty(\"className\") ? view.attrs[\"className\"] : \"\"}`\n\t\treturn view\n\t}\n}\n\nfunction getNewClassString(size: DashContainerOptions, oldClassString: string): string {\n\tif(size)\n\t\toldClassString += \" \" + size\n\treturn oldClassString\n}\n\nexport function DashElement(\n\tsize: DashContainerOptions,\n\t... options: (DashViewOptions | false)[]\n): Vnode<any, any> {\n\tif(options.length == 1) {\n\t\tif(!options[0])\n\t\t\treturn <div></div>\n\t\t\n\t\tconst view =  DashElementView(options[0])\n\t\tview.attrs[\"className\"] = getNewClassString(size, view.attrs[\"className\"])\n\t\treturn view\n\t}\n\telse {\n\t\tconst classString = getNewClassString(size, \"multipleChildren\")\n\t\treturn <div class={classString}>\n\t\t\t{options.map((option) => option && DashElementView(option))}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\"\nexport function DashRow(... content: Array<Vnode<any, any> | undefined | false>): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"dashRow\">{content}</div>\n\t)\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport androidSvg from \"../../imgs/devices/android.svg?raw\"\nimport iosSvg from \"../../imgs/devices/ios.svg?raw\"\nimport webSvg from \"../../imgs/devices/web.svg?raw\"\nimport {closeDropdown, openDropdown} from \"./DropdownMenu\";\n\n\nexport type PossibleDevices = \"Android\" | \"iOS\" | \"Web\"\n\nconst imageRecord: Record<PossibleDevices, string> = {\n\tAndroid: androidSvg,\n\tiOS: iosSvg,\n\tWeb: webSvg\n}\n\nfunction onPointerEnter(title: string, e: MouseEvent) {\n\topenDropdown(\"notCompatible\", e.target as HTMLElement,\n\t\t() => <div class=\"smallText center\">{title}</div>\n\t)\n}\nfunction onPointerLeave() {\n\tcloseDropdown(\"notCompatible\")\n}\n\nexport function NotCompatibleIcon(... devices: PossibleDevices[]): Vnode<any, any> {\n\tconst translationRecord: Record<PossibleDevices, string> = {\n\t\tAndroid: Lang.get(\"Android\"),\n\t\tiOS: Lang.get(\"iOS\"),\n\t\tWeb: Lang.get(\"web_questionnaire\")\n\t}\n\tconst title = Lang.get(\"not_compatible_with\", devices.map((device) => translationRecord[device]).join(\", \"))\n\treturn <div class=\"notCompatibleIcon\" onpointerenter={onPointerEnter.bind(null, title)} onpointerleave={onPointerLeave.bind(null)}>\n\t\t{devices.map((device) =>\n\t\t\t<div class=\"deviceIcon\">{m.trust(imageRecord[device])}</div>)}\n\t</div>\n\n}\n","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["load","get","loadRaw","structure","replace","code","lang","JSON","parse","translations","fallbackLang","loadPublications","publicationsArray","publications","years","publication","hasOwnProperty","year","push","sort","a","b","title","entries","section","about","window","setTimeout","img","document","getElementById","sectionValue","scrollIntoView","behavior","preLoad","_section","getView","this","page_screenshots","map","entry","id","images","imageSection","content","screenshot","class","alt","src","desc","close","onclick","fullScreen","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticInt","getStaticString","getStudyOrNull","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","getUrl","depth","getHash","goTo","target","location","hash","newSection","destroy","DashElementView","options","view","classString","floatingRight","floating","small","highlight","disabled","template","icon","noCompatibilityIcon","msg","innerLinkTitle","innerLinkHref","href","DashTemplateView","startsWith","showAsClickable","attrs","getNewClassString","size","oldClassString","DashElement","length","option","DashRow","imageRecord","Android","iOS","Web","onPointerEnter","e","onPointerLeave","NotCompatibleIcon","translationRecord","Lang","devices","device","join","onpointerenter","bind","onpointerleave","TitleRow"],"sourceRoot":""}