{"version":3,"file":"7643.07c95f702d9fc1d41fbc.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/sumScoreEdit.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BindObservable.tsx","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {BindObservable, OnBeforeChangeTransformer} from \"../widgets/BindObservable\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {ObservableArray} from \"../observable/ObservableArray\";\nimport {createUniqueName} from \"../helpers/UniqueName\";\nimport {StudyDataValues} from \"../helpers/StudyDataValues\";\nimport {Section} from \"../site/Section\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {BtnTrash} from \"../widgets/BtnWidgets\";\n\nexport class Content extends SectionContent {\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [section.getStudyPromise()]\n\t}\n\tpublic title(): string {\n\t\treturn this.getQuestionnaireOrThrow().sumScores.get()[this.getStaticInt(\"sumScoreI\") ?? 0].name.get()\n\t}\n\t\n\tprivate addEntry(list: ObservableArray<string, BaseObservable<string>>, e: InputEvent): void {\n\t\tconst element = e.target as HTMLSelectElement\n\t\t\n\t\tlist.push(element.value)\n\t\telement.selectedIndex = 0\n\t}\n\t\n\tprivate removeEntry(list: ObservableArray<string, BaseObservable<string>>, index: number): void {\n\t\tlist.remove(index)\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst study = this.getStudyOrThrow()\n\t\tconst questionnaire = this.getQuestionnaireOrThrow()\n\t\tconst variables = StudyDataValues.getQuestionnaireVariables(questionnaire)\n\t\tconst sumScore = questionnaire.sumScores.get()[this.getStaticInt(\"sumScoreI\") ?? 0]\n\t\tif(!sumScore)\n\t\t\tthrow new Error(`SumScore does not exist!`)\n\t\t\n\t\treturn <div>\n\t\t\t<div class=\"center\">\n\t\t\t\t<label>\n\t\t\t\t\t<small>{Lang.get(\"variable_name\")}</small>\n\t\t\t\t\t\n\t\t\t\t\t<input type=\"text\" {... BindObservable(sumScore.name, new OnBeforeChangeTransformer<string>((before, after) => {\n\t\t\t\t\t\treturn createUniqueName(study, after) ?? before\n\t\t\t\t\t}))}/>\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"sum\"))}\n\t\t\t<div class=\"listParent\">\n\t\t\t\t<div class=\"listChild\">\n\t\t\t\t\t{sumScore.addList.get().map((entry, index) =>\n\t\t\t\t\t\t<div class=\"verticalPadding\">\n\t\t\t\t\t\t\t<span>&#x271A;</span>\n\t\t\t\t\t\t\t<span>{entry.get()}</span>\n\t\t\t\t\t\t\t{BtnTrash(this.removeEntry.bind(this, sumScore.addList, index))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{sumScore.subtractList.get().map((entry, index) =>\n\t\t\t\t\t\t<div class=\"verticalPadding\">\n\t\t\t\t\t\t\t<span>&#9866;</span>\n\t\t\t\t\t\t\t<span>{entry.get()}</span>\n\t\t\t\t\t\t\t{BtnTrash(this.removeEntry.bind(this, sumScore.subtractList, index))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div>\n\t\t\t\t\t<select class=\"smallText\" onchange={this.addEntry.bind(this, sumScore.addList)}>\n\t\t\t\t\t\t<option>{Lang.get(\"select_to_add\")}</option>\n\t\t\t\t\t\t{variables.map((variable) => <option>{variable}</option>)}\n\t\t\t\t\t</select>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<select class=\"smallText \" onchange={this.addEntry.bind(this, sumScore.subtractList)}>\n\t\t\t\t\t\t<option>{Lang.get(\"select_to_subtract\")}</option>\n\t\t\t\t\t\t{variables.map((variable) => <option>{variable}</option>)}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m from \"mithril\"\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {getMidnightMillis, timeStampToTimeString} from \"../constants/methods\";\n\nexport interface Transformer {\n\ttoAttribute(value: PrimitiveType): PrimitiveType\n\ttoObs(value: string, obs: BaseObservable<PrimitiveType>): PrimitiveType\n}\nconst OptimusPrimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value\n\t}\n}\nconst OptimusPrimeNumberTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn parseInt(value) || 0\n\t}\n}\n\nexport class OnBeforeChangeTransformer<T extends PrimitiveType> implements Transformer {\n\tprivate readonly onBeforeChange: (before: T, after: T) => T\n\tconstructor(onBeforeChange: (before: T, after: T) => T) {\n\t\tthis.onBeforeChange = onBeforeChange\n\t}\n\tpublic toAttribute(value: T): T {\n\t\treturn value\n\t}\n\tpublic toObs(value: string, obs: BaseObservable<T>): T {\n\t\treturn this.onBeforeChange(obs.get(), value as T) || value as T\n\t}\n}\nexport const BooleanTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value ? \"1\" : \"0\"\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value == \"1\"\n\t}\n}\nexport const DateTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == 0)\n\t\t\treturn \"\"\n\t\treturn (new Date(intValue)).toISOString().split(\"T\")[0]\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value === \"\")\n\t\t\treturn 0\n\t\telse\n\t\t\treturn (new Date(value)).getTime()\n\t}\n}\nexport const TimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == -1)\n\t\t\treturn \"\"\n\t\telse {\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\treturn timeStampToTimeString(midnight + intValue)\n\t\t}\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value == \"\")\n\t\t\treturn -1\n\t\telse {\n\t\t\tconst parts = value.split(\":\")\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\tconst date = new Date()\n\t\t\tdate.setHours(parseInt(parts[0]) || 0)\n\t\t\tdate.setMinutes(parseInt(parts[1]) || 0)\n\t\t\t\n\t\t\treturn date.getTime() - midnight\n\t\t}\n\t}\n}\n\nexport function BindObservable(obs: BaseObservable<PrimitiveType>, transformer?: Transformer, attr?: keyof HTMLInputElement, event: keyof HTMLInputElement = \"onchange\"): Record<string, any> {\n\tconst attrValue = obs.get()\n\tif(!transformer) {\n\t\tif(typeof attrValue == \"number\")\n\t\t\ttransformer = OptimusPrimeNumberTransformer\n\t\telse\n\t\t\ttransformer = OptimusPrimeTransformer\n\t}\n\tif(!attr) {\n\t\tif(typeof attrValue == \"boolean\")\n\t\t\tattr = \"checked\"\n\t\telse\n\t\t\tattr = \"value\"\n\t}\n\t\n\treturn {\n\t\t[attr]: transformer.toAttribute(attrValue),\n\t\t[event]: (e: InputEvent) => {\n\t\t\tconst element = e.target as HTMLInputElement\n\t\t\tobs.set(transformer!.toObs(element[attr!] as string, obs))\n\t\t}\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["preLoad","section","getStudyPromise","title","this","getQuestionnaireOrThrow","sumScores","get","getStaticInt","name","addEntry","list","e","element","target","push","value","selectedIndex","removeEntry","index","remove","getView","study","getStudyOrThrow","questionnaire","variables","getQuestionnaireVariables","sumScore","Error","class","type","before","after","getWithColon","addList","map","entry","bind","subtractList","onchange","variable","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getQuestionnaireOrNull","qId","questionnaires","internalId","getTools","getAdmin","hasPermission","studyId","isLoggedIn","getUrl","depth","getHash","goTo","window","location","hash","newSection","destroy","OptimusPrimeTransformer","toAttribute","toObs","OptimusPrimeNumberTransformer","parseInt","onBeforeChange","obs","BooleanTransformer","DateTransformer","intValue","toString","Date","toISOString","split","getTime","TimeTransformer","midnight","parts","date","setHours","setMinutes","BindObservable","transformer","attr","event","attrValue","set","BtnCustom","icon","onclick","hoverTitle","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer","TitleRow","attrs"],"sourceRoot":""}