{"version":3,"file":"6023.dafda9c362b615acd640.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/helpers/SharedUrlAlternatives.ts","webpack://ESMira/./src/frontend/ts/pages/messagesOverview.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {SectionAlternative, SectionContent} from \"../site/SectionContent\";\nimport {Lang} from \"../singletons/Lang\";\n\nexport class SharedUrlAlternatives {\n\tpublic static studyAlternatives(sectionContent: SectionContent, indexName: \"edit\" | \"msgs\" | \"data\"): SectionAlternative[] {\n\t\tconst study = sectionContent.getStudyOrThrow()\n\t\tconst studyId = study.id.get()\n\t\tconst depth = sectionContent.section.depth - 1\n\t\treturn [\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"edit_study\"),\n\t\t\t\ttarget: indexName != \"edit\" &&\n\t\t\t\t\tsectionContent\n\t\t\t\t\t\t.getUrl(`studyEdit,id:${studyId}`, depth)\n\t\t\t\t\t\t.replace(`allStudies:${indexName}`, \"allStudies:edit\")\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"messages\"),\n\t\t\t\ttarget: indexName != \"msgs\" &&\n\t\t\t\t\tsectionContent\n\t\t\t\t\t\t.getUrl(`messagesOverview,id:${studyId}`, depth)\n\t\t\t\t\t\t.replace(`allStudies:${indexName}`, \"allStudies:msgs\")\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"data\"),\n\t\t\t\ttarget: indexName != \"data\" &&\n\t\t\t\t\tsectionContent\n\t\t\t\t\t\t.getUrl(`dataStatistics,id:${studyId}`, depth)\n\t\t\t\t\t\t.replace(`allStudies:${indexName}`, \"allStudies:data\")\n\t\t\t}\n\t\t]\n\t}\n}","import {SectionAlternative, SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {SharedUrlAlternatives} from \"../helpers/SharedUrlAlternatives\";\nimport {BtnReload} from \"../widgets/BtnWidgets\";\n\nexport class Content extends SectionContent {\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tsection.getStudyPromise(),\n\t\t\tsection.getTools().messagesLoader.getReloadedMessageParticipantInfoList(section.getStaticInt(\"id\") ?? -1)\n\t\t]\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"messages\")\n\t}\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn BtnReload(this.section.reload.bind(this.section), Lang.get(\"reload\"))\n\t}\n\t\n\tpublic hasAlternatives(): boolean {\n\t\treturn true\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | null {\n\t\treturn SharedUrlAlternatives.studyAlternatives(this, \"msgs\")\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst studyId = this.getStudyOrThrow().id.get()\n\t\tconst messageParticipantEntryList = this.getTools().messagesLoader.getMessageParticipantInfoListOrThrow(studyId).get()\n\t\treturn <div>\n\t\t\t<div class=\"center\">\n\t\t\t\t<a href={this.getUrl(\"chat\")}>{Lang.get(\"send_message_to_user\")}</a>\n\t\t\t</div>\n\t\t\t<br/>\n\t\t\t{TitleRow(Lang.getWithColon(\"messages\"))}\n\t\t\t<div class=\"stickerList\">\n\t\t\t\t{messageParticipantEntryList.map((entry) =>\n\t\t\t\t\t<div class=\"line\">\n\t\t\t\t\t\t<a class=\"title\" href={this.getUrl(`chat,userId:${btoa(entry.name.get())}`)}>\n\t\t\t\t\t\t\t<span>{entry.name.get()}</span>\n\t\t\t\t\t\t\t{entry.pending.get() &&\n\t\t\t\t\t\t\t\t<span class=\"extraNote\">{Lang.get('waiting')}</span>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t{entry.unread.get() &&\n\t\t\t\t\t\t\t<small class=\"infoSticker highlight\">{Lang.get(\"unread\")}</small>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<small class=\"infoSticker\">{new Date(entry.lastMsg.get()).toLocaleString()}</small>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["studyAlternatives","sectionContent","indexName","studyId","getStudyOrThrow","id","get","depth","section","title","target","getUrl","replace","preLoad","getStudyPromise","getTools","messagesLoader","getReloadedMessageParticipantInfoList","getStaticInt","titleExtra","this","reload","bind","hasAlternatives","getAlternatives","getView","messageParticipantEntryList","getMessageParticipantInfoListOrThrow","class","href","getWithColon","map","entry","btoa","name","pending","unread","Date","lastMsg","toLocaleString","_section","preInit","Promise","resolve","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticString","getStudyOrNull","studies","studyLoader","getStudies","getCount","getFirst","getEntry","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getAdmin","hasPermission","isLoggedIn","getHash","goTo","window","location","hash","newSection","destroy","BtnCustom","icon","onclick","hoverTitle","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer","TitleRow","attrs"],"sourceRoot":""}