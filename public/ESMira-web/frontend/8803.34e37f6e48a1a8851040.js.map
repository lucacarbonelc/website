{"version":3,"file":"8803.34e37f6e48a1a8851040.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/studies.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Study} from \"../data/study/Study\";\nimport {StudiesDataType} from \"../loader/StudyLoader\";\n\nexport class Content extends SectionContent {\n\tprotected targetPage: string\n\tprotected titleString: string\n\tprivate readonly accessKey: ObservablePrimitive<string>\n\t\n\tprotected studies: Study[] = []\n\t\n\tconstructor(section: Section) {\n\t\tsuper(section)\n\t\tthis.accessKey = this.getDynamic(\"accessKey\", \"\")\n\t\t\n\t\tswitch(section.sectionValue) {\n\t\t\tcase \"appInstall\":\n\t\t\t\tthis.targetPage = \"appInstall\"\n\t\t\t\tthis.titleString = Lang.get(\"select_a_study\")\n\t\t\t\tbreak\n\t\t\tcase \"statistics\":\n\t\t\t\tthis.targetPage = \"publicStatistics\"\n\t\t\t\tthis.titleString = Lang.get(\"statistics\")\n\t\t\t\tbreak\n\t\t\tcase \"attend\":\n\t\t\tdefault:\n\t\t\t\tthis.targetPage = \"studyOverview\"\n\t\t\t\tthis.titleString = Lang.get(\"select_a_study\")\n\t\t\t\tbreak\n\t\t}\n\t}\n\tpublic preInit(): Promise<any> {\n\t\treturn this.loadStudies(this.accessKey.get())\n\t}\n\t\n\tpublic title(): string {\n\t\tconst allSections = this.section.allSections\n\t\tconst depth = this.section.depth\n\t\tif(allSections.length > depth+1) {\n\t\t\tconst id = allSections[depth+1].getStaticInt(\"id\")\n\t\t\tif(id)\n\t\t\t\treturn this.getStudyOrNull(id)?.title.get() ?? this.titleString\n\t\t}\n\t\treturn this.titleString\n\t}\n\t\n\tprotected updateSortedStudies(unsortedStudies: Study[]): void {\n\t\tconst studies = this.section.siteData.studyLoader.getSortedStudyList(unsortedStudies)\n\t\tswitch(this.section.sectionValue) {\n\t\t\tcase \"statistics\":\n\t\t\t\tthis.studies = studies.filter((study) => study.publicStatistics.charts.get().length != 0)\n\t\t\t\tbreak\n\t\t\tcase \"attend\":\n\t\t\t\tthis.studies = studies.filter((study) => study.version.get() != 0 && study.published.get())\n\t\t\t\tbreak\n\t\t\tcase \"appInstall\":\n\t\t\tdefault:\n\t\t\t\tthis.studies = studies\n\t\t\t\tbreak\n\t\t}\n\t}\n\t\n\tprivate async reloadAccessKey(e: SubmitEvent): Promise<void> {\n\t\te.preventDefault()\n\t\tconst formData = new FormData(e.target as HTMLFormElement)\n\t\tconst accessKey = formData.get(\"accessKeyInput\")?.toString() ?? \"\"\n\t\treturn this.loadStudies(accessKey)\n\t}\n\tprivate async loadStudies(accessKey: string): Promise<void> {\n\t\tdocument.cookie = `accessKey=${accessKey}`\n\t\tthis.accessKey.set(accessKey)\n\t\ttry {\n\t\t\tconst studiesObs = await this.section.loader.showLoader(this.section.siteData.studyLoader.loadAvailableStudies(this.accessKey.get(), true))\n\t\t\tthis.section.loader.closeLoader() //this will not be run if there is an error\n\t\t\tthis.updateSortedStudies(Object.values(studiesObs.get()))\n\t\t}\n\t\tcatch(e) {\n\t\t\tthis.studies = []\n\t\t}\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div class=\"accessKeyBox\">{\n\t\t\t\t\t<form method=\"post\" action=\"\" onsubmit={this.reloadAccessKey.bind(this)}>\n\t\t\t\t\t\t<label class=\"noDesc\">\n\t\t\t\t\t\t\t<small>{Lang.get(\"accessKey\")}</small>\n\t\t\t\t\t\t\t<input name=\"accessKeyInput\" type=\"text\" value={this.accessKey.get()}/>\n\t\t\t\t\t\t\t<input type=\"submit\" value={Lang.get('send')}/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</form>\n\t\t\t\t}</div>\n\t\t\t\t\n\t\t\t\t<div class=\"stickerList\">{\n\t\t\t\t\tthis.studies.map((study) =>\n\t\t\t\t\t\t<div class=\"line\">\n\t\t\t\t\t\t\t<span class=\"title\">{this.getStudyLinkView(study)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}</div>\n\t\t\t</div>\n\t\t)\n\t}\n\t\n\tprotected getStudyLinkView(study: Study): Vnode<any, any> {\n\t\treturn <a href={this.getUrl(`${this.targetPage},id:${study.id.get()}`)}>{study.title.get()} <i>{this.getStudyTagInParentheses(study)}</i></a>\n\t}\n\n\tprotected getStudyTagInParentheses(study: Study): string {\n\t\tlet studyTag = study.studyTag.get()\n\t\treturn studyTag == \"\" ? \"\" : (\"(\" + studyTag + \")\")\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}"],"names":["section","studies","accessKey","getDynamic","sectionValue","targetPage","titleString","get","preInit","this","loadStudies","title","allSections","depth","length","id","getStaticInt","getStudyOrNull","updateSortedStudies","unsortedStudies","siteData","studyLoader","getSortedStudyList","filter","study","publicStatistics","charts","version","published","reloadAccessKey","e","preventDefault","formData","FormData","target","toString","document","cookie","set","loader","showLoader","loadAvailableStudies","studiesObs","closeLoader","Object","values","getView","class","method","action","onsubmit","bind","name","type","value","map","getStudyLinkView","href","getUrl","getStudyTagInParentheses","studyTag","preLoad","_section","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","key","defaultValue","setDynamic","newValue","dynamicValues","setChild","getStaticString","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","studyId","isLoggedIn","getHash","goTo","window","location","hash","newSection","destroy"],"sourceRoot":""}