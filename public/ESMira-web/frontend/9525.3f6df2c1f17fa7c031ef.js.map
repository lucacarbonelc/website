{"version":3,"file":"9525.3f6df2c1f17fa7c031ef.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/rewardCodes.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BindObservable.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashElement.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashRow.tsx","webpack://ESMira/./src/frontend/ts/widgets/NotCompatibleIcon.tsx","webpack://ESMira/./src/frontend/ts/widgets/SearchBox.tsx","webpack://ESMira/./src/frontend/ts/widgets/SearchWidget.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {DashRow} from \"../widgets/DashRow\";\nimport {DashElement} from \"../widgets/DashElement\";\nimport {Lang} from \"../singletons/Lang\";\nimport {BindObservable} from \"../widgets/BindObservable\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {SearchBox} from \"../widgets/SearchBox\";\nimport {Requests} from \"../singletons/Requests\";\nimport {FILE_ADMIN} from \"../constants/urls\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Section} from \"../site/Section\";\n\ninterface EntriesPerQuestionnaire {\n\ttitle: string\n\tcount: number\n}\n\ninterface CodeResponse {\n\tfaultyCode: boolean\n\ttimestamp: number\n\tquestionnaireDataSetCount: Record<number, number>\n\tnamedQuestionnaireDataSetCount: EntriesPerQuestionnaire[]\n}\n\ninterface RewardCodeData {\n\trewardCodes: string[]\n\tuserIdsWithRewardCode: string[]\n\tuserIdsWithoutRewardCode: string[]\n}\n\nexport class Content extends SectionContent {\n\tprivate readonly rewardCodeData: RewardCodeData\n\tprivate codeResponse: CodeResponse | null = null\n\tprivate readonly currentCode = new ObservablePrimitive<string>(\"\", null, \"currentRewardCode\")\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tRequests.loadJson(\n\t\t\t\t`${FILE_ADMIN}?type=GetRewardCodeData`, \"post\", `study_id=${section.getStaticInt(\"id\") ?? 0}`\n\t\t\t),\n\t\t\tsection.getStrippedStudyListPromise()\n\t\t]\n\t}\n\t\n\tconstructor(section: Section, rewardCodeData: RewardCodeData) {\n\t\tsuper(section)\n\t\t\n\t\trewardCodeData.rewardCodes.sort()\n\t\trewardCodeData.userIdsWithRewardCode.sort()\n\t\trewardCodeData.userIdsWithoutRewardCode.sort()\n\t\tthis.rewardCodeData = rewardCodeData\n\t\t\n\t\tthis.currentCode.addObserver(async () => {\n\t\t\tawait this.checkCode()\n\t\t})\n\t}\n\t\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"reward_codes\")\n\t}\n\t\n\tprivate async checkCode(): Promise<void> {\n\t\tthis.codeResponse = null\n\t\t\n\t\tif(!this.currentCode.get().length)\n\t\t\treturn\n\t\tconst studyId = this.getStaticInt(\"id\") ?? 0\n\t\t\n\t\tconst codeResponse: CodeResponse = await this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=ValidateRewardCode`,\n\t\t\t\"post\",\n\t\t\t`study_id=${studyId}&code=${this.currentCode.get()}`\n\t\t)\n\t\tthis.codeResponse = codeResponse\n\t\t\n\t\tif(codeResponse.faultyCode)\n\t\t\treturn\n\t\t\n\t\t\n\t\t//create index for internalId:\n\t\tlet questionnaireIndex: Record<number, string> = {}\n\t\tlet study = this.getStudyOrThrow()\n\t\tstudy.questionnaires.get().forEach((questionnaire) => {\n\t\t\tquestionnaireIndex[questionnaire.internalId.get()] = questionnaire.getTitle();\n\t\t})\n\t\t\n\t\t//combine data:\n\t\tlet namedQuestionnaireEntryCount: EntriesPerQuestionnaire[] = [];\n\t\tfor(let internalId in codeResponse.questionnaireDataSetCount) {\n\t\t\tif(!codeResponse.questionnaireDataSetCount.hasOwnProperty(internalId))\n\t\t\t\tcontinue;\n\t\t\tnamedQuestionnaireEntryCount.push({title: questionnaireIndex[internalId], count: codeResponse.questionnaireDataSetCount[internalId]});\n\t\t}\n\t\tcodeResponse.namedQuestionnaireDataSetCount = namedQuestionnaireEntryCount\n\t}\n\t\n\tprivate selectRewardCode(code: string): void {\n\t\tthis.currentCode.set(code)\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn <div class=\"rewardCodes\">\n\t\t\t{TitleRow(Lang.getWithColon(\"reward_codes\"))}\n\t\t\t{DashRow(\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent:\n\t\t\t\t\t\tSearchBox(Lang.get(\"generated_reward_codes\", this.rewardCodeData.rewardCodes.length), this.rewardCodeData.rewardCodes.map((code) => {\n\t\t\t\t\t\t\treturn {key: code, view: <span class={`line clickable verticalPadding smallText ${this.currentCode.get() == code ? \"highlight\" : \"\"}`} onclick={this.selectRewardCode.bind(this, code)}>{code}</span>}\n\t\t\t\t\t\t}))\n\t\t\t\t}),\n\t\t\t\t\n\t\t\t\tDashElement(\"vertical\", {\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t<div class=\"horizontalPadding verticalPadding center\">\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<small>{Lang.get(\"reward_code\")}</small>\n\t\t\t\t\t\t\t\t<input type=\"text\" class={`small ${this.codeResponse != null ? (!this.codeResponse?.faultyCode ? \"success\" : \"failed\") : \"nothing\"}`} {... BindObservable(this.currentCode)}/>\n\t\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t\t<input class=\"small\" type=\"button\" onclick={this.checkCode.bind(this)} value={Lang.get(\"check\")}/>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t}, this.codeResponse != null && !this.codeResponse.faultyCode && {\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t<div class=\"fadeIn\">\n\t\t\t\t\t\t\t<h2 class=\"spacingLeft\">{Lang.getWithColon(\"creation_date\")}</h2>\n\t\t\t\t\t\t\t<div class=\"spacingLeft horizontalPadding spacingBottom\">{(new Date(this.codeResponse.timestamp)).toLocaleString()}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t}, this.codeResponse != null && !this.codeResponse.faultyCode && {\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t<div class=\"fadeIn\">\n\t\t\t\t\t\t\t<h2 class=\"spacingLeft\">{Lang.getWithColon('entries_at_creation_time')}</h2>\n\t\t\t\t\t\t\t<table class=\"spacingLeft spacingBottom\">\n\t\t\t\t\t\t\t\t{this.codeResponse.namedQuestionnaireDataSetCount.map((entry) =>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td class=\"horizontalPadding\">{Lang.get(\"colon\", entry.title ?? Lang.get(\"unknown\"))}</td>\n\t\t\t\t\t\t\t\t\t\t<td class=\"horizontalPadding\">{entry.count}</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t\t})\n\t\t\t)}\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"participants\"))}\n\t\t\t{DashRow(\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent:\n\t\t\t\t\t\tSearchBox(Lang.get(\"without_reward_code\", this.rewardCodeData.userIdsWithoutRewardCode.length), this.rewardCodeData.userIdsWithoutRewardCode.map((userId) => {\n\t\t\t\t\t\t\treturn {key: userId, view: <span class=\"line verticalPadding smallText\">{userId}</span>}\n\t\t\t\t\t\t}))\n\t\t\t\t}),\n\t\t\t\t\n\t\t\t\tDashElement(null, {\n\t\t\t\t\tcontent:\n\t\t\t\t\t\tSearchBox(Lang.get(\"with_reward_code\", this.rewardCodeData.userIdsWithRewardCode.length), this.rewardCodeData.userIdsWithRewardCode.map((userId) => {\n\t\t\t\t\t\t\treturn {key: userId, view: <span class=\"line verticalPadding smallText\">{userId}</span>}\n\t\t\t\t\t\t}))\n\t\t\t\t})\n\t\t\t)}\n\t\t</div>\n\t}\n\t\n\tpublic destroy(): void {\n\t\tthis.currentCode.removeAllConnectedObservers()\n\t\tsuper.destroy()\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m from \"mithril\"\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {getMidnightMillis, timeStampToTimeString} from \"../constants/methods\";\n\nexport interface Transformer {\n\ttoAttribute(value: PrimitiveType): PrimitiveType\n\ttoObs(value: string, obs: BaseObservable<PrimitiveType>): PrimitiveType\n}\nconst OptimusPrimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value\n\t}\n}\nconst OptimusPrimeNumberTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn parseInt(value) || 0\n\t}\n}\n\nexport class OnBeforeChangeTransformer<T extends PrimitiveType> implements Transformer {\n\tprivate readonly onBeforeChange: (before: T, after: T) => T\n\tconstructor(onBeforeChange: (before: T, after: T) => T) {\n\t\tthis.onBeforeChange = onBeforeChange\n\t}\n\tpublic toAttribute(value: T): T {\n\t\treturn value\n\t}\n\tpublic toObs(value: string, obs: BaseObservable<T>): T {\n\t\treturn this.onBeforeChange(obs.get(), value as T) || value as T\n\t}\n}\nexport const BooleanTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value ? \"1\" : \"0\"\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value == \"1\"\n\t}\n}\nexport const DateTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == 0)\n\t\t\treturn \"\"\n\t\treturn (new Date(intValue)).toISOString().split(\"T\")[0]\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value === \"\")\n\t\t\treturn 0\n\t\telse\n\t\t\treturn (new Date(value)).getTime()\n\t}\n}\nexport const TimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == -1)\n\t\t\treturn \"\"\n\t\telse {\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\treturn timeStampToTimeString(midnight + intValue)\n\t\t}\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value == \"\")\n\t\t\treturn -1\n\t\telse {\n\t\t\tconst parts = value.split(\":\")\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\tconst date = new Date()\n\t\t\tdate.setHours(parseInt(parts[0]) || 0)\n\t\t\tdate.setMinutes(parseInt(parts[1]) || 0)\n\t\t\t\n\t\t\treturn date.getTime() - midnight\n\t\t}\n\t}\n}\n\nexport function BindObservable(obs: BaseObservable<PrimitiveType>, transformer?: Transformer, attr?: keyof HTMLInputElement, event: keyof HTMLInputElement = \"onchange\"): Record<string, any> {\n\tconst attrValue = obs.get()\n\tif(!transformer) {\n\t\tif(typeof attrValue == \"number\")\n\t\t\ttransformer = OptimusPrimeNumberTransformer\n\t\telse\n\t\t\ttransformer = OptimusPrimeTransformer\n\t}\n\tif(!attr) {\n\t\tif(typeof attrValue == \"boolean\")\n\t\t\tattr = \"checked\"\n\t\telse\n\t\t\tattr = \"value\"\n\t}\n\t\n\treturn {\n\t\t[attr]: transformer.toAttribute(attrValue),\n\t\t[event]: (e: InputEvent) => {\n\t\t\tconst element = e.target as HTMLInputElement\n\t\t\tobs.set(transformer!.toObs(element[attr!] as string, obs))\n\t\t}\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {NotCompatibleIcon, PossibleDevices} from \"./NotCompatibleIcon\";\n\ntype DashTemplateOptions = {\n\ttitle: string\n\ticon?: Vnode<any, any>\n\tnoCompatibilityIcon?: PossibleDevices[]\n\tmsg?: string | Vnode<any, any>\n\tinnerLinkTitle?: string\n\tinnerLinkHref?: string\n}\n\ntype DashContainerOptions = \"stretched\" | \"cramped\" | \"vertical\" | \"horizontal\" | null\nexport type DashViewOptions = {\n\tdisabled?: boolean\n\tonclick?: (e: MouseEvent) => void\n\thref?: string\n\tshowAsClickable?: boolean\n\tfloating?: boolean\n\tfloatingRight?: boolean\n\thighlight?: boolean\n\tsmall?: boolean\n\ttemplate?: DashTemplateOptions\n\tcontent?: Vnode<any, any>\n}\n\nfunction DashTemplateView(options: DashTemplateOptions): Vnode<any, any> {\n\treturn (\n\t\t<div>\n\t\t\t{(options.icon || options.noCompatibilityIcon) &&\n\t\t\t\t<div class=\"dashIcon\">\n\t\t\t\t\t{options.icon}\n\t\t\t\t\t{options.noCompatibilityIcon && NotCompatibleIcon(... options.noCompatibilityIcon)}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t<div class=\"dashTitle\">{options.title}</div>\n\t\t\t{options.msg && <p class=\"dashMsg\">{options.msg}</p>}\n\t\t\t{options.innerLinkTitle && options.innerLinkHref && <a class=\"link\" href={options.innerLinkHref}>{options.innerLinkTitle}</a>}\n\t\t</div>\n\t)\n}\n\nfunction DashElementView(options: DashViewOptions): Vnode<any, any> {\n\tlet classString = \"dashEl\"\n\tif(options.floatingRight)\n\t\tclassString += \" floating right\"\n\telse if(options.floating)\n\t\tclassString += \" floating\"\n\t\n\tif(options.small)\n\t\tclassString += \" small\"\n\tif(options.highlight)\n\t\tclassString += \" highlight\"\n\tif(options.disabled)\n\t\tclassString += \" disabled\"\n\t\n\tlet view: Vnode<any, any>\n\tif(options.content)\n\t\tview = options.content\n\telse if(options.template)\n\t\tview = DashTemplateView(options.template)\n\telse\n\t\tview = <div class=\"highlight\">Missing Dash Information</div>\n\t\n\tif(options.href) {\n\t\treturn <a target={options.href.startsWith(\"http\") ? \"_blank\" : \"\"} class={`${classString} dashLink`} href={options.href}>{view}</a>\n\t}\n\telse if(options.onclick)\n\t\treturn <a class={`${classString} dashLink`} onclick={options.onclick}>{view}</a>\n\telse if(options.showAsClickable)\n\t\treturn <a class={`${classString} dashLink`}>{view}</a>\n\telse {\n\t\tview.attrs[\"className\"] = `${classString} ${view.attrs.hasOwnProperty(\"className\") ? view.attrs[\"className\"] : \"\"}`\n\t\treturn view\n\t}\n}\n\nfunction getNewClassString(size: DashContainerOptions, oldClassString: string): string {\n\tif(size)\n\t\toldClassString += \" \" + size\n\treturn oldClassString\n}\n\nexport function DashElement(\n\tsize: DashContainerOptions,\n\t... options: (DashViewOptions | false)[]\n): Vnode<any, any> {\n\tif(options.length == 1) {\n\t\tif(!options[0])\n\t\t\treturn <div></div>\n\t\t\n\t\tconst view =  DashElementView(options[0])\n\t\tview.attrs[\"className\"] = getNewClassString(size, view.attrs[\"className\"])\n\t\treturn view\n\t}\n\telse {\n\t\tconst classString = getNewClassString(size, \"multipleChildren\")\n\t\treturn <div class={classString}>\n\t\t\t{options.map((option) => option && DashElementView(option))}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\"\nexport function DashRow(... content: Array<Vnode<any, any> | undefined | false>): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"dashRow\">{content}</div>\n\t)\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport androidSvg from \"../../imgs/devices/android.svg?raw\"\nimport iosSvg from \"../../imgs/devices/ios.svg?raw\"\nimport webSvg from \"../../imgs/devices/web.svg?raw\"\nimport {closeDropdown, openDropdown} from \"./DropdownMenu\";\n\n\nexport type PossibleDevices = \"Android\" | \"iOS\" | \"Web\"\n\nconst imageRecord: Record<PossibleDevices, string> = {\n\tAndroid: androidSvg,\n\tiOS: iosSvg,\n\tWeb: webSvg\n}\n\nfunction onPointerEnter(title: string, e: MouseEvent) {\n\topenDropdown(\"notCompatible\", e.target as HTMLElement,\n\t\t() => <div class=\"smallText center\">{title}</div>\n\t)\n}\nfunction onPointerLeave() {\n\tcloseDropdown(\"notCompatible\")\n}\n\nexport function NotCompatibleIcon(... devices: PossibleDevices[]): Vnode<any, any> {\n\tconst translationRecord: Record<PossibleDevices, string> = {\n\t\tAndroid: Lang.get(\"Android\"),\n\t\tiOS: Lang.get(\"iOS\"),\n\t\tWeb: Lang.get(\"web_questionnaire\")\n\t}\n\tconst title = Lang.get(\"not_compatible_with\", devices.map((device) => translationRecord[device]).join(\", \"))\n\treturn <div class=\"notCompatibleIcon\" onpointerenter={onPointerEnter.bind(null, title)} onpointerleave={onPointerLeave.bind(null)}>\n\t\t{devices.map((device) =>\n\t\t\t<div class=\"deviceIcon\">{m.trust(imageRecord[device])}</div>)}\n\t</div>\n\n}\n","import m, {Vnode} from \"mithril\"\nimport {SearchWidget} from \"./SearchWidget\";\nimport {Lang} from \"../singletons/Lang\";\n\nexport interface SearchBoxEntry {\n\tkey: string\n\tview: Vnode<any, any>\n}\nexport function SearchBox(title: string, viewList: SearchBoxEntry[]): Vnode<any, any> {\n\treturn SearchWidget((tools) =>\n\t\t<div class=\"searchBox\">\n\t\t\t<h2>{title}</h2>\n\t\t\t<input placeholder={Lang.get(\"search\")} class=\"search small vertical\" type=\"text\" onkeyup={tools.updateSearchFromEvent.bind(tools)}/>\n\t\t\t<div class=\"scrollBox noBorder\">\n\t\t\t\t{viewList.map((entry) => tools.searchView(entry.key, entry.view))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import m, {Component, Vnode} from \"mithril\"\n\nexport interface SearchTools {\n\tsearchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null\n\tupdateSearchFromEvent(e: InputEvent): void\n\tupdateSearch(s: string): void\n}\ninterface SearchBarComponentOptions {\n\tcontent: (tools: SearchTools) => Vnode<any, any>\n\tclassName?: string //in case the parent has added a className that we need to include\n}\nclass SearchBarComponent implements SearchTools, Component<SearchBarComponentOptions, any> {\n\tprivate currentSearchValue: string = \"\"\n\t\n\tpublic updateSearch(s: string): void {\n\t\tthis.currentSearchValue = s\n\t}\n\tpublic updateSearchFromEvent(e: InputEvent): void {\n\t\tthis.updateSearch((e.target as HTMLInputElement).value)\n\t}\n\tpublic searchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null {\n\t\treturn key.search(this.currentSearchValue) != -1 ? content : null\n\t}\n\t\n\tpublic view(vNode: Vnode<SearchBarComponentOptions, any>): Vnode<any, any> {\n\t\tconst view = vNode.attrs.content(this)\n\t\tview.attrs.className = `${vNode.attrs.className ?? \"\"} ${view.attrs.className ?? \"\"}`\n\t\treturn view\n\t}\n}\n\nexport function SearchWidget(content: (tools: SearchTools) => Vnode<any, any>): Vnode<any, any> {\n\treturn m(SearchBarComponent, { content: content })\n}","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["section","rewardCodeData","codeResponse","currentCode","rewardCodes","sort","userIdsWithRewardCode","userIdsWithoutRewardCode","addObserver","this","checkCode","preLoad","loadJson","getStaticInt","getStrippedStudyListPromise","title","get","length","studyId","loader","faultyCode","internalId","questionnaireIndex","getStudyOrThrow","questionnaires","forEach","questionnaire","getTitle","namedQuestionnaireEntryCount","questionnaireDataSetCount","hasOwnProperty","push","count","namedQuestionnaireDataSetCount","selectRewardCode","code","set","getView","class","getWithColon","content","map","key","view","onclick","bind","type","value","Date","timestamp","toLocaleString","entry","userId","destroy","removeAllConnectedObservers","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","study","Error","getQuestionnaireOrNull","qId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","isLoggedIn","getUrl","depth","getHash","goTo","target","window","location","hash","newSection","OptimusPrimeTransformer","toAttribute","toObs","OptimusPrimeNumberTransformer","parseInt","onBeforeChange","obs","BooleanTransformer","DateTransformer","intValue","toString","toISOString","split","getTime","TimeTransformer","midnight","parts","date","setHours","setMinutes","BindObservable","transformer","attr","event","attrValue","e","element","DashElementView","options","classString","floatingRight","floating","small","highlight","disabled","template","icon","noCompatibilityIcon","msg","innerLinkTitle","innerLinkHref","href","DashTemplateView","startsWith","showAsClickable","attrs","getNewClassString","size","oldClassString","DashElement","option","DashRow","imageRecord","Android","iOS","Web","onPointerEnter","onPointerLeave","NotCompatibleIcon","translationRecord","Lang","devices","device","join","onpointerenter","onpointerleave","SearchBox","viewList","tools","placeholder","onkeyup","updateSearchFromEvent","searchView","currentSearchValue","updateSearch","s","search","vNode","className","SearchWidget","SearchBarComponent","TitleRow"],"sourceRoot":""}