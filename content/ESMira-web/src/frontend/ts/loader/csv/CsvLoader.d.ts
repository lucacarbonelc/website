import { LoaderState } from "../../site/LoaderState";
import { InputMediaTypes } from "../../data/study/Input";
import { CsvRow } from "./CsvRow";
import { CsvCellsWithMeta } from "./CsvCell";
import { ValueListInfo } from "./ValueListInfo";
import { AxisContainer } from "../../data/study/AxisContainer";
import { StatisticsCollection } from "../../data/statistics/StatisticsCollection";
import { ChartData } from "../../data/study/ChartData";
import { LoadedStatistics } from "./CsvLoaderCollectionFromCharts";
export declare class CsvLoader {
    static fromUrl(loader: LoaderState, url: string, specialColumns?: Record<InputMediaTypes, string[]>): Promise<CsvLoader>;
    static fromCsv(loader: LoaderState, csv: string[][], specialColumns?: Record<InputMediaTypes, string[]>): Promise<CsvLoader>;
    private readonly timeSpanColumnList;
    private readonly resolveQueue;
    private queueCount;
    private promiseChain;
    private readonly csvWorker;
    private readonly loader;
    headerNames: string[];
    visibleRowsCount: number;
    private constructor();
    private onWorkerMessage;
    private addPromise;
    private load;
    private loadUrl;
    private loadCsv;
    waitUntilReady(): Promise<any>;
    reset(): Promise<any>;
    close(): void;
    hasColumn(column: string): boolean;
    getColumnNum(column: string): number;
    getVisibleRows(from: number, to: number): Promise<CsvRow[]>;
    getVisibleCount(columnName: string, value: string): Promise<number>;
    getValueListInfo(columnName: string, sortByAmount?: boolean, includeHiddenValues?: boolean): Promise<ValueListInfo[]>;
    getValueCellList(columnName: string): Promise<Record<string, CsvCellsWithMeta>>;
    getStatistics(axisContainerArray: AxisContainer[], dataType: number): Promise<StatisticsCollection>;
    getPersonalStatisticsFromChart(chart: ChartData): Promise<LoadedStatistics>;
    getValueCount(columnName: string, values: string[]): Promise<Record<string, number>>;
    filterByValue(enable: boolean, column: string | number, value: string): Promise<void>;
    filterEntireColumn(enable: boolean, column: string | number): Promise<void>;
    filterRowsByResponseTime(enable: boolean, newestTimestamp: number): Promise<void>;
    mark(enable: boolean, rowPos: number): Promise<void>;
    isTimestampColumn(columnValue: string): boolean;
}
