import { ObservableStructure, ObservableStructureDataType } from "../../observable/ObservableStructure";
import { ActionTrigger } from "./ActionTrigger";
import { Page } from "./Page";
import { SumScore } from "./SumScore";
import { BaseObservable } from "../../observable/BaseObservable";
import { ObservableTypes } from "../../observable/types/ObservableTypes";
import "../../number.extensions";
export declare class Questionnaire extends ObservableStructure {
    internalId: BaseObservable<number>;
    publishedAndroid: BaseObservable<boolean>;
    publishedIOS: BaseObservable<boolean>;
    publishedWeb: BaseObservable<boolean>;
    durationStart: BaseObservable<number>;
    durationEnd: BaseObservable<number>;
    durationPeriodDays: BaseObservable<number>;
    durationStartingAfterDays: BaseObservable<number>;
    completableOnce: BaseObservable<boolean>;
    completableOncePerNotification: BaseObservable<boolean>;
    completableMinutesAfterNotification: BaseObservable<number>;
    limitCompletionFrequency: BaseObservable<boolean>;
    completionFrequencyMinutes: BaseObservable<number>;
    completableAtSpecificTime: BaseObservable<boolean>;
    completableAtSpecificTimeStart: BaseObservable<number>;
    completableAtSpecificTimeEnd: BaseObservable<number>;
    limitToGroup: BaseObservable<number>;
    minDataSetsForReward: BaseObservable<number>;
    isBackEnabled: BaseObservable<boolean>;
    endScriptBlock: BaseObservable<string>;
    showInDisabledList: BaseObservable<boolean>;
    virtualInputs: import("../../observable/ObservableArray").ObservableArray<string, BaseObservable<string>>;
    title: BaseObservable<string>;
    actionTriggers: import("../../observable/TranslatableArray").TranslatableArray<ObservableStructureDataType, ActionTrigger>;
    pages: import("../../observable/TranslatableArray").TranslatableArray<ObservableStructureDataType, Page>;
    sumScores: import("../../observable/TranslatableArray").TranslatableArray<ObservableStructureDataType, SumScore>;
    constructor(data: ObservableStructureDataType, parent: BaseObservable<ObservableTypes> | null);
    updateKeyName(_keyName: string, parent?: BaseObservable<ObservableTypes>): void;
    getTitle(): string;
    hasSchedules(): boolean;
    isActive(joinedTimestamp: number, now: number): boolean;
    willBeActiveIn(joinedTimestamp: number, now: number): number;
}
