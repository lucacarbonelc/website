import { ObservableStructure, ObservableStructureDataType } from "../../observable/ObservableStructure";
import { Statistics } from "./Statistics";
import { Questionnaire } from "./Questionnaire";
import { ObservableTypes } from "../../observable/types/ObservableTypes";
import { EventUploadSettings } from "./EventUploadSettings";
import { BaseObservable } from "../../observable/BaseObservable";
import { TranslationRootInterface } from "../../observable/interfaces/TranslationRootInterface";
import { Input, InputMediaTypes } from "./Input";
import { RepairStudy } from "../../helpers/RepairStudy";
export declare class Study extends ObservableStructure implements TranslationRootInterface {
    lastChanged: number;
    id: BaseObservable<number>;
    version: BaseObservable<number>;
    subVersion: BaseObservable<number>;
    packageVersion: BaseObservable<string>;
    serverVersion: BaseObservable<number>;
    lang: BaseObservable<string>;
    newChanges: BaseObservable<boolean>;
    published: BaseObservable<boolean>;
    publishedWeb: BaseObservable<boolean>;
    publishedAndroid: BaseObservable<boolean>;
    publishedIOS: BaseObservable<boolean>;
    sendMessagesAllowed: BaseObservable<boolean>;
    randomGroups: BaseObservable<number>;
    enableRewardSystem: BaseObservable<boolean>;
    rewardVisibleAfterDays: BaseObservable<number>;
    defaultLang: BaseObservable<string>;
    accessKeys: import("../../observable/ObservableArray").ObservableArray<string, BaseObservable<string>>;
    langCodes: import("../../observable/ObservableArray").ObservableArray<string, BaseObservable<string>>;
    title: BaseObservable<string>;
    studyDescription: BaseObservable<string>;
    studyTag: BaseObservable<string>;
    informedConsentForm: BaseObservable<string>;
    postInstallInstructions: BaseObservable<string>;
    chooseUsernameInstructions: BaseObservable<string>;
    webQuestionnaireCompletedInstructions: BaseObservable<string>;
    webInstallInstructions: BaseObservable<string>;
    contactEmail: BaseObservable<string>;
    rewardEmailContent: BaseObservable<string>;
    rewardInstructions: BaseObservable<string>;
    questionnaires: import("../../observable/TranslatableArray").TranslatableArray<ObservableStructureDataType, Questionnaire>;
    eventUploadSettings: EventUploadSettings;
    publicStatistics: Statistics;
    personalStatistics: Statistics;
    constructor(data: ObservableStructureDataType, parent: BaseObservable<ObservableTypes> | null, lastChanged: number, repair: RepairStudy | null);
    updateKeyName(_keyName: string, parent?: BaseObservable<ObservableTypes>): void;
    forEachInput(callback: (input: Input, index: number) => void | boolean): void;
    hasMedia(): boolean;
    getInputNamesPerType(): Record<InputMediaTypes, string[]>;
}
