{"version":3,"file":"9386.53417cc439c4ded25608.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/studyOverview.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {FILE_SAVE_ACCESS} from \"../constants/urls\";\nimport {Requests} from \"../singletons/Requests\";\nimport {StudiesDataType} from \"../loader/StudyLoader\";\n\nexport class Content extends SectionContent {\n\tprivate readonly isRedirected: boolean = false\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tsection.siteData.studyLoader.loadAvailableStudies(section.getDynamic(\"accessKey\", \"\").get())\n\t\t]\n\t}\n\tconstructor(section: Section, studies: StudiesDataType) {\n\t\tsuper(section)\n\t\tconst count = studies.getCount()\n\t\t\n\t\tlet study\n\t\tif(count == 0)\n\t\t\tthrow new Error(`Could not find study`)\n\t\telse if(count == 1) {\n\t\t\tstudy = studies.getFirst()\n\t\t\tif(study)\n\t\t\t\tthis.section.setStatic(\"id\", study.id.get())\n\t\t}\n\t\telse\n\t\t\tstudy = this.getStudyOrNull()\n\t\t\n\t\t\n\t\tif(!study) {\n\t\t\tthis.newSection(\"studies:studyOverview\", this.section.depth - 1)\n\t\t\tthis.isRedirected = true\n\t\t\treturn\n\t\t}\n\t\telse if(!study.publishedWeb.get()) {\n\t\t\tthis.newSection(\"appInstall\", this.section.depth - 1)\n\t\t\tthis.isRedirected = true\n\t\t\treturn\n\t\t}\n\t\t\n\t\tRequests.loadJson(FILE_SAVE_ACCESS, \"post\", `study_id=${study.id.get()}&page_name=${this.section.depth ? \"study\" : \"navigatedFromHome\"}`)\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"study_description\")\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tif(this.isRedirected)\n\t\t\treturn <div></div>\n\t\t\n\t\tconst study = this.getStudyOrThrow()\n\t\treturn <div>\n\t\t\t{study.studyDescription.get() &&\n\t\t\t\t<div class=\"scrollBox spacingBottom\">{m.trust(study.studyDescription.get())}</div>\n\t\t\t}\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"questionnaires\"))}\n\t\t\t{study.questionnaires.get().map((questionnaire) =>\n\t\t\t\tquestionnaire.isActive(Date.now(), Date.now()) &&\n\t\t\t\t\t<a class=\"vertical verticalPadding\" href={this.getUrl(`attend,qId:${questionnaire.internalId.get()}`)}>{questionnaire.getTitle()}</a>\n\t\t\t)}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["section","studies","isRedirected","study","count","getCount","Error","getFirst","setStatic","id","get","getStudyOrNull","publishedWeb","loadJson","depth","newSection","preLoad","siteData","studyLoader","loadAvailableStudies","getDynamic","title","getView","this","getStudyOrThrow","studyDescription","class","getWithColon","questionnaires","map","questionnaire","isActive","Date","now","href","getUrl","internalId","getTitle","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","key","defaultValue","setDynamic","newValue","dynamicValues","setChild","getStaticInt","getStaticString","getStudies","getEntry","getQuestionnaireOrNull","qId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","getHash","goTo","target","window","location","hash","destroy","TitleRow","attrs"],"sourceRoot":""}