{"version":3,"file":"6429.509ebf7bd6956271b40e.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/helpers/SharedUrlAlternatives.ts","webpack://ESMira/./src/frontend/ts/pages/dataStatistics.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashElement.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashRow.tsx","webpack://ESMira/./src/frontend/ts/widgets/NotCompatibleIcon.tsx"],"sourcesContent":["import {SectionAlternative, SectionContent} from \"../site/SectionContent\";\nimport {Lang} from \"../singletons/Lang\";\n\nexport class SharedUrlAlternatives {\n\tpublic static studyAlternatives(sectionContent: SectionContent, indexName: \"edit\" | \"msgs\" | \"data\"): SectionAlternative[] {\n\t\tconst study = sectionContent.getStudyOrThrow()\n\t\tconst studyId = study.id.get()\n\t\tconst depth = sectionContent.section.depth - 1\n\t\treturn [\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"edit_study\"),\n\t\t\t\ttarget: indexName != \"edit\" &&\n\t\t\t\t\tsectionContent\n\t\t\t\t\t\t.getUrl(`studyEdit,id:${studyId}`, depth)\n\t\t\t\t\t\t.replace(`allStudies:${indexName}`, \"allStudies:edit\")\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"messages\"),\n\t\t\t\ttarget: indexName != \"msgs\" &&\n\t\t\t\t\tsectionContent\n\t\t\t\t\t\t.getUrl(`messagesOverview,id:${studyId}`, depth)\n\t\t\t\t\t\t.replace(`allStudies:${indexName}`, \"allStudies:msgs\")\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"data\"),\n\t\t\t\ttarget: indexName != \"data\" &&\n\t\t\t\t\tsectionContent\n\t\t\t\t\t\t.getUrl(`dataStatistics,id:${studyId}`, depth)\n\t\t\t\t\t\t.replace(`allStudies:${indexName}`, \"allStudies:data\")\n\t\t\t}\n\t\t]\n\t}\n}","import {SectionAlternative, SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {DashRow} from \"../widgets/DashRow\";\nimport {DashElement} from \"../widgets/DashElement\";\nimport {Lang} from \"../singletons/Lang\";\nimport dataTableSvg from \"../../imgs/icons/table.svg?raw\"\nimport calculateSvg from \"../../imgs/dashIcons/calculate.svg?raw\"\nimport summarySvg from \"../../imgs/dashIcons/summary.svg?raw\"\nimport participantsSvg from \"../../imgs/icons/participants.svg?raw\"\nimport webAccessSvg from \"../../imgs/devices/web.svg?raw\"\nimport publicStatisticsSvg from \"../../imgs/dashIcons/publicStatistics.svg?raw\"\nimport rewardsSvg from \"../../imgs/dashIcons/rewards.svg?raw\"\nimport merlinLogsSvg from \"../../imgs/dashIcons/merlinLogs.svg?raw\"\nimport {Section} from \"../site/Section\";\nimport {SharedUrlAlternatives} from \"../helpers/SharedUrlAlternatives\";\n\nexport class Content extends SectionContent {\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [section.getStudyPromise()]\n\t}\n\tpublic title(): string {\n\t\treturn Lang.get(\"data\")\n\t}\n\t\n\tpublic hasAlternatives(): boolean {\n\t\treturn true\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | null {\n\t\treturn SharedUrlAlternatives.studyAlternatives(this, \"data\")\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst hasNewMerlinLogs = this.getTools().merlinLogsLoader.studiesWithNewMerlinLogsList[this.section.getStaticInt(\"id\") || 0] || false\n\t\treturn <div>\n\t\t\t<span class=\"stretched smallText\">{Lang.get(\"info_charts_loadingTime\")}</span>\n\t\t\t{DashRow(\n\t\t\t\tDashElement(null, {\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\ttitle: Lang.get(\"data_table\"),\n\t\t\t\t\t\ticon: m.trust(dataTableSvg)\n\t\t\t\t\t},\n\t\t\t\t\thref: this.getUrl(\"dataList\")\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\ttitle: Lang.get(\"calculate_chart_from_data\"),\n\t\t\t\t\t\ticon: m.trust(calculateSvg)\n\t\t\t\t\t},\n\t\t\t\t\thref: this.getUrl(\"chartEdit:calc\")\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\ttitle: Lang.get(\"summary\"),\n\t\t\t\t\t\ticon: m.trust(summarySvg)\n\t\t\t\t\t},\n\t\t\t\t\thref: this.getUrl(\"statsStudy\")\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\ttitle: Lang.get(\"participants\"),\n\t\t\t\t\t\ticon: m.trust(participantsSvg)\n\t\t\t\t\t},\n\t\t\t\t\thref: this.getUrl(\"statsParticipants\")\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\ttitle: Lang.get(\"web_access\"),\n\t\t\t\t\t\ticon: m.trust(webAccessSvg)\n\t\t\t\t\t},\n\t\t\t\t\thref: this.getUrl(\"statsWeb\")\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\ttitle: Lang.get(\"public_statistics\"),\n\t\t\t\t\t\ticon: m.trust(publicStatisticsSvg)\n\t\t\t\t\t},\n\t\t\t\t\thref: this.getUrl(\"publicStatistics\")\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\thighlight: hasNewMerlinLogs,\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\ttitle: Lang.get(\"merlin_logs\"),\n\t\t\t\t\t\ticon: m.trust(merlinLogsSvg)\n\t\t\t\t\t},\n\t\t\t\t\thref: this.getUrl(\"merlinLogList\")\n\t\t\t\t}),\n\t\t\t\tDashElement(null, {\n\t\t\t\t\ttemplate: {\n\t\t\t\t\t\ttitle: Lang.get(\"validate_reward_code\"),\n\t\t\t\t\t\ticon: m.trust(rewardsSvg)\n\t\t\t\t\t},\n\t\t\t\t\thref: this.getUrl(\"rewardCodes\")\n\t\t\t\t})\n\t\t\t\t)\n\t\t\t}</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {NotCompatibleIcon, PossibleDevices} from \"./NotCompatibleIcon\";\n\ntype DashTemplateOptions = {\n\ttitle: string\n\ticon?: Vnode<any, any>\n\tnoCompatibilityIcon?: PossibleDevices[]\n\tmsg?: string | Vnode<any, any>\n\tinnerLinkTitle?: string\n\tinnerLinkHref?: string\n}\n\ntype DashContainerOptions = \"stretched\" | \"cramped\" | \"vertical\" | \"horizontal\" | null\nexport type DashViewOptions = {\n\tdisabled?: boolean\n\tonclick?: (e: MouseEvent) => void\n\thref?: string\n\tshowAsClickable?: boolean\n\tfloating?: boolean\n\tfloatingRight?: boolean\n\thighlight?: boolean\n\tsmall?: boolean\n\ttemplate?: DashTemplateOptions\n\tcontent?: Vnode<any, any>\n}\n\nfunction DashTemplateView(options: DashTemplateOptions): Vnode<any, any> {\n\treturn (\n\t\t<div>\n\t\t\t{(options.icon || options.noCompatibilityIcon) &&\n\t\t\t\t<div class=\"dashIcon\">\n\t\t\t\t\t{options.icon}\n\t\t\t\t\t{options.noCompatibilityIcon && NotCompatibleIcon(... options.noCompatibilityIcon)}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t<div class=\"dashTitle\">{options.title}</div>\n\t\t\t{options.msg && <p class=\"dashMsg\">{options.msg}</p>}\n\t\t\t{options.innerLinkTitle && options.innerLinkHref && <a class=\"link\" href={options.innerLinkHref}>{options.innerLinkTitle}</a>}\n\t\t</div>\n\t)\n}\n\nfunction DashElementView(options: DashViewOptions): Vnode<any, any> {\n\tlet classString = \"dashEl\"\n\tif(options.floatingRight)\n\t\tclassString += \" floating right\"\n\telse if(options.floating)\n\t\tclassString += \" floating\"\n\t\n\tif(options.small)\n\t\tclassString += \" small\"\n\tif(options.highlight)\n\t\tclassString += \" highlight\"\n\tif(options.disabled)\n\t\tclassString += \" disabled\"\n\t\n\tlet view: Vnode<any, any>\n\tif(options.content)\n\t\tview = options.content\n\telse if(options.template)\n\t\tview = DashTemplateView(options.template)\n\telse\n\t\tview = <div class=\"highlight\">Missing Dash Information</div>\n\t\n\tif(options.href) {\n\t\treturn <a target={options.href.startsWith(\"http\") ? \"_blank\" : \"\"} class={`${classString} dashLink`} href={options.href}>{view}</a>\n\t}\n\telse if(options.onclick)\n\t\treturn <a class={`${classString} dashLink`} onclick={options.onclick}>{view}</a>\n\telse if(options.showAsClickable)\n\t\treturn <a class={`${classString} dashLink`}>{view}</a>\n\telse {\n\t\tview.attrs[\"className\"] = `${classString} ${view.attrs.hasOwnProperty(\"className\") ? view.attrs[\"className\"] : \"\"}`\n\t\treturn view\n\t}\n}\n\nfunction getNewClassString(size: DashContainerOptions, oldClassString: string): string {\n\tif(size)\n\t\toldClassString += \" \" + size\n\treturn oldClassString\n}\n\nexport function DashElement(\n\tsize: DashContainerOptions,\n\t... options: (DashViewOptions | false)[]\n): Vnode<any, any> {\n\tif(options.length == 1) {\n\t\tif(!options[0])\n\t\t\treturn <div></div>\n\t\t\n\t\tconst view =  DashElementView(options[0])\n\t\tview.attrs[\"className\"] = getNewClassString(size, view.attrs[\"className\"])\n\t\treturn view\n\t}\n\telse {\n\t\tconst classString = getNewClassString(size, \"multipleChildren\")\n\t\treturn <div class={classString}>\n\t\t\t{options.map((option) => option && DashElementView(option))}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\"\nexport function DashRow(... content: Array<Vnode<any, any> | undefined | false>): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"dashRow\">{content}</div>\n\t)\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport androidSvg from \"../../imgs/devices/android.svg?raw\"\nimport iosSvg from \"../../imgs/devices/ios.svg?raw\"\nimport webSvg from \"../../imgs/devices/web.svg?raw\"\nimport {closeDropdown, openDropdown} from \"./DropdownMenu\";\n\n\nexport type PossibleDevices = \"Android\" | \"iOS\" | \"Web\"\n\nconst imageRecord: Record<PossibleDevices, string> = {\n\tAndroid: androidSvg,\n\tiOS: iosSvg,\n\tWeb: webSvg\n}\n\nfunction onPointerEnter(title: string, e: MouseEvent) {\n\topenDropdown(\"notCompatible\", e.target as HTMLElement,\n\t\t() => <div class=\"smallText center\">{title}</div>\n\t)\n}\nfunction onPointerLeave() {\n\tcloseDropdown(\"notCompatible\")\n}\n\nexport function NotCompatibleIcon(... devices: PossibleDevices[]): Vnode<any, any> {\n\tconst translationRecord: Record<PossibleDevices, string> = {\n\t\tAndroid: Lang.get(\"Android\"),\n\t\tiOS: Lang.get(\"iOS\"),\n\t\tWeb: Lang.get(\"web_questionnaire\")\n\t}\n\tconst title = Lang.get(\"not_compatible_with\", devices.map((device) => translationRecord[device]).join(\", \"))\n\treturn <div class=\"notCompatibleIcon\" onpointerenter={onPointerEnter.bind(null, title)} onpointerleave={onPointerLeave.bind(null)}>\n\t\t{devices.map((device) =>\n\t\t\t<div class=\"deviceIcon\">{m.trust(imageRecord[device])}</div>)}\n\t</div>\n\n}\n"],"names":["studyAlternatives","sectionContent","indexName","studyId","getStudyOrThrow","id","get","depth","section","title","target","getUrl","replace","preLoad","getStudyPromise","Lang","hasAlternatives","getAlternatives","SharedUrlAlternatives","this","getView","hasNewMerlinLogs","getTools","merlinLogsLoader","studiesWithNewMerlinLogsList","getStaticInt","class","DashRow","DashElement","template","icon","href","highlight","SectionContent","_section","preInit","Promise","resolve","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticString","getStudyOrNull","studies","studyLoader","getStudies","getCount","getFirst","getEntry","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getAdmin","hasPermission","name","isLoggedIn","getHash","goTo","window","location","hash","newSection","destroy","DashElementView","options","view","classString","floatingRight","floating","small","disabled","content","noCompatibilityIcon","msg","innerLinkTitle","innerLinkHref","DashTemplateView","startsWith","onclick","showAsClickable","attrs","hasOwnProperty","getNewClassString","size","oldClassString","length","map","option","imageRecord","Android","iOS","Web","onPointerEnter","e","onPointerLeave","NotCompatibleIcon","translationRecord","devices","device","join","onpointerenter","bind","onpointerleave"],"sourceRoot":""}