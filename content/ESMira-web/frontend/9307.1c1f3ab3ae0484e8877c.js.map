{"version":3,"file":"9307.1c1f3ab3ae0484e8877c.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/login.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\n\nexport class Content extends SectionContent {\n\tpublic title(): string {\n\t\treturn Lang.get(\"home\")\n\t}\n\t\n\tprivate async formLogin(e: SubmitEvent): Promise<void> {\n\t\te.preventDefault()\n\t\tconst formData = new FormData(e.target as HTMLFormElement)\n\t\tconst success = await this.section.loader.showLoader(\n\t\t\tthis.getAdmin().login(\n\t\t\t\tformData.get(\"accountName\")?.toString() || \"\",\n\t\t\t\tformData.get(\"password\")?.toString() || \"\",\n\t\t\t\t!!formData.get(\"rememberMe\")\n\t\t\t)\n\t\t)\n\t\tif(!success)\n\t\t\tthis.section.loader.info(Lang.get(\"error_wrong_login\"));\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst username = this.getStaticString(\"username\") ?? \"\"\n\t\tconst password = this.getStaticString(\"password\") ?? \"\"\n\t\t\n\t\treturn (\n\t\t\t<div class=\"login centerChildrenVertically listParent spacingLeft spacingRight\">\n\t\t\t\t<form method=\"post\" action=\"\" onsubmit={this.formLogin.bind(this)}>\n\t\t\t\t\t<label class=\"horizontal noDesc\">\n\t\t\t\t\t\t<small>{Lang.get(\"username\")}</small>\n\t\t\t\t\t\t<input type=\"text\" name=\"accountName\" autocomplete=\"username\" value={username}/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label class=\"horizontal noDesc\">\n\t\t\t\t\t\t<small>{Lang.get(\"password\")}</small>\n\t\t\t\t\t\t<input type=\"password\" name=\"password\" autocomplete=\"current-password\" value={password}/>\n\t\t\t\t\t</label>\n\t\t\t\t\t\n\t\t\t\t\t<br/>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<label class=\"left horizontal noTitle noDesc\">\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"rememberMe\"/>\n\t\t\t\t\t\t<span>{Lang.get(\"remember_me\")}</span>\n\t\t\t\t\t</label>\n\t\t\t\t\t\n\t\t\t\t\t<input class=\"right horizontal\" type=\"submit\" value={Lang.get(\"login\")}/>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}"],"names":["title","get","formLogin","e","preventDefault","formData","FormData","target","this","section","loader","showLoader","getAdmin","login","toString","info","getView","username","getStaticString","password","class","method","action","onsubmit","bind","type","name","autocomplete","value","preLoad","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticInt","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","hasPermission","studyId","isLoggedIn","getUrl","depth","getHash","goTo","window","location","hash","newSection","destroy"],"sourceRoot":""}