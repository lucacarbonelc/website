{"version":3,"file":"7130.4a1251df214313188486.js","mappings":"+/CAsBA,aAaC,WAAYA,EAA0BC,GAVrB,KAAAC,mBAA6C,CAAC,EAE9C,KAAAC,mBAA2C,CAAC,EAE5C,KAAAC,WAAwC,CAAC,EAGlD,KAAAC,OAAsB,GACtB,KAAAC,uBAAiC,EAGxCC,KAAKP,YAAcA,EACnBO,KAAKN,MAAQA,EACbM,KAAKC,YAAc,KAAeC,QAAQ,KAAMR,EAAMS,GAAGC,MAAMC,WAChE,CAgGD,OA1Fc,YAAAC,sBAAb,SAAmCR,G,iHAGlC,IAFAE,KAAKF,OAASA,EACRS,EAAiBP,KAAKN,MAAMa,eAAeH,M,WACzCI,GACP,IAAMC,EAAgBF,EAAeC,GACnB,IAAgBE,0BAA0BD,GAClDE,SAAQ,SAACC,GAClB,EAAKjB,mBAAmBiB,GAAYJ,CACrC,G,EALOA,EAAED,EAAeM,OAAO,EAAGL,GAAG,IAAKA,E,EAAnCA,G,IAQW,EAAAR,KAAKF,O,wBAAL,YAATgB,EAAK,KACd,GAAMd,KAAKe,UAAUD,EAAME,cAAcZ,SADZ,M,cAC7B,SACGU,EAAMG,sBAAsBb,MAC9B,GAAMJ,KAAKe,UAAUD,EAAMI,gBAAgBd,QADzC,M,OACF,S,wBAHiB,I,+BAMN,YAAAW,UAAd,SAAwBI,G,4GACI,EAAAA,E,wBAAA,YAAjBH,EAAa,KAChBI,EAAQJ,EAAcI,MACtBC,EAAQL,EAAcK,MAE5B,GAAMrB,KAAKsB,UAAUF,EAAMG,aAAanB,SAJI,M,OAK5C,OADA,SACA,GAAMJ,KAAKsB,UAAUD,EAAME,aAAanB,Q,OAAxC,S,wBAL0B,I,+BAQd,YAAAkB,UAAd,SAAwBC,G,sGACvB,OAAIA,GAEEC,EAAiBxB,KAAKL,mBAAmB4B,GAC3CvB,KAAKH,WAAW2B,GAAjB,OACIC,EAAMzB,KAAKC,YAAYC,QAAQ,KAAMF,KAAKN,MAAMa,eAAeH,MAAMoB,GAAgBE,WAAWtB,MAAMC,YAC5G,EAAAL,KAAKH,WAAW,EAAA2B,EAAkB,GAAM,IAAUG,QAAQ3B,KAAKP,YAAagC,MAJ5E,I,OAIA,KAAkC,S,mCAK5B,YAAAG,kBAAR,SAA0BC,G,eACfN,GACT,IAAMO,EAAcD,EAAcN,GAElC,GAAI,EAAK3B,mBAAmBmC,eAAeR,GAEtC,CACJ,IAAM,EAAkB,EAAK3B,mBAAmB2B,GAChDO,EAAYnB,SAAQ,SAACqB,EAAUC,GAC1B,EAAgBA,IAAiC,GAAvBD,EAASE,aACtC,EAAgBD,GAASD,EAC3B,G,MANA,EAAKpC,mBAAmB2B,GAAgBO,C,SAJ1C,IAAI,IAAMP,KAAgBM,E,EAAhBN,EAaX,EACc,YAAAY,cAAd,SAA4BC,G,0GACR,EAAApC,KAAKF,O,wBAAL,YAATgB,EAAK,KACQ,GAAMsB,EAAUC,cACrCvB,EAAME,cAAcZ,MACpBU,EAAMwB,SAASlC,SAHa,M,OACvByB,EAAgB,SAItB7B,KAAK4B,kBAAkBC,GACpBf,EAAMG,sBAAsBb,QAC9BJ,KAAKD,uBAAwB,G,wBAPZ,I,+BAWP,YAAAwC,wBAAb,SAAqCC,EAAmBC,G,YAAA,IAAAA,IAAAA,GAAA,G,oHACxCzC,KAAKH,W,0EAEbuC,EAAYpC,KAAKH,WAAWW,GAC/BgC,EACF,GAAMJ,EAAUM,oBAAmB,EAAO,WADxC,O,mBAEF,OADA,SACA,GAAMN,EAAUO,eAAc,EAAM,SAAUH,I,OAA9C,S,iBAED,SAAMxC,KAAKmC,cAAcC,I,OAAzB,S,gDAGEpC,KAAKD,uBAA0B0C,EAA/B,OACEzC,KAAK4C,iBAAN,OACIC,EAAa7C,KAAKN,MAAMmD,WAAWzC,MACnC0C,EAAYD,EAAWhC,OAASgC,EAAW,GAAGzC,MAAQ,GAC5D,EAAAJ,KAAwB,GAAM,IAAS+C,SAAS,KAAgB7C,QAAQ,KAAMF,KAAKN,MAAMS,GAAGC,MAAMC,YAAYH,QAAQ,KAAM4C,M,OAA5H,EAAKF,iBAAmB,S,iBAGzB,MAAO,CAAP,EAAO,CACNI,eAAgBhD,KAAKJ,mBACrBqD,qBAAsBjD,KAAK4C,mB,QAI5B,MAAO,CAAP,EAAO,CAACI,eAAgBhD,KAAKJ,qB,QAEhC,EAjHA,E,qfCfA,cAGC,WAAYsD,EAAmBC,EAAgDC,GAA/E,MACC,YAAMD,EAAQC,IAAI,K,OAClB,EAAKC,QAAUD,EACf,EAAKE,aAAeJ,E,CACrB,CAyBD,OAhC0C,OASlC,YAAAK,kBAAP,SAAyBC,QAAA,IAAAA,IAAAA,GAAA,EAEzB,EAEO,YAAAC,WAAP,WACO,MAAO,EACX,EAEI,YAAAC,YAAP,WACC,OAAO,CACR,EAEO,YAAAtD,IAAP,WACC,OAAOJ,KAAKsD,YACb,EACO,YAAAK,IAAP,SAAWT,EAAmBU,QAAA,IAAAA,IAAAA,GAAA,GAC7B5D,KAAKsD,aAAeJ,EAChBU,GACH5D,KAAK6D,YAAW,GAAM,EACxB,EACO,YAAAC,SAAP,SAAgBZ,EAAUU,QAAA,IAAAA,IAAAA,GAAA,GACzB5D,KAAK2D,IAAII,QAAQC,QAAQd,GAAQU,EAClC,EACD,EAhCA,CAA0C,I,wkBCQ1C,cAyBC,WAAYK,EAAkBC,GAA9B,MACC,YAAMD,IAAQ,KAEd,KAAIC,GAAsBA,EAAiBC,0BAA0B,EAAAC,yBACpE,MAAM,IAAIC,MAAM,6C,OAEjB,EAAKH,iBAAmBA,EAAiBC,eACzC,EAAKG,cAAiD,QAAjCJ,EAAiBK,aACtC,EAAKC,oBAAsB,IAAI,IAA8BP,EAAQQ,OAAQ,EAAKC,mBAClF,EAAKC,QAAU,IAAI,IAAoC,EAAKC,iBAAkB,KAAM,gBAEpF,EAAKC,gBAAkB,EAAKX,iBAAiBY,WAAWC,aAAY,WACnE,EAAKJ,QAAQhB,IAAI,EAAKiB,iBACvB,I,CACD,CA4FD,OAnI6B,OAOd,EAAAI,QAAd,SAAsBf,GAGrB,IAFA,IAAIC,OAAwCe,EACtCC,EAAWjB,EAAQkB,YACjB3E,EAAEyD,EAAQmB,MAAM,EAAG5E,EAAE,IAAKA,EAAG,CACpC,IAAM6E,EAAiBH,EAAS1E,GAChC,GAAiC,aAA9B6E,EAAeC,YAA4B,CAC7CpB,EAAmBmB,EACnB,K,EAGF,IAAInB,EACH,MAAM,IAAIG,MAAM,6CAEjB,MAAO,CACNH,EAAiBqB,YACjBtB,EAAQuB,kBAEV,EAiBO,YAAAC,MAAP,WACC,OAAO,IAAKrF,IAAIJ,KAAKsE,cAAgB,UAAY,YAClD,EACO,YAAAoB,WAAP,sBACC,OAAO,SAAU,WAAM,SAAKf,QAAQhB,IAAI,EAAKiB,iBAAtB,GAAyC,IAAKxE,IAAI,UAC1E,EAEc,YAAAwE,eAAd,W,+pCACI5E,KAAKsE,eACDxD,EAAQd,KAAKkE,iBAAiBY,WAClB,GAAM,IAAUa,QAAQ3F,KAAKiE,QAAQQ,OAAQzE,KAAK4F,qBAFlE,M,OAKe,OAHXxD,EAAY,S,KAGD,GAAMA,EAAUC,cAAcvB,EAAME,cAAcZ,MAAOU,EAAMwB,SAASlC,Q,OAClE,OADtB,EAAA4C,eAAgB,SACM,GAAMZ,EAAUC,cAAcvB,EAAMI,gBAAgBd,MAAOU,EAAMwB,SAASlC,Q,OAFjG,MAAO,CAAP,GAEC,EAAA6C,qBAAsB,S,WAIvB,SAAMjD,KAAKwE,oBAAoBlE,sBAAsB,CAACN,KAAKkE,iBAAiBY,c,OAC5E,OADA,SACO,CAAP,EAAO9E,KAAKwE,oBAAoBjC,2B,qSAI1B,YAAAsD,gBAAR,SAAwBC,EAAmBC,QAAA,IAAAA,IAAAA,EAAA,IAC1C,IAAI,IAAIvF,EAAI,EAAGA,EAAIuF,IAAUvF,EACzBsF,EAAMjF,QAAUL,GAClBsF,EAAME,KAAK,IACZF,EAAMtF,GAAGwF,KAAKhG,KAAKiG,aAAa,EAAG,IAAI5F,WAEzC,EAEQ,YAAA6F,iBAAR,SAAyBJ,GAKxB,IAJA,IAAMK,EAAY,CAAC,WAAY,gBACzBJ,EAASD,EAAMjF,OAAS,EAC1BuF,EAAmB,aAED,MAAAD,EAAA,eAAW,CAA7B,IAAMvF,EAAQ,KACjBkF,EAAM,GAAGE,KAAKpF,E,CAGf,IAAI,IAAIJ,EAAI,EAAGA,EAAIuF,IAAUvF,EAAG,CAC/B,IAAuB,UAAA2F,EAAA,eACtBL,EAAMtF,GAAGwF,KAAKI,EAAiB/F,YAEhC+F,GAAoBpG,KAAKiG,aAAa,EAAGI,M,CAE3C,EAEQ,YAAAC,kBAAR,SAA0BtF,EAA8B8E,GACvD,IAAMS,EAAYvF,EAAcI,MAAMG,aAAanB,MAChDmG,IACFT,EAAM,GAAGE,KAAKO,GACdvG,KAAK6F,gBAAgBC,IAGtB,IAAMU,EAAYxF,EAAcK,MAAME,aAAanB,MAChDoG,IACFV,EAAM,GAAGE,KAAKQ,GACdxG,KAAK6F,gBAAgBC,GAEvB,EAEQ,YAAAF,gBAAR,WAIC,IAHA,IAAM9E,EAAQd,KAAKkE,iBAAiBY,WAC9BgB,EAAoB,CAAC,IAEA,MAAAhF,EAAME,cAAcZ,MAApB,eAA2B,CAAlD,IAAMY,EAAa,KACtBhB,KAAKsG,kBAAkBtF,EAAe8E,E,CAEvC,IAA2B,UAAAhF,EAAMI,gBAAgBd,MAAtB,eAAjBY,EAAa,KACtBhB,KAAKsG,kBAAkBtF,EAAe8E,GAIvC,OAFA9F,KAAKkG,iBAAiBJ,GAEfA,CACR,EAEQ,YAAAG,aAAR,SAAqBQ,EAAcC,GAClC,YADkC,IAAAA,IAAAA,EAAA,GAC3BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAQD,IAASA,CACrD,EAGO,YAAAK,QAAP,WACC,OAAO,OAAU9G,KAAKkE,iBAAiBY,WAAY9E,KAAK2E,QACzD,EAEO,YAAAoC,QAAP,WACC/G,KAAK6E,gBAAgBmC,iBACrB,YAAMD,QAAO,UACd,EACD,EAnIA,CAA6B,I,6ECA7B,0BACS,KAAAE,SAAmB,CAmE5B,QA5De,YAAAC,UAAd,SAAwBpG,EAAkB6D,EAAoCwC,G,oqCAIhE,OAHbnH,KAAKiH,SAAU,EACf,aAEa,GAAMtC,G,OAGnB,GAHMyC,EAAO,WACPC,EAAOrH,KAAKsH,WAGjB,UACD,KAAMD,aAAI,EAAJA,EAAME,iBACXF,EAAKG,YAAYH,EAAKI,W,OAGvBzH,KAAK0H,aAAe,IAAI,KAAWL,EAAMD,EAAKpE,eAAyC,QAAzB,EAAAoE,EAAKnE,4BAAoB,QAAI,CAAC,EAAGnC,EAAOqG,GACtGnH,KAAKiH,SAAU,EACf,a,6RAGM,YAAAU,SAAP,SAAgBC,GAAhB,WACOjD,EAAUiD,EAAMC,MAAMlD,QACtB7D,EAAQ8G,EAAMC,MAAM/G,MACpBqG,EAASS,EAAMC,MAAMV,OAC3BnH,KAAKc,MAAQA,EACbd,KAAKsH,UAAYM,EAAME,IAAIC,uBAAuB,mBAAmB,GAErE/H,KAAKkH,UAAUpG,EAAO6D,EAAQvE,MAAO+G,GACrCnH,KAAKgI,kBAAoBrD,EAAQI,aAAY,WAC5C,EAAKmC,UAAUpG,EAAO6D,EAAQvE,MAAO+G,EACtC,GACD,EAEO,YAAAc,SAAP,SAAgBL,GAAhB,I,EAAA,OAEOjD,EAAUiD,EAAMC,MAAMlD,QACtB7D,EAAQ8G,EAAMC,MAAM/G,MACpBqG,EAASS,EAAMC,MAAMV,OAExBrG,GAASd,KAAKc,QAChBd,KAAKc,MAAQA,EACbd,KAAKkH,UAAUpG,EAAO6D,EAAQvE,MAAO+G,GACf,QAAtB,EAAAnH,KAAKgI,yBAAiB,SAAEhB,iBAExBhH,KAAKgI,kBAAoBrD,EAAQI,aAAY,WAC5C,EAAKmC,UAAUpG,EAAO6D,EAAQvE,MAAO+G,EACtC,IAEF,EAEO,YAAAe,SAAP,W,MACuB,QAAtB,EAAAlI,KAAKgI,yBAAiB,SAAEhB,gBACzB,EAEO,YAAAK,KAAP,SAAYO,G,MACX,OAAO,WAAKO,MAAO,2BAAyC,QAArB,EAAAP,EAAMC,MAAMO,iBAAS,QAAI,KAC/D,WAAKD,MAAO,0BAAmBnI,KAAKiH,QAAU,SAAW,OACvDjH,KAAKiH,UACN,SAGH,EACD,EApEA,GAsEO,SAASoB,EAAUvH,EAAkB6D,EAA8CwC,GACzF,YADyF,IAAAA,IAAAA,GAAA,GAClF,IAAEmB,EAAgB,CACxBxH,MAAOA,EACP6D,QAASA,EACTwC,OAAQA,GAEV,C","sources":["webpack://ESMira/./src/frontend/ts/loader/csv/CsvLoaderCollectionFromCharts.ts","webpack://ESMira/./src/frontend/ts/observable/ObservablePromise.ts","webpack://ESMira/./src/frontend/ts/pages/chartPreview.tsx","webpack://ESMira/./src/frontend/ts/widgets/ChartView.tsx"],"sourcesContent":["import {Study} from \"../../data/study/Study\";\nimport {FILE_RESPONSES, FILE_STATISTICS} from \"../../constants/urls\";\nimport {StudyDataValues} from \"../../helpers/StudyDataValues\";\nimport {CsvLoader} from \"./CsvLoader\";\nimport {AxisContainer} from \"../../data/study/AxisContainer\";\nimport {LoaderState} from \"../../site/LoaderState\";\nimport {ChartData} from \"../../data/study/ChartData\";\nimport {StatisticsCollection} from \"../../data/statistics/StatisticsCollection\";\nimport {Requests} from \"../../singletons/Requests\";\n\n\nexport interface LoadedStatistics {\n\t/**\n\t * This represents, in most cases, personal statistics. Main exception is the publicStatistics section.\n\t */\n\tmainStatistics: StatisticsCollection\n\t/**\n\t * This represents, in most cases, public statistics. Main exception is the publicStatistics section.\n\t */\n\tadditionalStatistics?: StatisticsCollection\n}\n\nexport class CsvLoaderCollectionFromCharts {\n\tprivate readonly loaderState: LoaderState\n\tprivate readonly study: Study\n\tprivate readonly variableGroupIndex: Record<string, number> = {}\n\tprivate readonly urlTemplate: string\n\tprivate readonly personalStatistics: StatisticsCollection = {}\n\t\n\tprivate readonly csvLoaders: Record<number, CsvLoader> = {}\n\tprivate publicStatistics?: StatisticsCollection\n\t\n\tprivate charts: ChartData[] = []\n\tprivate needsPublicStatistics: boolean = false\n\t\n\tconstructor(loaderState: LoaderState, study: Study) {\n\t\tthis.loaderState = loaderState\n\t\tthis.study = study\n\t\tthis.urlTemplate = FILE_RESPONSES.replace('%1', study.id.get().toString())\n\t}\n\t\n\t/**\n\t *\n\t * @param charts\n\t */\n\tpublic async setupLoadersForCharts(charts: ChartData[]): Promise<void> {\n\t\tthis.charts = charts\n\t\tconst questionnaires = this.study.questionnaires.get()\n\t\tfor(let i=questionnaires.length-1; i>=0; --i) {\n\t\t\tconst questionnaire = questionnaires[i]\n\t\t\tconst variables = StudyDataValues.getQuestionnaireVariables(questionnaire)\n\t\t\tvariables.forEach((variable) => {\n\t\t\t\tthis.variableGroupIndex[variable] = i;\n\t\t\t})\n\t\t}\n\t\t\n\t\tfor(const chart of this.charts) {\n\t\t\tawait this.checkAxis(chart.axisContainer.get())\n\t\t\tif(chart.displayPublicVariable.get())\n\t\t\t\tawait this.checkAxis(chart.publicVariables.get())\n\t\t}\n\t}\n\tprivate async checkAxis(axisContainerArray: AxisContainer[]) {\n\t\tfor(const axisContainer of axisContainerArray) {\n\t\t\tconst xAxis = axisContainer.xAxis\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\t\n\t\t\tawait this.addLoader(xAxis.variableName.get())\n\t\t\tawait this.addLoader(yAxis.variableName.get())\n\t\t}\n\t}\n\tprivate async addLoader(variableName: string): Promise<void> {\n\t\tif(!variableName)\n\t\t\treturn\n\t\tconst questionnaireI = this.variableGroupIndex[variableName]\n\t\tif(!this.csvLoaders[questionnaireI]) {\n\t\t\tconst url = this.urlTemplate.replace('%2', this.study.questionnaires.get()[questionnaireI].internalId.get().toString())\n\t\t\tthis.csvLoaders[questionnaireI] = await CsvLoader.fromUrl(this.loaderState, url)\n\t\t}\n\t}\n\t\n\t\n\tprivate combineStatistics(newStatistics: StatisticsCollection): void {\n\t\tfor(const variableName in newStatistics) {\n\t\t\tconst newVariable = newStatistics[variableName]\n\t\t\t\n\t\t\tif(!this.personalStatistics.hasOwnProperty(variableName))\n\t\t\t\tthis.personalStatistics[variableName] = newVariable\n\t\t\telse {\n\t\t\t\tconst currentVariable = this.personalStatistics[variableName]\n\t\t\t\tnewVariable.forEach((newEntry, index) => {\n\t\t\t\t\tif(!currentVariable[index] || newEntry.entryCount != 0) //this could is probably a dry run and the target variable is loaded from another csvLoader\n\t\t\t\t\t\tcurrentVariable[index] = newEntry\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\tprivate async addStatistics(csvLoader: CsvLoader): Promise<void> {\n\t\tfor(const chart of this.charts) {\n\t\t\tconst newStatistics = await csvLoader.getStatistics(\n\t\t\t\tchart.axisContainer.get(),\n\t\t\t\tchart.dataType.get()\n\t\t\t)\n\t\t\tthis.combineStatistics(newStatistics)\n\t\t\tif(chart.displayPublicVariable.get())\n\t\t\t\tthis.needsPublicStatistics = true\n\t\t}\n\t}\n\t\n\tpublic async loadStatisticsFromFiles(userName?: string, dontLoadPublicStatistics: boolean = false): Promise<LoadedStatistics> {\n\t\tfor(const i in this.csvLoaders) {\n\t\t\t//Note: This runs through all csvLoaders with every chart and their variables. Even when a chart (or variable) does not need the csvLoader\n\t\t\tconst csvLoader = this.csvLoaders[i]\n\t\t\tif(userName) {\n\t\t\t\tawait csvLoader.filterEntireColumn(false, \"userId\")\n\t\t\t\tawait csvLoader.filterByValue(true, \"userId\", userName)\n\t\t\t}\n\t\t\tawait this.addStatistics(csvLoader)\n\t\t}\n\t\t\n\t\tif(this.needsPublicStatistics && !dontLoadPublicStatistics) {\n\t\t\tif(!this.publicStatistics) {\n\t\t\t\tconst accessKeys = this.study.accessKeys.get()\n\t\t\t\tconst accessKey = accessKeys.length ? accessKeys[0].get() : \"\"\n\t\t\t\tthis.publicStatistics = await Requests.loadJson(FILE_STATISTICS.replace(\"%d\", this.study.id.get().toString()).replace(\"%s\", accessKey))\n\t\t\t}\n\t\t\t\n\t\t\treturn {\n\t\t\t\tmainStatistics: this.personalStatistics,\n\t\t\t\tadditionalStatistics: this.publicStatistics\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\treturn {mainStatistics: this.personalStatistics}\n\t}\n}","import {ObservableTypes} from \"./types/ObservableTypes\";\nimport {BaseObservable} from \"./BaseObservable\";\nimport { JsonTypes } from \"./types/JsonTypes\";\n\n/**\n * A observable Wrapper that can hold a Promise\n */\nexport class ObservablePromise<T> extends BaseObservable<Promise<T>> {\n\tprotected backingField: Promise<T>\n\t\n\tconstructor(value: Promise<T>, parent: BaseObservable<ObservableTypes> | null, key: string) {\n\t\tsuper(parent, key)\n\t\tthis.keyName = key\n\t\tthis.backingField = value\n\t}\n\t\n\tpublic reCalcIsDifferent(_: boolean = false): void {\n\t\t//do nothing\n\t}\n\t\n\tpublic createJson(): JsonTypes {\n        return \"\"\n    }\n\t\n\tpublic isDifferent(): boolean {\n\t\treturn false\n\t}\n\t\n\tpublic get(): Promise<any> {\n\t\treturn this.backingField\n\t}\n\tpublic set(value: Promise<T>, silently: boolean = false): void {\n\t\tthis.backingField = value\n\t\tif(!silently)\n\t\t\tthis.hasMutated(true, true)\n\t}\n\tpublic setValue(value: T, silently: boolean = false) {\n\t\tthis.set(Promise.resolve(value), silently)\n\t}\n}","import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {ChartEditSectionContent} from \"./chartEdit\";\nimport {CsvLoaderCollectionFromCharts, LoadedStatistics} from \"../loader/csv/CsvLoaderCollectionFromCharts\";\nimport {ChartView} from \"../widgets/ChartView\";\nimport {ObservablePromise} from \"../observable/ObservablePromise\";\nimport {ObserverId} from \"../observable/BaseObservable\";\nimport {AxisContainer} from \"../data/study/AxisContainer\";\nimport {CsvLoader} from \"../loader/csv/CsvLoader\";\nimport {BtnReload} from \"../widgets/BtnWidgets\";\n\nconst ONE_DAY_MS = 86400000\n\nexport class Content extends SectionContent {\n\tprivate readonly connectedSection: ChartEditSectionContent\n\tprivate readonly randomContent: boolean\n\tprivate readonly csvLoaderCollection: CsvLoaderCollectionFromCharts\n\tprivate readonly promise: ObservablePromise<LoadedStatistics>\n\tprivate readonly chartObserverId: ObserverId\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\tlet connectedSection: Section | undefined = undefined\n\t\tconst sections = section.allSections\n\t\tfor(let i=section.depth-1; i>0; --i) {\n\t\t\tconst currentSection = sections[i]\n\t\t\tif(currentSection.sectionName == \"chartEdit\") {\n\t\t\t\tconnectedSection = currentSection\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif(!connectedSection)\n\t\t\tthrow new Error(\"Could not find a proper chartEdit section\")\n\t\t\n\t\treturn [\n\t\t\tconnectedSection.initPromise,\n\t\t\tsection.getStudyPromise()\n\t\t]\n\t}\n\tconstructor(section: Section, connectedSection: Section) {\n\t\tsuper(section)\n\t\t\n\t\tif(!connectedSection || !(connectedSection.sectionContent instanceof ChartEditSectionContent))\n\t\t\tthrow new Error(\"Could not find a proper chartEdit section\")\n\t\t\n\t\tthis.connectedSection = connectedSection.sectionContent\n\t\tthis.randomContent = connectedSection.sectionValue != \"calc\"\n\t\tthis.csvLoaderCollection = new CsvLoaderCollectionFromCharts(section.loader, this.getStudyOrThrow())\n\t\tthis.promise = new ObservablePromise<LoadedStatistics>(this.loadStatistics(), null, \"chartPreview\")\n\t\t\n\t\tthis.chartObserverId = this.connectedSection.getChart().addObserver(() => {\n\t\t\tthis.promise.set(this.loadStatistics())\n\t\t})\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(this.randomContent ? \"preview\" : \"calculate\")\n\t}\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn BtnReload(() => this.promise.set(this.loadStatistics()), Lang.get(\"reload\"))\n\t}\n\t\n\tprivate async loadStatistics(): Promise<LoadedStatistics> {\n\t\tif(this.randomContent) {\n\t\t\tconst chart = this.connectedSection.getChart()\n\t\t\tconst csvLoader = await CsvLoader.fromCsv(this.section.loader, this.createRandomCsv())\n\t\t\t\n\t\t\treturn {\n\t\t\t\tmainStatistics: await csvLoader.getStatistics(chart.axisContainer.get(), chart.dataType.get()),\n\t\t\t\tadditionalStatistics: await csvLoader.getStatistics(chart.publicVariables.get(), chart.dataType.get())\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tawait this.csvLoaderCollection.setupLoadersForCharts([this.connectedSection.getChart()])\n\t\t\treturn this.csvLoaderCollection.loadStatisticsFromFiles()\n\t\t}\n\t}\n\t\n\tprivate addRandomValues(lines: string[][], amount: number = 50) {\n\t\tfor(let i = 1; i < amount; ++i) { // first line are the headers\n\t\t\tif(lines.length <= i)\n\t\t\t\tlines.push([])\n\t\t\tlines[i].push(this.getRandomInt(0, 10).toString())\n\t\t}\n\t}\n\t\n\tprivate addTimeVariables(lines: string[][]) {\n\t\tconst variables = [\"uploaded\", \"responseTime\"]\n\t\tconst amount = lines.length - 1\n\t\tlet currentTimestamp = 1571820812000\n\t\t\n\t\tfor(const variable of variables) {\n\t\t\tlines[0].push(variable)\n\t\t}\n\t\t\n\t\tfor(let i = 1; i < amount; ++i) { // first line are the headers\n\t\t\tfor(const _variable of variables) {\n\t\t\t\tlines[i].push(currentTimestamp.toString())\n\t\t\t}\n\t\t\tcurrentTimestamp += this.getRandomInt(0, ONE_DAY_MS/2)\n\t\t}\n\t}\n\t\n\tprivate fillAxisContainer(axisContainer: AxisContainer, lines: string[][]) {\n\t\tconst xAxisName = axisContainer.xAxis.variableName.get()\n\t\tif(xAxisName) {\n\t\t\tlines[0].push(xAxisName)\n\t\t\tthis.addRandomValues(lines)\n\t\t}\n\t\t\n\t\tconst yAxisName = axisContainer.yAxis.variableName.get()\n\t\tif(yAxisName) {\n\t\t\tlines[0].push(yAxisName)\n\t\t\tthis.addRandomValues(lines)\n\t\t}\n\t}\n\t\n\tprivate createRandomCsv(): string[][] {\n\t\tconst chart = this.connectedSection.getChart()\n\t\tconst lines: string[][] = [[]]\n\t\t\n\t\tfor(const axisContainer of chart.axisContainer.get()) {\n\t\t\tthis.fillAxisContainer(axisContainer, lines)\n\t\t}\n\t\tfor(const axisContainer of chart.publicVariables.get()) {\n\t\t\tthis.fillAxisContainer(axisContainer, lines)\n\t\t}\n\t\tthis.addTimeVariables(lines)\n\t\t\n\t\treturn lines\n\t}\n\t\n\tprivate getRandomInt(from: number, until: number = 0): number {\n\t\treturn Math.floor(Math.random() * (until - from)) + from\n\t}\n\t\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn ChartView(this.connectedSection.getChart(), this.promise)\n\t}\n\t\n\tpublic destroy(): void {\n\t\tthis.chartObserverId.removeObserver()\n\t\tsuper.destroy()\n\t}\n}","import m, {Component, Vnode, VnodeDOM} from \"mithril\";\nimport {LoadedStatistics} from \"../loader/csv/CsvLoaderCollectionFromCharts\";\nimport {ChartJsBox} from \"../helpers/ChartJsBox\";\nimport {ObserverId} from \"../observable/BaseObservable\";\nimport {ChartData} from \"../data/study/ChartData\";\nimport {LoadingSpinner} from \"./LoadingSpinner\";\nimport {ObservablePromise} from \"../observable/ObservablePromise\";\n\ninterface ChartComponentOptions {\n\tpromise: ObservablePromise<LoadedStatistics>\n\tchart: ChartData\n\tclassName?: string //in case the parent has added a className that we need to include\n\tnoSort: boolean\n}\n\nclass ChartComponent implements Component<ChartComponentOptions, any> {\n\tprivate enabled: boolean = false\n\tprivate chart?: ChartData\n\tprivate chartView?: HTMLElement\n\tprivate chartViewBox?: ChartJsBox\n\tprivate promiseObserverId?: ObserverId\n\t\n\t\n\tprivate async drawGraph(chart: ChartData, promise: Promise<LoadedStatistics>, noSort: boolean): Promise<void> {\n\t\tthis.enabled = false\n\t\tm.redraw()\n\t\t\n\t\tconst data = await promise\n\t\tconst view = this.chartView\n\t\t\n\t\tif(!view)\n\t\t\treturn\n\t\twhile(view?.hasChildNodes()) {\n\t\t\tview.removeChild(view.lastChild!)\n\t\t}\n\t\t\n\t\tthis.chartViewBox = new ChartJsBox(view, data.mainStatistics, data.additionalStatistics ?? {}, chart, noSort)\n\t\tthis.enabled = true\n\t\tm.redraw()\n\t}\n\t\n\tpublic oncreate(vNode: VnodeDOM<ChartComponentOptions, any>): void {\n\t\tconst promise = vNode.attrs.promise\n\t\tconst chart = vNode.attrs.chart\n\t\tconst noSort = vNode.attrs.noSort\n\t\tthis.chart = chart\n\t\tthis.chartView = vNode.dom.getElementsByClassName(\"chartViewWindow\")[0] as HTMLElement\n\t\t\n\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\tthis.promiseObserverId = promise.addObserver(() => {\n\t\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\t})\n\t}\n\t\n\tpublic onupdate(vNode: VnodeDOM<ChartComponentOptions, any>): void {\n\t\t//when a section is replaced with another section with the same content (but from a different study), mithril js will not reload this ChartView but call onupdate instead\n\t\tconst promise = vNode.attrs.promise\n\t\tconst chart = vNode.attrs.chart\n\t\tconst noSort = vNode.attrs.noSort\n\t\t\n\t\tif(chart != this.chart) {\n\t\t\tthis.chart = chart\n\t\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\t\tthis.promiseObserverId?.removeObserver()\n\t\t\t\n\t\t\tthis.promiseObserverId = promise.addObserver(() => {\n\t\t\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\t\t})\n\t\t}\n\t}\n\t\n\tpublic onremove(): void {\n\t\tthis.promiseObserverId?.removeObserver()\n\t}\n\t\n\tpublic view(vNode: VnodeDOM<ChartComponentOptions, any>): Vnode<any, any> {\n\t\treturn <div class={`chartView center ${vNode.attrs.className ?? \"\"}`}>\n\t\t\t<div class={`chartViewWindow ${this.enabled ? \"fadeIn\" : \"\"}`}></div>\n\t\t\t{!this.enabled &&\n\t\t\t\tLoadingSpinner()\n\t\t\t}\n\t\t</div>\n\t}\n}\n\nexport function ChartView(chart: ChartData, promise: ObservablePromise<LoadedStatistics>, noSort: boolean = false) {\n\treturn m(ChartComponent, {\n\t\tchart: chart,\n\t\tpromise: promise,\n\t\tnoSort: noSort\n\t})\n}"],"names":["loaderState","study","variableGroupIndex","personalStatistics","csvLoaders","charts","needsPublicStatistics","this","urlTemplate","replace","id","get","toString","setupLoadersForCharts","questionnaires","i","questionnaire","getQuestionnaireVariables","forEach","variable","length","chart","checkAxis","axisContainer","displayPublicVariable","publicVariables","axisContainerArray","xAxis","yAxis","addLoader","variableName","questionnaireI","url","internalId","fromUrl","combineStatistics","newStatistics","newVariable","hasOwnProperty","newEntry","index","entryCount","addStatistics","csvLoader","getStatistics","dataType","loadStatisticsFromFiles","userName","dontLoadPublicStatistics","filterEntireColumn","filterByValue","publicStatistics","accessKeys","accessKey","loadJson","mainStatistics","additionalStatistics","value","parent","key","keyName","backingField","reCalcIsDifferent","_","createJson","isDifferent","set","silently","hasMutated","setValue","Promise","resolve","section","connectedSection","sectionContent","ChartEditSectionContent","Error","randomContent","sectionValue","csvLoaderCollection","loader","getStudyOrThrow","promise","loadStatistics","chartObserverId","getChart","addObserver","preLoad","undefined","sections","allSections","depth","currentSection","sectionName","initPromise","getStudyPromise","title","titleExtra","fromCsv","createRandomCsv","addRandomValues","lines","amount","push","getRandomInt","addTimeVariables","variables","currentTimestamp","ONE_DAY_MS","fillAxisContainer","xAxisName","yAxisName","from","until","Math","floor","random","getView","destroy","removeObserver","enabled","drawGraph","noSort","data","view","chartView","hasChildNodes","removeChild","lastChild","chartViewBox","oncreate","vNode","attrs","dom","getElementsByClassName","promiseObserverId","onupdate","onremove","class","className","ChartView","ChartComponent"],"sourceRoot":""}