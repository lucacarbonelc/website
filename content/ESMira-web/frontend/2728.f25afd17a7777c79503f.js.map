{"version":3,"file":"2728.f25afd17a7777c79503f.js","mappings":"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","sources":["webpack://ESMira/webpack/runtime/chunk loaded","webpack://ESMira/webpack/runtime/startup chunk dependencies","webpack://ESMira/./src/frontend/ts/constants/csv.ts","webpack://ESMira/./src/frontend/ts/loader/csv/CsvSpecialType.ts","webpack://ESMira/./src/frontend/ts/loader/csv/CsvRow.ts","webpack://ESMira/./src/frontend/ts/loader/csv/CsvCell.ts","webpack://ESMira/./src/frontend/ts/loader/csv/StatisticsCreator.ts","webpack://ESMira/./src/frontend/ts/constants/statistics.ts","webpack://ESMira/./src/frontend/ts/observable/SharedForObservable.ts","webpack://ESMira/./src/frontend/ts/observable/BaseObservable.ts","webpack://ESMira/./src/frontend/ts/observable/ObservablePrimitive.ts","webpack://ESMira/./src/frontend/ts/observable/BaseTranslatable.ts","webpack://ESMira/./src/frontend/ts/observable/TranslatablePrimitive.ts","webpack://ESMira/./src/frontend/ts/observable/ObservableArray.ts","webpack://ESMira/./src/frontend/ts/observable/TranslatableArray.ts","webpack://ESMira/./src/frontend/ts/observable/ObservableStructure.ts","webpack://ESMira/./src/frontend/ts/data/study/Conditions.ts","webpack://ESMira/./src/frontend/ts/data/study/AxisData.ts","webpack://ESMira/./src/frontend/ts/singletons/Requests.ts","webpack://ESMira/./src/frontend/ts/singletons/Lang.ts","webpack://ESMira/./src/frontend/ts/helpers/ChartJsBox.ts","webpack://ESMira/./src/frontend/ts/loader/csv/CsvWorker.ts","webpack://ESMira/./src/frontend/ts/data/study/AxisContainer.ts","webpack://ESMira/webpack/bootstrap","webpack://ESMira/webpack/runtime/compat get default export","webpack://ESMira/webpack/runtime/define property getters","webpack://ESMira/webpack/runtime/ensure chunk","webpack://ESMira/webpack/runtime/get javascript chunk filename","webpack://ESMira/webpack/runtime/get mini-css chunk filename","webpack://ESMira/webpack/runtime/global","webpack://ESMira/webpack/runtime/hasOwnProperty shorthand","webpack://ESMira/webpack/runtime/publicPath","webpack://ESMira/webpack/runtime/importScripts chunk loading","webpack://ESMira/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(2544).then(next);\n};","export const CSV_DELIMITER = \";\"\nexport const DATAVIEWER_SKIPPED_COLUMNS = [\"responseTime_formatted\", \"lastInvitation_formatted\", \"actionScheduledTo_formatted\"]\nexport const DATAVIEWER_TIMESTAMP_COLUMNS = [\"uploaded\", \"responseTime\", \"lastInvitation\", \"actionScheduledTo\"]","export enum CsvSpecialType {\n\tskipped,\n\tempty,\n\ttimestamp,\n\timage,\n\taudio\n}","import {CsvCell} from \"./CsvCell\";\n\nexport class CsvRow {\n\tpublic readonly shownIndex: number //rows reversed. That means shownIndex and arrayIndex are oposite of each other\n\tpublic arrayIndex: number\n\t\n\tpublic readonly columnCells: CsvCell[]\n\tpublic hiddenSum: number = 0 //how many columns are hiding this row\n\tpublic visible: boolean = true\n\tpublic marked: boolean = false\n\t\n\tconstructor(arrayIndex: number, shownIndex: number, columnCells: CsvCell[]) {\n\t\tthis.arrayIndex = arrayIndex\n\t\tthis.shownIndex = shownIndex\n\t\tthis.columnCells = columnCells\n\t}\n}","import {CsvRow} from \"./CsvRow\";\nimport {CsvSpecialType} from \"./CsvSpecialType\";\n\nexport class CsvCell {\n\tpublic readonly row: CsvRow\n\tpublic value: string //the value that is shown in the data viewer\n\tpublic realValue: string\n\tpublic special\n\tpublic specialType?: CsvSpecialType\n\t\n\tconstructor(row: CsvRow, value: string, realValue: string, specialType?: CsvSpecialType) {\n\t\tthis.row = row\n\t\tthis.value = value\n\t\tthis.realValue = realValue\n\t\tthis.specialType = specialType\n\t\tthis.special = specialType != undefined\n\t}\n}\n\nexport interface CsvCellsWithMeta {\n\tcells: CsvCell[]\n\tmeta: { visible: boolean }\n}","import {Conditions} from \"../../data/study/Conditions\";\nimport {\n\tCONDITION_OPERATOR_EQUAL,\n\tCONDITION_OPERATOR_GREATER,\n\tCONDITION_OPERATOR_LESS,\n\tCONDITION_OPERATOR_UNEQUAL,\n\tCONDITION_TYPE_ALL,\n\tCONDITION_TYPE_AND,\n\tCONDITION_TYPE_OR,\n\tSTATISTICS_DATATYPES_DAILY, STATISTICS_DATATYPES_FREQ_DISTR,\n\tSTATISTICS_DATATYPES_SUM, STATISTICS_DATATYPES_XY,\n\tSTATISTICS_STORAGE_TYPE_FREQ_DISTR,\n\tSTATISTICS_STORAGE_TYPE_PER_DATA,\n\tSTATISTICS_STORAGE_TYPE_TIMED\n} from \"../../constants/statistics\";\nimport {AxisData} from \"../../data/study/AxisData\";\nimport {StatisticsCollection} from \"../../data/statistics/StatisticsCollection\";\nimport {StatisticsEntry} from \"../../data/statistics/StatisticsEntry\";\nimport {StatisticsEntryPerData, StatisticsEntryPerValue, StatisticsEntryTimed} from \"../../data/statistics/StatisticsDataRecord\";\nimport {CsvRow} from \"./CsvRow\";\nimport {CsvCell} from \"./CsvCell\";\nimport {CsvData} from \"./CsvWorker\";\nimport {AxisContainer} from \"../../data/study/AxisContainer\";\n\nconst ONE_DAY = 86400 //in seconds: 60*60*24\n\nexport class StatisticsCreator {\n\tprivate csvData: CsvData\n\t\n\tconstructor(csvData: CsvData) {\n\t\tthis.csvData = csvData\n\t}\n\t\n\tprivate getStorageType(dataType: number): number {\n\t\tswitch(dataType) {\n\t\t\tcase STATISTICS_DATATYPES_XY:\n\t\t\t\treturn STATISTICS_STORAGE_TYPE_PER_DATA\n\t\t\tcase STATISTICS_DATATYPES_FREQ_DISTR:\n\t\t\t\treturn STATISTICS_STORAGE_TYPE_FREQ_DISTR\n\t\t\tcase STATISTICS_DATATYPES_DAILY:\n\t\t\tcase STATISTICS_DATATYPES_SUM:\n\t\t\tdefault:\n\t\t\t\treturn STATISTICS_STORAGE_TYPE_TIMED\n\t\t}\n\t}\n\tprivate addTimedStatisticsEntryData(value: string, entry: StatisticsEntry, row: CsvRow, responseTimeColumnNum: number, uploadedColumnNum: number): void {\n\t\tconst cells = row.columnCells\n\t\tlet intValue = parseInt(value)\n\t\tlet day = cells[responseTimeColumnNum] == undefined\n\t\t\t? NaN //can happen if there is an error in dataset\n\t\t\t: Math.floor(Math.round(parseInt(cells[responseTimeColumnNum].realValue) / 1000) / ONE_DAY) * ONE_DAY\n\t\t\n\t\tif(isNaN(day)) { //fallback\n\t\t\tday = cells[responseTimeColumnNum] === undefined\n\t\t\t\t? NaN //can happen if there is an error in dataset\n\t\t\t\t: Math.floor(Math.round(parseInt(cells[uploadedColumnNum].realValue)) / ONE_DAY) * ONE_DAY\n\t\t\tif(isNaN(day))\n\t\t\t\treturn\n\t\t}\n\t\tif(isNaN(intValue))\n\t\t\tintValue = 0\n\t\t\n\t\tif(!isNaN(day)) {\n\t\t\tconst timedEntryData = entry.data as StatisticsEntryTimed\n\t\t\tif(!timedEntryData.hasOwnProperty(day))\n\t\t\t\ttimedEntryData[day] = {sum: intValue, count: 1}\n\t\t\telse {\n\t\t\t\ttimedEntryData[day].sum += intValue\n\t\t\t\t++timedEntryData[day].count\n\t\t\t}\n\t\t}\n\t}\n\tprivate addFreqDistrEntryData(value: string, entry: StatisticsEntry): void {\n\t\tconst perValueEntryData = entry.data as StatisticsEntryPerValue\n\t\tif(perValueEntryData.hasOwnProperty(value))\n\t\t\t++perValueEntryData[value]\n\t\telse\n\t\t\tperValueEntryData[value] = 1\n\t}\n\tprivate addPerDataEntryData(value: string, entry: StatisticsEntry): void {\n\t\tconst perDataEntryData = entry.data as StatisticsEntryPerData\n\t\tperDataEntryData[entry.entryCount] = parseFloat(value)\n\t}\n\tprivate statisticConditionsAreMet(conditionType: number, conditions: Conditions[], cells: CsvCell[]): boolean {\n\t\tif(conditionType == CONDITION_TYPE_ALL)\n\t\t\treturn true\n\t\tconst conditionTypeIsAnd = conditionType == CONDITION_TYPE_AND\n\t\tconst conditionTypeIsOr = conditionType == CONDITION_TYPE_OR\n\t\t\n\t\tlet conditionIsMet = !conditionTypeIsOr\n\t\t\n\t\tfor(let i = conditions.length - 1; i >= 0; --i) {\n\t\t\tconst condition = conditions[i]\n\t\t\tconst conditionColumn = cells[this.csvData.getColumnNum(condition.key.get())]\n\t\t\tif(conditionColumn == undefined) //can happen if there was an error in the dataset\n\t\t\t\tcontinue\n\t\t\tconst conditionCompareValue = conditionColumn.special ? conditionColumn.realValue : conditionColumn.value\n\t\t\tlet isTrue\n\t\t\tconst conditionValue = condition.value.get()\n\t\t\tswitch(condition.operator.get()) {\n\t\t\t\tcase CONDITION_OPERATOR_EQUAL:\n\t\t\t\t\tisTrue = conditionCompareValue == conditionValue\n\t\t\t\t\tbreak\n\t\t\t\tcase CONDITION_OPERATOR_UNEQUAL:\n\t\t\t\t\tisTrue = conditionCompareValue != conditionValue\n\t\t\t\t\tbreak\n\t\t\t\tcase CONDITION_OPERATOR_GREATER:\n\t\t\t\t\tisTrue = conditionCompareValue >= conditionValue\n\t\t\t\t\tbreak\n\t\t\t\tcase CONDITION_OPERATOR_LESS:\n\t\t\t\t\tisTrue = conditionCompareValue <= conditionValue\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tisTrue = true\n\t\t\t}\n\t\t\tif(isTrue) {\n\t\t\t\tif(conditionTypeIsOr) {\n\t\t\t\t\tconditionIsMet = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(conditionTypeIsAnd) {\n\t\t\t\tconditionIsMet = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn conditionIsMet\n\t}\n\tprivate createDataFromAxis(axis: AxisData, dataType: number, statisticsObj: StatisticsCollection): void {\n\t\tconst storageType = this.getStorageType(dataType)\n\t\tconst timeInterval = dataType == STATISTICS_DATATYPES_DAILY || dataType == STATISTICS_DATATYPES_SUM ? ONE_DAY : 0\n\t\tconst visibleRows = this.csvData.visibleRowsList\n\t\tconst responseTimeColumnNum = this.csvData.getColumnNum(\"responseTime\")\n\t\tconst uploadedColumnNum = this.csvData.getColumnNum(\"uploaded\")\n\t\t\n\t\tif(axis.variableName.get().length == 0)\n\t\t\treturn\n\t\tconst variableName = axis.variableName.get()\n\t\tif(variableName.length == 0)\n\t\t\treturn\n\t\t\n\t\tconst columnNum = this.csvData.getColumnNum(variableName)\n\t\tconst conditions = axis.conditions.get()\n\t\tconst conditionType = axis.conditionType.get()\n\t\t\n\t\tif(!statisticsObj.hasOwnProperty(variableName))\n\t\t\tstatisticsObj[variableName] = []\n\t\tconst a = statisticsObj[variableName]\n\t\t\n\t\t\n\t\tconst observedVariableIndex = axis.observedVariableIndex.get()\n\t\tif(!a[observedVariableIndex]) {\n\t\t\ta[observedVariableIndex] = {\n\t\t\t\tstorageType: storageType,\n\t\t\t\ttimeInterval: timeInterval,\n\t\t\t\tentryCount: 0,\n\t\t\t\tdata: {}\n\t\t\t}\n\t\t}\n\t\tconst entry = a[observedVariableIndex]\n\t\t\n\t\t\n\t\tlet addEntryData: (value: string, row: CsvRow) => void\n\t\t\n\t\tswitch(storageType) {\n\t\t\tcase STATISTICS_STORAGE_TYPE_TIMED:\n\t\t\t\taddEntryData = (value: string, row: CsvRow) => this.addTimedStatisticsEntryData(value, entry, row, responseTimeColumnNum, uploadedColumnNum)\n\t\t\t\tbreak\n\t\t\tcase STATISTICS_STORAGE_TYPE_FREQ_DISTR:\n\t\t\t\taddEntryData = (value: string) => this.addFreqDistrEntryData(value, entry)\n\t\t\t\tbreak\n\t\t\tcase STATISTICS_STORAGE_TYPE_PER_DATA:\n\t\t\t\taddEntryData = (value: string) => this.addPerDataEntryData(value, entry)\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\treturn\n\t\t}\n\t\t\n\t\tvisibleRows.forEach((row) => {\n\t\t\tconst cells = row.columnCells\n\t\t\tconst columnCell = cells[columnNum]\n\t\t\tif(!columnCell) //can happen if there was an error in the dataset\n\t\t\t\treturn\n\t\t\t\n\t\t\tconst value = columnCell.special ? columnCell.realValue : columnCell.value\n\t\t\t\n\t\t\tif(!this.statisticConditionsAreMet(conditionType, conditions, cells))\n\t\t\t\treturn\n\t\t\t\n\t\t\taddEntryData(value, row)\n\t\t\t++entry.entryCount\n\t\t})\n\t}\n\tpublic create(axisContainerArray: AxisContainer[], dataType: number): StatisticsCollection {\n\t\tthis.csvData.indexing()\n\t\tconst statisticsObj: StatisticsCollection = {}\n\t\t\n\t\taxisContainerArray.forEach((axisContainer) => {\n\t\t\tthis.createDataFromAxis(axisContainer.yAxis, dataType, statisticsObj)\n\t\t\tthis.createDataFromAxis(axisContainer.xAxis, dataType, statisticsObj)\n\t\t})\n\t\t\n\t\treturn statisticsObj\n\t}\n}","export const CONDITION_TYPE_ALL = 0\nexport const CONDITION_TYPE_AND = 1\nexport const CONDITION_TYPE_OR = 2\n\nexport const STATISTICS_VALUETYPES_MEAN = 0\nexport const STATISTICS_VALUETYPES_SUM = 1\nexport const STATISTICS_VALUETYPES_COUNT = 2\n\nexport const STATISTICS_DATATYPES_DAILY = 0\nexport const STATISTICS_DATATYPES_FREQ_DISTR = 1\nexport const STATISTICS_DATATYPES_SUM = 2\nexport const STATISTICS_DATATYPES_XY = 3\n\nexport const STATISTICS_CHARTTYPES_LINE = 0\nexport const STATISTICS_CHARTTYPES_LINE_FILLED = 1\nexport const STATISTICS_CHARTTYPES_BARS = 2\nexport const STATISTICS_CHARTTYPES_SCATTER = 3\nexport const STATISTICS_CHARTTYPES_PIE = 4\n\nexport const STATISTICS_STORAGE_TYPE_TIMED = 0\nexport const STATISTICS_STORAGE_TYPE_FREQ_DISTR = 1\nexport const STATISTICS_STORAGE_TYPE_PER_DATA = 2\n\nexport const CONDITION_OPERATOR_EQUAL = 0\nexport const CONDITION_OPERATOR_UNEQUAL = 1\nexport const CONDITION_OPERATOR_GREATER = 2\nexport const CONDITION_OPERATOR_LESS = 3","/**\n * This container holds all observers created saved under their address (which is derived from their key and their parents address).\n * Each structure of observable share the same SharedForObservable and every observable in that structure has a reference to it.\n * Having a shared object makes sure, that observers are still valid even if the whole data structure was replaced.\n *\n * See usage in {@link BaseObservable}\n */\nexport class SharedForObservable {\n\tpublic observerContainer: Record<string, Record<number, (... args: any[]) => void>> = {}\n\tpublic idCounter = 0\n}","import {ObservableTypes} from \"./types/ObservableTypes\";\nimport {SharedForObservable} from \"./SharedForObservable\";\nimport {JsonTypes} from \"./types/JsonTypes\";\n\n\nexport class ObserverId {\n\tpublic readonly shared: SharedForObservable\n\tpublic readonly id: number\n\tpublic readonly address: string\n\t\n\tconstructor(shared: SharedForObservable, id: number, address: string) {\n\t\tthis.shared = shared\n\t\tthis.id = id\n\t\tthis.address = address\n\t}\n\t\n\tpublic removeObserver() {\n\t\tif(this.shared.observerContainer.hasOwnProperty(this.address))\n\t\t\tdelete this.shared.observerContainer[this.address][this.id]\n\t}\n}\n\nexport type ObserverCallbackType<T extends ObservableTypes> = (obj: BaseObservable<T>, turnedDifferent: boolean, bubbled: boolean) => void\n\nexport type JsonCreatorOptions = { dontFilterDefaults?: boolean }\n\n/**\n * Observables are wrappers that hold a value which can be retrieved via {@link get()} and changed via {@link set()}.\n * Each Observable can have multiples Observers which are essentially callbacks that are called when an Observable was changed.\n * Changes are monitored and bubbled upwards in the structure (meaning that when a child is changed, its parent and parent parents are also informed about it).\n * When an observer notices a change (in itself or its children) it runs {@link hasMutated} which will run all its observers (added via {@link addObserver()}) in {@link runObservers()}.\n * and then runs its parent {@link hasMutated}.\n *\n * Important: Changes can only be noticed if their respective {@link set()} method is used. If a value was changed directly\n * (and / or if it is not wrapped in an observable), its change will go unnoticed.\n *\n * Note that observers are stored in {@link shared} which always reference the object from their root-parent container\n * (see code in {@link constructor} and {@link addObserver()} and documentation in {@link SharedForObservable}).\n * So in each structure, only a single {@link SharedForObservable}, that is shared between all its members, exists.\n * This means that a child structure can be replaced entirely without their observers being lost\n * (as long as the root parent is preserved or its {@link shared} is reused).\n */\nexport abstract class BaseObservable<T extends ObservableTypes>{\n\tpublic readonly shared: SharedForObservable\n\tpublic parent: BaseObservable<ObservableTypes> | null\n\tprivate address: string\n\tpublic keyName: string\n\t\n\tprotected constructor(parent: BaseObservable<ObservableTypes> | null, key: string) {\n\t\tthis.shared = parent?.shared ?? new SharedForObservable()\n\t\tthis.keyName = key\n\t\tthis.parent = parent\n\t\tthis.address = this.createAddress()\n\t}\n\t\n\t/**\n\t * Calculates the address of this observable using its key and its parent address.\n\t * The address is used to find the correct Observers (which are stored in {@link shared} to run.\n\t * Each observable address needs to be unique inside a structure.\n\t */\n\tprivate createAddress(): string {\n\t\treturn `${this.parent?.createAddress() || \"\"}>${this.keyName}`\n\t}\n\t\n\t/**\n\t * Runs all added Observers (added via {@link addObserver}) for this observer\n\t * @param turnedDifferent ONLY true if the value just turned different from its DEFAULT VALUE (will not be true if it was already different from its default value)\n\t * @param target Where the change originated from. Also used to determine the value of bubbled (true when this observable is not the source of the change) in the observer\n\t */\n\tprotected runObservers(turnedDifferent: boolean, target: BaseObservable<ObservableTypes> = this): void {\n\t\tconst bubbled = target != this\n\t\t\n\t\tif(this.shared.observerContainer.hasOwnProperty(this.address)) {\n\t\t\tconst observers = this.shared.observerContainer[this.address]\n\t\t\tfor(const id in observers) {\n\t\t\t\tobservers[id](target, turnedDifferent, bubbled)\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Runs {@param callback} whenever {@link runObservers()} is called (by {@link hasMutated()} when the value is changed)\n\t * Note that observers are stored in {@link shared} which is copied from the root-parent container (see code in {@link constructor}).\n\t * That means that the observable structure can be replaced entirely without observers being lost (as long as the root parent is preserved or its {@link shared} is reused).\n\t * As long as {@link address} stays the same, observers will still function\n\t * @param callback Runs whenever {@link runObservers()} is called (by {@link hasMutated()} or {@link set()})\n\t * @param existingId only save this {@param callback} if {@param existingId} does not exist yet\n\t */\n\tpublic addObserver(callback: ObserverCallbackType<T>, existingId?: ObserverId): ObserverId {\n\t\tif(existingId && this.shared.observerContainer.hasOwnProperty(existingId.address) && this.shared.observerContainer[existingId.address].hasOwnProperty(existingId.id))\n\t\t\texistingId.removeObserver()\n\t\t\n\t\tconst id = this.shared.idCounter++\n\t\t\n\t\tif(!this.shared.observerContainer.hasOwnProperty(this.address))\n\t\t\tthis.shared.observerContainer[this.address] = {}\n\t\tthis.shared.observerContainer[this.address][id] = callback\n\t\t\n\t\treturn new ObserverId(this.shared, id, this.address)\n\t}\n\t\n\t/**\n\t * Copies all observers from another structure to this structure.\n\t * This method assumes that this observable has the same key and address\n\t * @param other\n\t */\n\tpublic importObserverData(other: BaseObservable<T>): void {\n\t\tconst shared = other.shared\n\t\tthis.shared.observerContainer = shared.observerContainer\n\t\tthis.shared.idCounter = shared.idCounter\n\t}\n\t\n\tpublic removeAllConnectedObservers(): void {\n\t\tdelete this.shared.observerContainer[this.address]\n\t}\n\t\n\t/**\n\t * Updates the keyName, parent and recalculates address (even if keyName has not changed because it is assumed that keyName changed in a parent)\n\t * @param keyName\n\t * @param parent\n\t */\n\tpublic updateKeyName(keyName?: string, parent?: BaseObservable<ObservableTypes>): void {\n\t\tif(parent)\n\t\t\tthis.parent = parent\n\t\tif(keyName && this.keyName != keyName)\n\t\t\tthis.keyName = keyName\n\t\t\n\t\tconst oldAddress = this.address\n\t\tconst newAddress = this.createAddress()\n\t\tif(oldAddress != newAddress) {\n\t\t\tthis.address = newAddress\n\t\t\t\n\t\t\tconst observerContainer = this.shared.observerContainer\n\t\t\tobserverContainer[newAddress] = observerContainer[oldAddress]\n\t\t\tdelete observerContainer[oldAddress]\n\t\t}\n\t}\n\t\n\t/**\n\t * Called when the value of an observable has changed.\n\t * Will only be called if the new value is actually different from the old (or if changed can not be detected properly).\n\t * @param turnedDifferent ONLY true if the value just turned different from its DEFAULT VALUE (will not be true if it was already different from its default value)\n\t * @param forceIsDifferent Force hasMutated() to assume that the value just changed from its default value\n\t * @param target Where the change originated from. Also used to determine the value of bubbled (true when this observable is not the source of the change) in the observer\n\t */\n\tpublic hasMutated(turnedDifferent: boolean = false, forceIsDifferent: boolean = false, target: BaseObservable<ObservableTypes> = this): void {\n\t\tconst wasDifferent = this.isDifferent()\n\t\tthis.reCalcIsDifferent(forceIsDifferent)\n\t\tthis.runObservers(turnedDifferent, target)\n\t\tif(this.parent)\n\t\t\tthis.parent.hasMutated(!wasDifferent && turnedDifferent, forceIsDifferent || this.isDifferent(), target)\n\t}\n\t\n\t/**\n\t * Forces the observable to recalculate if it was changed from its default value. Is usually called when its value was changed.\n\t * @param forceIsDifferent Force reCalcIsDifferent() to assume that the value just changed from its default value\n\t */\n\tabstract reCalcIsDifferent(forceIsDifferent: boolean): void\n\tabstract get(): T\n\tabstract set(value: T, silently?: boolean): void\n\tabstract createJson(options?: JsonCreatorOptions): JsonTypes\n\tabstract isDifferent(): boolean\n}","import {ObservableTypes} from \"./types/ObservableTypes\";\nimport {BaseObservable} from \"./BaseObservable\";\nimport {PrimitiveType} from \"./types/PrimitiveType\";\nimport { JsonTypes } from \"./types/JsonTypes\";\n\n/**\n * A Wrapper that can hold any primitive (string, number, boolean)\n */\nexport class ObservablePrimitive<T extends PrimitiveType> extends BaseObservable<T> {\n\tprotected _isDifferent = false\n\tprotected backingField: T\n\tprotected defaultField: T\n\t\n\tconstructor(value: T, parent: BaseObservable<ObservableTypes> | null, key: string) {\n\t\tsuper(parent, key)\n\t\tthis.keyName = key\n\t\tthis.backingField = value\n\t\tthis.defaultField = value\n\t}\n\t\n\tpublic createJson(): JsonTypes {\n        return this.get();\n    }\n\t\n\tpublic reCalcIsDifferent(forceIsDifferent: boolean = false): void {\n\t\tthis._isDifferent = forceIsDifferent || this.backingField != this.defaultField\n\t}\n\t\n\tpublic isDifferent(): boolean {\n\t\treturn this._isDifferent\n\t}\n\t\n\tpublic get(): T {\n\t\treturn this.backingField\n\t}\n\tpublic set(value: T, silently: boolean = false) {\n\t\tif(silently) {\n\t\t\tthis.defaultField = value\n\t\t\tthis.backingField = value\n\t\t}\n\t\telse if(this.backingField != value) {\n\t\t\tthis.backingField = value\n\t\t\tthis.hasMutated(!this._isDifferent)\n\t\t}\n\t}\n}","import {BaseObservable, JsonCreatorOptions} from \"./BaseObservable\";\nimport {ObservableTypes} from \"./types/ObservableTypes\";\nimport {ObservablePrimitive} from \"./ObservablePrimitive\";\n\nexport type TranslatableJsonCreatorOptions = { dontIncludeAllLanguages?: boolean } & JsonCreatorOptions\n\n/**\n * A {@link BaseObservable} that can also store multiple versions under a langCode.\n * The way it works is that each translatable member internally uses a Record<langKey, BaseObservable> only returns the\n * BaseObservable that is active at the moment.\n *\n * Important: Each Container implementation need to ensure that it either uses {@link isTranslatable} to check if their\n * children are BaseTranslatable (and not only BaseObservable) or that only BaseTranslatable children can be added!\n *\n * {@link currentLangCode} is stored the same way as {@link BaseObservable.shared}: It is only defined in the root object of its structure and\n * its reference is then shared between all its children.\n * So in each structure, only a single object of {@link currentLangCode}, that is shared between all its members, exists.\n * The root of a structure is meant to always implement {@link TranslationRootInterface} when translations are be used.\n */\nexport abstract class BaseTranslatable<T extends ObservableTypes> extends BaseObservable<T> {\n\tpublic readonly currentLangCode: ObservablePrimitive<string>\n\t\n\tprotected constructor(parent: BaseObservable<ObservableTypes> | null, key: string, newLang?: string) {\n\t\tsuper(parent, key)\n\t\t\n\t\tconst parentTranslatable = parent && this.isTranslatable(parent) ? parent : null\n\t\t\n\t\tif(newLang)\n\t\t\tthis.currentLangCode = new ObservablePrimitive<string>(newLang, null, \"currentLang\")\n\t\telse\n\t\t\tthis.currentLangCode = parentTranslatable?.currentLangCode ?? new ObservablePrimitive<string>(\"en\", null, \"currentLang\")\n\t}\n\t\n\t/**\n\t * Returns true if a BaseObservable is also a BaseTranslatable\n\t * @param value the BaseObservable to be checked\n\t */\n\tprotected isTranslatable(value: BaseObservable<any>): value is BaseTranslatable<any> {\n\t\treturn (value as BaseTranslatable<any>).addLanguage !== undefined;\n\t}\n\t\n\tabstract addLanguage(langCode: string, langData?: any): void\n\tabstract renameLanguage(oldLangCode: string, newLangCode: string): void\n\tabstract removeLanguage(langCode: string): void\n}","import {ObservablePrimitive} from \"./ObservablePrimitive\";\nimport {ObservableTypes} from \"./types/ObservableTypes\";\nimport {BaseObservable} from \"./BaseObservable\";\nimport {PrimitiveType} from \"./types/PrimitiveType\";\nimport {JsonTypes} from \"./types/JsonTypes\";\nimport {BaseTranslatable, TranslatableJsonCreatorOptions} from \"./BaseTranslatable\";\n\ntype LanguageData<T> = Record<string, T>\n\n/**\n * A translatable Wrapper that can hold any primitive (string, number, boolean)\n */\nexport class TranslatablePrimitive<T extends PrimitiveType> extends BaseTranslatable<T> {\n\tprivate readonly observables: Record<string, ObservablePrimitive<T>> = {}\n\tprivate langCount: number = 0\n\tprivate readonly defaultValue: T\n\t\n\tconstructor(value: T | LanguageData<T>, parent: BaseObservable<ObservableTypes> | null, key: string, newLang?: string) {\n\t\tsuper(parent, key, newLang)\n\t\t\n\t\tif(value != null && typeof value == \"object\") {  // value will be null when it has the wrong type (source was faulty)\n\t\t\tfor(let langCode in value) {\n\t\t\t\tthis.observables[langCode] = new ObservablePrimitive<T>(value[langCode], this.parent, this.keyName)\n\t\t\t\t++this.langCount\n\t\t\t}\n\t\t\tthis.defaultValue = value[this.currentLangCode.get()]\n\t\t}\n\t\telse {\n\t\t\tthis.defaultValue = value\n\t\t\tthis.observables[this.currentLangCode.get()] = new ObservablePrimitive<T>(value, this.parent, this.keyName)\n\t\t\tthis.langCount = 1\n\t\t}\n\t}\n\t\n\tpublic updateKeyName(keyName: string, parent?: BaseObservable<ObservableTypes> | undefined): void {\n\t\tsuper.updateKeyName(keyName, parent)\n\t\tfor(let key in this.observables) {\n\t\t\tthis.observables[key].updateKeyName(keyName, parent)\n\t\t}\n    }\n\t\n\tpublic createJson(options?: TranslatableJsonCreatorOptions): JsonTypes {\n\t\tif(options?.dontIncludeAllLanguages || this.langCount <= 1)\n\t\t\treturn this.get()\n\t\telse {\n\t\t\tlet lastValue: T | null = null\n\t\t\tlet hasDifferentValues = false\n\t\t\tconst r: LanguageData<T> = {}\n\t\t\tfor(const langCode in this.observables) {\n\t\t\t\tconst value = this.observables[langCode].get()\n\t\t\t\tr[langCode] = value\n\t\t\t\tif(lastValue != null && value != lastValue)\n\t\t\t\t\thasDifferentValues = true\n\t\t\t\tlastValue = value\n\t\t\t}\n\t\t\treturn hasDifferentValues ?  r : (lastValue ?? this.defaultValue)\n\t\t}\n    }\n\t\n\tpublic addLanguage(langCode: string, value: T = this.defaultValue): void {\n\t\tif(this.observables.hasOwnProperty(langCode)) {\n\t\t\tconsole.log(`Language \"${langCode}\" already exists in ${this.keyName}`)\n\t\t\treturn\n\t\t}\n\t\tthis.observables[langCode] = new ObservablePrimitive<T>(value, this.parent, this.keyName)\n\t\t++this.langCount\n\t}\n\tpublic renameLanguage(oldLangCode: string, newLangCode: string): void {\n\t\tif(!this.observables.hasOwnProperty(oldLangCode))\n\t\t\treturn\n\t\tthis.observables[newLangCode] = this.observables[oldLangCode]\n\t\tdelete this.observables[oldLangCode]\n\t\tif(this.currentLangCode.get() == oldLangCode)\n\t\t\tthis.currentLangCode.set(newLangCode)\n\t}\n\tpublic removeLanguage(langCode: string): void {\n\t\tdelete this.observables[langCode]\n\t\t--this.langCount\n\t\t\n\t\tif(this.currentLangCode.get() == langCode) {\n\t\t\tlet firstLangKey = \"en\"\n\t\t\tfor(let observablesKey in this.observables) {\n\t\t\t\tfirstLangKey = observablesKey\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tthis.currentLangCode.set(firstLangKey)\n\t\t}\n\t}\n\t\n\tpublic reCalcIsDifferent(forceIsDifferent: boolean = false): void {\n\t\tthis.getObs()?.reCalcIsDifferent(forceIsDifferent)\n\t}\n\t\n\tpublic hasMutated(turnedDifferent: boolean = false, forceIsDifferent: boolean = false, target: BaseObservable<ObservableTypes> = this): void {\n\t\tthis.getObs()?.hasMutated(turnedDifferent, forceIsDifferent, target)\n\t}\n\tpublic isDifferent(): boolean {\n\t\tlet isDifferent = false\n\t\tfor(let key in this.observables) {\n\t\t\tif(this.observables[key].isDifferent()) {\n\t\t\t\tisDifferent = true\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn isDifferent\n\t}\n\t\n\tprivate getObs(): ObservablePrimitive<T> | null {\n\t\tconst langCode = this.currentLangCode.get()\n\t\tif(!this.observables.hasOwnProperty(langCode)) {\n\t\t\tthis.observables[langCode] = new ObservablePrimitive<T>(this.defaultValue, this.parent, this.keyName)\n\t\t\t++this.langCount\n\t\t}\n\t\treturn this.observables[langCode]\n\t}\n\t\n\tpublic get(): T {\n\t\treturn this.getObs()!.get()\n\t}\n\tpublic set(value: T): void {\n\t\tthis.getObs()?.set(value)\n\t}\n}","import {PrimitiveType} from \"./types/PrimitiveType\";\nimport {ObservableTypes} from \"./types/ObservableTypes\";\nimport {BaseObservable, JsonCreatorOptions} from \"./BaseObservable\";\nimport {ObservableStructureDataType} from \"./ObservableStructure\";\nimport {JsonTypes} from \"./types/JsonTypes\";\nimport {ArrayInterface} from \"./interfaces/ArrayInterface\";\n\n/**\n * An observable Array that can hold any Observable or primitive types (string, number, boolean).\n * Primitive types will internally be packed into an {@link ObservablePrimitive}\n */\nexport class ObservableArray<\n\tInputT extends ObservableStructureDataType | PrimitiveType,\n\tObsT extends BaseObservable<ObservableTypes> | BaseObservable<PrimitiveType>\n> extends BaseObservable<any[]> implements ArrayInterface<InputT, ObsT> {\n\tprivate _isDifferent = false\n\tprivate readonly constructObservable: (data: InputT, parent: BaseObservable<ObservableTypes>, key: string) => ObsT\n\tprivate backingField: ObsT[]\n\tprivate readonly defaultField: ObsT[]\n\t\n\tconstructor(\n\t\tdefaultFields: InputT[],\n\t\tparent: BaseObservable<ObservableTypes> | null,\n\t\tkey: string,\n\t\tconstructObservable: (data: InputT, parent: BaseObservable<ObservableTypes> | null, key: string) => ObsT\n\t) {\n\t\tsuper(parent, key)\n\t\tconst values: ObsT[] = []\n\t\tconst defaultObsValues: ObsT[] = []\n\t\tthis.backingField = values\n\t\tthis.defaultField = defaultObsValues\n\t\tthis.constructObservable = constructObservable\n\t\t\n\t\tdefaultFields.forEach((value, index) => {\n\t\t\tif(value == null) //happens when value has the wrong type (source was faulty)\n\t\t\t\treturn\n\t\t\tconst obs = constructObservable(value, this, index.toString())\n\t\t\tvalues.push(obs)\n\t\t\tdefaultObsValues.push(obs)\n\t\t})\n\t}\n\t\n\tpublic createJson(options?: JsonCreatorOptions): JsonTypes {\n\t\treturn this.backingField.map((obs) => { return obs.createJson(options)})\n\t}\n\t\n\t\n\tpublic reCalcIsDifferent(forceIsDifferent: boolean = false): void {\n\t\tif(forceIsDifferent || this.defaultField.length != this.backingField.length) {\n\t\t\tthis._isDifferent = true\n\t\t\treturn\n\t\t}\n\t\telse {\n\t\t\t//defaultField preserves the original order of backingField but uses the same objects as backingField\n\t\t\t//keyName (which, normally, is just the array index) is always synced with the order in backingField.\n\t\t\t// That means the keyNames in defaultFiled will be out of order\n\t\t\t\n\t\t\tfor(let i = this.backingField.length - 1; i>=0; --i) {\n\t\t\t\tconst backingField = this.backingField[i]\n\t\t\t\tconst defaultValue = this.defaultField[i]\n\t\t\t\tif(backingField.isDifferent() || defaultValue.keyName != backingField.keyName) {\n\t\t\t\t\tthis._isDifferent = true\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._isDifferent = false\n\t}\n\tpublic isDifferent(): boolean {\n\t\treturn this._isDifferent\n    }\n\tpublic get(): ObsT[] {\n\t\treturn this.backingField\n    }\n\tpublic set(_value: ObsT[], _silently?: boolean): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\t\n\tpublic updateKeyName(keyName?: string, parent?: BaseObservable<ObservableTypes>): void {\n\t\tsuper.updateKeyName(keyName, parent)\n\t\tthis.backingField.forEach((obs) => obs.updateKeyName())\n\t}\n\t\n\tpublic addCopy(original: ObsT, index: number = this.backingField.length): ObsT {\n\t\tconst jsonObj = original.createJson()\n\t\tconst newObs = this.constructObservable(jsonObj as InputT, this, index.toString())\n\t\tthis.backingField.push(newObs)\n\t\tif(index != this.backingField.length-1)\n\t\t\tthis.move( this.backingField.length-1, index)\n\t\telse\n\t\t\tthis.hasMutated(!this._isDifferent)\n\t\treturn newObs\n\t}\n\tpublic push(value: InputT): ObsT {\n\t\tconst obs = this.constructObservable(value, this, this.backingField.length.toString())\n\t\tthis.backingField.push(obs)\n\t\tthis.hasMutated(!this._isDifferent)\n\t\treturn obs\n\t}\n\t\n\tpublic remove(index: number): ObsT {\n\t\tconst oldEntry = this.backingField[index]\n\t\tthis.backingField.splice(index, 1)\n\t\toldEntry.removeAllConnectedObservers()\n\t\t\n\t\tfor(let i = index, max = this.backingField.length; i < max; ++i) {\n\t\t\tthis.backingField[i].updateKeyName(i.toString())\n\t\t}\n\t\tthis.hasMutated(!this._isDifferent)\n\t\treturn oldEntry\n\t}\n\tpublic replace(values: InputT[], silent: boolean = false): void {\n\t\tthis.backingField = []\n\t\tfor(const value of values) {\n\t\t\tconst obs = this.constructObservable(value, this, this.backingField.length.toString())\n\t\t\tthis.backingField.push(obs)\n\t\t}\n\t\tif(!silent)\n\t\t\tthis.hasMutated(!this._isDifferent)\n\t}\n\tpublic move(oldIndex: number, newIndex: number): void {\n\t\tconst oldEntry = this.backingField[oldIndex]\n\t\tif(oldIndex == newIndex)\n\t\t\treturn\n\t\tthis.backingField.splice(oldIndex, 1)\n\t\tthis.backingField.splice(newIndex, 0, oldEntry)\n\t\t\n\t\toldEntry.updateKeyName(\"~temp\")\n\t\tfor(let i = oldIndex; i < newIndex; ++i) {\n\t\t\tthis.backingField[i].updateKeyName(i.toString())\n\t\t}\n\t\toldEntry.updateKeyName(newIndex.toString())\n\t\tthis.hasMutated()\n\t}\n\t\n\tpublic moveFromOtherList(oldList: ArrayInterface<InputT, ObsT>, oldIndex: number, newIndex: number): void {\n\t\tconst oldEntry = oldList.get()[oldIndex]\n\t\toldList.remove(oldIndex)\n\t\t\n\t\tthis.backingField.splice(newIndex, 0, oldEntry)\n\t\toldEntry.updateKeyName(\"~temp\")\n\t\tfor(let i = this.backingField.length - 1; i >= newIndex; --i) {\n\t\t\tthis.backingField[i].updateKeyName(i.toString(), this)\n\t\t}\n\t\toldEntry.updateKeyName(newIndex.toString())\n\t\tthis.hasMutated()\n\t}\n\t\n\tpublic indexOf(searchElement: PrimitiveType, fromIndex: number = 0): number {\n\t\tfor(let i = fromIndex, max = this.backingField.length; i < max; ++i) {\n\t\t\tif(this.backingField[i].get() == searchElement)\n\t\t\t\treturn i\n\t\t}\n\t\treturn -1\n\t}\n}","import {PrimitiveType} from \"./types/PrimitiveType\";\nimport {ObservableTypes} from \"./types/ObservableTypes\";\nimport {BaseObservable} from \"./BaseObservable\";\nimport {ObservableStructureDataType} from \"./ObservableStructure\";\nimport {JsonTypes} from \"./types/JsonTypes\";\nimport {BaseTranslatable, TranslatableJsonCreatorOptions} from \"./BaseTranslatable\";\nimport {ObservableArray} from \"./ObservableArray\";\nimport {ArrayInterface} from \"./interfaces/ArrayInterface\";\n\n/**\n * An observable Array that is translatable and can hold {@link BaseTranslatable}\n * Note: TranslatableArray itself does not have translations. Internally it uses an {@link ObservableArray} and all methods are relayed to it.\n * This class mainly exists to make sure that all children are BaseTranslatable (and not only BaseObservable)\n */\nexport class TranslatableArray<\n\tInputT extends ObservableStructureDataType | PrimitiveType,\n\tObsT extends BaseTranslatable<ObservableTypes> | BaseTranslatable<PrimitiveType>\n\t> extends BaseTranslatable<any[]> implements ArrayInterface<InputT, ObsT> {\n\t\n\tprivate readonly array: ObservableArray<InputT, ObsT>\n\t\n\tconstructor(\n\t\tdefaultFields: InputT[],\n\t\tparent: BaseObservable<ObservableTypes> | null,\n\t\tkey: string,\n\t\tconstructObservable: (data: InputT, parent: BaseObservable<ObservableTypes> | null, key: string) => ObsT\n\t) {\n\t\tsuper(parent, key)\n\t\tthis.array = new ObservableArray<InputT, ObsT>(\n\t\t\tdefaultFields,\n\t\t\tparent,\n\t\t\tkey,\n\t\t\t(data: InputT, _parent: BaseObservable<ObservableTypes> | null, childKey: string) => constructObservable(data, this, childKey)\n\t\t)\n\t}\n\t\n\tpublic createJson(options?: TranslatableJsonCreatorOptions): JsonTypes {\n\t\treturn this.array.createJson(options)\n\t}\n\t\n\tpublic get(): ObsT[] {\n\t\treturn this.array.get();\n\t}\n\t\n\tpublic reCalcIsDifferent(forceIsDifferent: boolean = false): void {\n\t\tthis.array.reCalcIsDifferent(forceIsDifferent)\n\t}\n\t\n\tpublic hasMutated(turnedDifferent?: boolean, forceIsDifferent?: boolean, target?: BaseObservable<ObservableTypes>): void {\n\t\tthis.array.hasMutated(turnedDifferent, forceIsDifferent, target)\n\t}\n\t\n\tpublic isDifferent(): boolean {\n\t\treturn this.array.isDifferent();\n\t}\n\t\n\tpublic addLanguage(langCode: string, langData: any): void {\n\t\tthis.array.get().forEach((obs, index) => { obs.addLanguage(langCode, (langData && langData[index]) ?? undefined)})\n\t}\n\t\n\tpublic removeLanguage(langCode: string): void {\n\t\tthis.array.get().forEach((obs) => obs.removeLanguage(langCode))\n\t\tthis.array.reCalcIsDifferent()\n\t}\n\t\n\tpublic renameLanguage(oldLangCode: string, newLangCode: string): void {\n\t\tthis.array.get().forEach((obs) => obs.renameLanguage(oldLangCode, newLangCode))\n\t}\n\t\n\tpublic set(value: ObsT[], silently?: boolean): void {\n\t\tthis.array.set(value, silently)\n\t}\n\t\n\tpublic updateKeyName(keyName?: string, parent?: BaseObservable<ObservableTypes>): void {\n\t\tsuper.updateKeyName(keyName, parent)\n\t\tthis.array.updateKeyName(keyName, parent)\n\t}\n\t\n\tpublic addCopy(original: ObsT, index?: number): ObsT {\n\t\treturn this.array.addCopy(original, index)\n\t}\n\t\n\tpublic push(value: InputT): ObsT {\n\t\treturn this.array.push(value)\n\t}\n\t\n\tpublic replace(values: InputT[], silent: boolean = false): void {\n\t\tthis.array.replace(values, silent)\n\t}\n\tpublic remove(index: number): ObsT {\n\t\treturn this.array.remove(index)\n\t}\n\t\n\tpublic move(oldIndex: number, newIndex: number): void {\n\t\treturn this.array.move(oldIndex, newIndex)\n\t}\n\tpublic moveFromOtherList(oldList: ArrayInterface<InputT, ObsT>, oldIndex: number, newIndex: number): void {\n\t\treturn this.array.moveFromOtherList(oldList, oldIndex, newIndex)\n\t}\n\t\n\tpublic indexOf(searchElement: PrimitiveType, fromIndex: number = 0): number {\n\t\treturn this.array.indexOf(searchElement, fromIndex)\n\t}\n}","import {PrimitiveType} from \"./types/PrimitiveType\";\nimport {ObservablePrimitive} from \"./ObservablePrimitive\";\nimport {JsonTypes} from \"./types/JsonTypes\";\nimport {ObservableTypes} from \"./types/ObservableTypes\";\nimport {TranslatablePrimitive} from \"./TranslatablePrimitive\";\nimport {BaseObservable} from \"./BaseObservable\";\nimport {BaseTranslatable, TranslatableJsonCreatorOptions} from \"./BaseTranslatable\";\nimport {TranslatableArray} from \"./TranslatableArray\";\nimport {ObservableArray} from \"./ObservableArray\";\n\nexport type ObservableStructureDataType = Record<string, JsonTypes>\n\n/**\n * An observable that can hold {@link BaseTranslatable} or {@link BaseObservable}\n * This class acts like a \"smart object\" with default properties and is most useful as root (or sub root) for a data structure.\n * Each property is created via {@link primitive()}, {@link primitiveArray()}, {@link translatable()}, {@link translatableArray()} {@link objectArray()} and {@link object()}\n * See examples in frontend/ts/data/\n */\nexport abstract class ObservableStructure extends BaseTranslatable<ObservableTypes> {\n\tprivate _isDifferent = false\n\tprivate alwaysDifferent = false\n\t\n\tprivate readonly initJson: ObservableStructureDataType\n\t\n\tprivate readonly generalDefaultValues: Record<string, PrimitiveType | PrimitiveType[]> = {}\n\tprivate readonly valueIndex: Record<string, BaseObservable<ObservableTypes>> = {}\n\t\n\t\n\tconstructor(data: ObservableStructureDataType, parent: BaseObservable<ObservableTypes> | null, key: string, newLang?: string) {\n\t\tsuper(parent, key, newLang)\n\t\tthis.initJson = data\n\t}\n\t\n\tpublic reCalcIsDifferent(forceIsDifferent: boolean = false): void {\n\t\tif(forceIsDifferent || this.alwaysDifferent) {\n\t\t\tthis._isDifferent = true\n\t\t\treturn\n\t\t}\n\t\telse {\n\t\t\tfor(let key in this.valueIndex) {\n\t\t\t\tif(this.valueIndex[key].isDifferent()) {\n\t\t\t\t\tthis._isDifferent = true\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._isDifferent = false\n\t}\n\t\n\tpublic setDifferent(isDifferent: boolean): void {\n\t\tthis.alwaysDifferent = isDifferent\n\t\tthis.hasMutated(!this._isDifferent)\n\t}\n\tpublic isDifferent(): boolean {\n\t\treturn this._isDifferent\n\t}\n\t\n\tpublic createJson(options?: TranslatableJsonCreatorOptions): Record<string, JsonTypes> {\n\t\tconst record: Record<string, JsonTypes> = {}\n\t\t\n\t\toptions = options ?? {}\n\t\tfor(let key in this.valueIndex) {\n\t\t\tconst value = this.valueIndex[key].createJson(options)\n\t\t\tif(options?.dontFilterDefaults || !this.generalDefaultValues.hasOwnProperty(key) || this.generalDefaultValues[key] != value)\n\t\t\t\trecord[key] = value\n\t\t}\n\t\treturn record\n\t}\n\t\n\t/**\n\t * Should not be used\n\t * @deprecated\n\t */\n\tget(): any {\n\t\treturn this\n\t}\n\t/**\n\t * Should not be used\n\t * @deprecated\n\t */\n\tpublic set(_value: any): void {\n\t\tthrow new Error(\"Not supported\")\n\t}\n\t\n\tpublic addLanguage(langCode: string, langData?: Record<string, JsonTypes>): void {\n\t\tfor(let key in this.valueIndex) {\n\t\t\tconst obs = this.valueIndex[key]\n\t\t\tif(this.isTranslatable(obs))\n\t\t\t\tobs.addLanguage(langCode, langData && langData.hasOwnProperty(key) ? langData[key] : undefined)\n\t\t}\n\t}\n\tpublic renameLanguage(oldLangCode: string, newLangCode: string): void {\n\t\tfor(let key in this.valueIndex) {\n\t\t\tconst obs = this.valueIndex[key]\n\t\t\tif(this.isTranslatable(obs))\n\t\t\t\tobs.renameLanguage(oldLangCode, newLangCode)\n\t\t}\n\t}\n\tpublic removeLanguage(langCode: string): void {\n\t\tfor(let key in this.valueIndex) {\n\t\t\tconst obs = this.valueIndex[key]\n\t\t\tif(this.isTranslatable(obs))\n\t\t\t\tobs.removeLanguage(langCode)\n\t\t}\n\t\tthis.reCalcIsDifferent()\n\t}\n\t\n\tpublic updateKeyName(keyName?: string, parent?: BaseObservable<ObservableTypes> | undefined): void {\n\t\tsuper.updateKeyName(keyName, parent)\n\t\tfor(let key in this.valueIndex) {\n\t\t\tthis.valueIndex[key].updateKeyName()\n\t\t}\n\t}\n\t\n\tprotected primitive<T extends PrimitiveType>(key: string, defaultValue: T): BaseObservable<T> {\n\t\tconst obs = new ObservablePrimitive(this.initJson.hasOwnProperty(key) ? this.initJson[key] as T : defaultValue, this, key)\n\t\t\n\t\tthis.generalDefaultValues[key] = defaultValue\n\t\tthis.valueIndex[key] = obs\n\t\treturn obs\n\t}\n\tprotected primitiveArray<T extends PrimitiveType>(key: string, defaultValue: T[] = []): ObservableArray<T, BaseObservable<T>> {\n\t\tconst value = this.initJson.hasOwnProperty(key) ? this.initJson[key] as T[] : defaultValue\n\t\tconst obs = new ObservableArray<T, BaseObservable<T>>(value, this, key, (data, parent, childKey) => {\n\t\t\treturn new ObservablePrimitive<T>(data, parent, childKey)\n\t\t})\n\t\t\n\t\tthis.generalDefaultValues[key] = defaultValue\n\t\tthis.valueIndex[key] = obs\n\t\treturn obs\n\t}\n\t\n\tprotected translatable(key: string, defaultValue: string): BaseObservable<string> {\n\t\tconst obs = new TranslatablePrimitive(this.initJson.hasOwnProperty(key) ? this.initJson[key] as string : defaultValue, this, key)\n\t\t\n\t\tthis.generalDefaultValues[key] = defaultValue\n\t\tthis.valueIndex[key] = obs\n\t\treturn obs\n\t}\n\tprotected translatableArray(key: string, defaultValue: string[] = []): TranslatableArray<string, BaseTranslatable<string>> {\n\t\tconst value = this.initJson.hasOwnProperty(key) ? this.initJson[key] as string[] : defaultValue\n\t\tconst obs = new TranslatableArray<string, TranslatablePrimitive<string>>(value, this, key, (data, parent, childKey) => {\n\t\t\treturn new TranslatablePrimitive<string>(data, parent, childKey)\n\t\t})\n\t\tthis.generalDefaultValues[key] = defaultValue\n\t\tthis.valueIndex[key] = obs\n\t\treturn obs\n\t}\n\t\n\tprotected objectArray<T extends ObservableStructure>(\n\t\tkey: string,\n\t\ttypeConstructor: { new(data: ObservableStructureDataType, parent: BaseObservable<ObservableTypes> | null, key: string, newLang?: string): T ;}\n\t): TranslatableArray<ObservableStructureDataType, T> {\n\t\tconst obs = new TranslatableArray<ObservableStructureDataType, T>(\n\t\t\tthis.initJson.hasOwnProperty(key) ? this.initJson[key] as ObservableStructureDataType[] : [],\n\t\t\tthis,\n\t\t\tkey,\n\t\t\t(data, parent, childKey) => {\n\t\t\t\treturn new typeConstructor(data, parent, childKey)\n\t\t\t}\n\t\t)\n\t\tthis.valueIndex[key] = obs\n\t\treturn obs\n\t}\n\tprotected object<T extends ObservableStructure>(\n\t\tkey: string,\n\t\ttypeConstructor: { new(data: ObservableStructureDataType, parent: BaseObservable<ObservableTypes> | null, key: string, newLang?: string): T ;}\n\t): T {\n\t\tconst obs = new typeConstructor(this.initJson.hasOwnProperty(key) ? this.initJson[key] as ObservableStructureDataType : {}, this, key)\n\t\tthis.valueIndex[key] = obs\n\t\treturn obs\n\t}\n}","import {ObservableStructure} from \"../../observable/ObservableStructure\";\nimport {JsonTypes} from \"../../observable/types/JsonTypes\";\n\nexport class Conditions extends ObservableStructure {\n\tpublic key\t\t\t\t\t= this.primitive<string>(\t\t\"key\",\t\t\t\t\"\")\n\tpublic value\t\t\t\t= this.primitive<string>(\t\t\"value\",\t\t\t\"\")\n\tpublic operator\t\t\t\t= this.primitive<number>(\t\t\"operator\",\t\t0)\n\t\n\tpublic static createDataStructure(key: string, value: string, operator: number): Record<string, JsonTypes> {\n\t\treturn {\n\t\t\tkey: key,\n\t\t\tvalue: value,\n\t\t\toperator: operator\n\t\t}\n\t}\n}","import {ObservableStructure} from \"../../observable/ObservableStructure\";\nimport {CONDITION_TYPE_ALL} from \"../../constants/statistics\";\nimport {Conditions} from \"./Conditions\";\n\nexport class AxisData extends ObservableStructure {\n\tpublic variableName\t\t\t\t\t\t= this.primitive<string>(\t\t\"variableName\",\t\t\t\"\")\n\tpublic observedVariableIndex\t\t\t= this.primitive<number>(\t\t\"observedVariableIndex\",\t0)\n\tpublic conditionType\t\t\t\t\t= this.primitive<number>(\t\t\"conditionType\",\t\t\tCONDITION_TYPE_ALL)\n\t\n\tpublic conditions\t\t\t\t\t\t= this.objectArray(\t\t\t\t\"conditions\", Conditions)\n}","import {Lang} from \"./Lang\";\n\n\nexport interface RequestType {\n\tget: string\n\tpost: string\n}\n\nexport const Requests = {\n\tloadRaw(url: string, type: keyof RequestType = \"get\", requestData: string = \"\"): Promise<string> {\n\t\treturn new Promise<XMLHttpRequest>((resolve) => {\n\t\t\tconst r = new XMLHttpRequest()\n\t\t\tif(!r)\n\t\t\t\tthrow new Error(Lang.get(\"error_create_request_failed\"))\n\t\t\t\n\t\t\tr.open(type, url)\n\t\t\tif(type == \"post\")\n\t\t\t\tr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\t\t\t\n\t\t\tr.onreadystatechange = function() {\n\t\t\t\tif(r.readyState !== 4)\n\t\t\t\t\treturn false\n\t\t\t\tresolve(r)\n\t\t\t}\n\t\t\tr.send(requestData)\n\t\t}).then((r) => {\n\t\t\tif(r.status !== 200) {\n\t\t\t\tconsole.error(r)\n\t\t\t\tthrow new Error(Lang.get(\"error_connection_failed\"))\n\t\t\t}\n\t\t\treturn r.responseText\n\t\t})\n\t},\n\tloadJson(url: string, type: keyof RequestType = \"get\", requestData: string = \"\"): Promise<any> {\n\t\treturn this.loadRaw(url, type, requestData)\n\t\t\t.then((response) => {\n\t\t\t\tconst obj = JSON.parse(response)\n\t\t\t\t\n\t\t\t\tif(obj.success)\n\t\t\t\t\treturn obj.dataset\n\t\t\t\telse\n\t\t\t\t\tthrow Lang.get(\"error_from_server\", obj.error || response)\n\t\t\t})\n\t}\n}","import fallbackLang from \"../../../locales/en.json\";\nimport {Requests} from \"./Requests\";\n\nlet promise: Promise<boolean> = Promise.resolve(false)\nlet langRecord: Record<string, string> = {}\n\nexport type LangKey = keyof typeof fallbackLang\n\nexport const Lang = {\n\tcode: \"en\",\n\tisInit: false,\n\tinit(langCode: string, packageVersion: string): void {\n\t\tthis.code = langCode\n\t\tif(langCode == \"en\") {\n\t\t\tpromise = Promise.resolve(true)\n\t\t\treturn\n\t\t}\n\t\tpromise = Requests.loadRaw(`locales/${langCode}.json?v=${packageVersion}`)\n\t\t\t.then((jsonString) => {\n\t\t\t\tthis.isInit = true\n\t\t\t\tlangRecord = JSON.parse(jsonString)\n\t\t\t\treturn true\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconsole.error(e)\n\t\t\t\treturn false\n\t\t\t});\n\t},\n\tawaitPromise(): Promise<boolean> {\n\t\treturn promise\n\t},\n\tgetDynamic: function(key: string): string {\n\t\treturn this.get(key as keyof typeof fallbackLang)\n\t},\n\tget: function(key: LangKey, ... replacers: Array<string | number>): string {\n\t\tlet value\n\t\tif(langRecord.hasOwnProperty(key))\n\t\t\tvalue = langRecord[key]\n\t\telse if(fallbackLang.hasOwnProperty(key))\n\t\t\tvalue = fallbackLang[key]\n\t\telse {\n\t\t\tlangRecord[key] = key\n\t\t\tconsole.error(`Lang: ${key} does not exist`)\n\t\t\treturn key\n\t\t}\n\t\t\n\t\tif(replacers.length) {\n\t\t\tfor(const replace of replacers) {\n\t\t\t\tlet search\n\t\t\t\tswitch(typeof replace) {\n\t\t\t\t\tcase \"number\":\n\t\t\t\t\t\tsearch = \"%d\"\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\tsearch = \"%s\"\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvalue = value.replace(search, replace?.toString() ?? \"\")\n\t\t\t}\n\t\t\treturn value\n\t\t}\n\t\telse\n\t\t\treturn value\n\t},\n\tgetWithColon: function(key: LangKey, ... replacers: Array<string | number>): string {\n\t\treturn Lang.get(\"colon\", Lang.get(key, ...replacers))\n\t}\n}","import {StatisticsCollection} from \"../data/statistics/StatisticsCollection\";\nimport {ChartData} from \"../data/study/ChartData\";\nimport {\n\tChart,\n\tArcElement,\n\tBarController,\n\tBarElement,\n\tBubbleController,\n\tCategoryScale,\n\tDecimation,\n\tDoughnutController,\n\tFiller,\n\tLegend,\n\tLinearScale,\n\tLineController,\n\tLineElement,\n\tLogarithmicScale,\n\tPieController,\n\tPointElement,\n\tPolarAreaController,\n\tRadarController,\n\tRadialLinearScale,\n\tScatterController,\n\tTimeScale,\n\tTimeSeriesScale,\n\tTitle,\n\tTooltip,\n\tChartDataset,\n\tChartOptions, ChartType, Plugin\n} from \"chart.js/auto\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nimport {\n\tSTATISTICS_CHARTTYPES_BARS,\n\tSTATISTICS_CHARTTYPES_LINE,\n\tSTATISTICS_CHARTTYPES_LINE_FILLED,\n\tSTATISTICS_CHARTTYPES_PIE,\n\tSTATISTICS_CHARTTYPES_SCATTER,\n\tSTATISTICS_DATATYPES_DAILY,\n\tSTATISTICS_DATATYPES_FREQ_DISTR,\n\tSTATISTICS_DATATYPES_SUM,\n\tSTATISTICS_DATATYPES_XY, STATISTICS_VALUETYPES_COUNT,\n\tSTATISTICS_VALUETYPES_MEAN, STATISTICS_VALUETYPES_SUM\n} from \"../constants/statistics\";\nimport {AxisContainer} from \"../data/study/AxisContainer\";\nimport {StatisticsEntryPerData, StatisticsEntryPerValue, StatisticsEntryTimed} from \"../data/statistics/StatisticsDataRecord\";\nimport {Lang} from \"../singletons/Lang\";\nimport {StatisticsDataEntry} from \"../data/statistics/StatisticsDataEntry\";\nimport {Point} from \"chart.js/dist/types/geometric\";\n\nconst ONE_DAY = 86400 //in seconds: 60*60*24\nconst BACKGROUND_ALPHA = 0.7\nconst CHART_MIN_ENTRY_WIDTH = 35\nconst MAX_VARIABLE_LABEL_LENGTH = 30\nexport const CHART_COLORS = [\n\t//Thanks to: https://sashamaps.net/docs/resources/20-colors/\n\t'#e6194B',\n\t'#f58231',\n\t'#ffe119',\n\t'#bfef45',\n\t'#3cb44b',\n\t'#42d4f4',\n\t'#4363d8',\n\t'#911eb4',\n\t'#f032e6',\n\t'#a9a9a9',\n\t\n\t'#fabed4',\n\t'#ffd8b1',\n\t'#fffac8',\n\t'#aaffc3',\n\t'#dcbeff',\n\t'#ffffff',\n\t\n\t'#800000',\n\t'#9A6324',\n\t'#808000',\n\t'#469990',\n\t'#000075',\n\t'#000000',\n]\nexport function getChartColor(i: number): string {\n\treturn CHART_COLORS[i % CHART_COLORS.length]\n}\n\nlet isRegistered = false\nfunction registerChart(): void {\n\tChart.register(\n\t\tArcElement,\n\t\tLineElement,\n\t\tBarElement,\n\t\tPointElement,\n\t\tBarController,\n\t\tBubbleController,\n\t\tDoughnutController,\n\t\tLineController,\n\t\tPieController,\n\t\tPolarAreaController,\n\t\tRadarController,\n\t\tScatterController,\n\t\tCategoryScale,\n\t\tLinearScale,\n\t\tLogarithmicScale,\n\t\tRadialLinearScale,\n\t\tTimeScale,\n\t\tTimeSeriesScale,\n\t\tDecimation,\n\t\tFiller,\n\t\tLegend,\n\t\tTitle,\n\t\tTooltip\n\t)\n\tChart.register(ChartDataLabels)\n}\n\ntype DataPoint = (number | null | Point)[]\n\nexport class ChartJsBox {\n\tprivate chartJs?: Chart\n\tprivate readonly chart: ChartData\n\tprivate readonly optionFill: string\n\tprivate readonly forScatterPlot: boolean\n\t\n\tconstructor(parentView: HTMLElement, personalStatistics: StatisticsCollection, publicStatistics: StatisticsCollection, chart: ChartData, noSort: boolean = false) {\n\t\tif(!isRegistered) {\n\t\t\tregisterChart()\n\t\t\tisRegistered = true\n\t\t}\n\t\tconst chartType = chart.chartType.get()\n\t\tconst dataType = chart.dataType.get()\n\t\t\n\t\t\n\t\tthis.chart = chart\n\t\tthis.optionFill = this.getOptionFill(chartType)\n\t\tthis.forScatterPlot = this.getForScatterPlot(chartType)\n\t\t\n\t\tlet dataSetCreator: DataSetCreator\n\t\tlet datasets: ChartDataset[]\n\t\ttry {\n\t\t\tdataSetCreator = this.getDataSetCreator(dataType, noSort)\n\t\t\tdatasets = dataSetCreator.create(personalStatistics, publicStatistics)\n\t\t}\n\t\tcatch(e) {\n\t\t\tconsole.error(e)\n\t\t\tconst errorView = document.createElement(\"div\")\n\t\t\terrorView.classList.add(\"spacingTop\")\n\t\t\terrorView.classList.add(\"spacingBottom\")\n\t\t\terrorView.innerText = Lang.get(\"error_faulty_chart\")\n\t\t\tparentView.append(errorView)\n\t\t\treturn\n\t\t}\n\t\t\n\t\t//create chart:\n\t\tif(chart.title.get().length) {\n\t\t\tconst titleView = document.createElement(\"h2\")\n\t\t\ttitleView.innerText = chart.title.get()\n\t\t\ttitleView.classList.add(\"center\")\n\t\t\tparentView.appendChild(titleView)\n\t\t}\n\t\tif(chart.chartDescription.get().length) {\n\t\t\tconst descView = document.createElement(\"p\")\n\t\t\tdescView.innerHTML = chart.chartDescription.get()\n\t\t\tparentView.appendChild(descView)\n\t\t}\n\t\t\n\t\t\n\t\tconst scrollable = chartType !== STATISTICS_CHARTTYPES_PIE && dataType !== STATISTICS_DATATYPES_XY && parentView.clientWidth / dataSetCreator.labels.length < CHART_MIN_ENTRY_WIDTH\n\t\tconst width = scrollable ? `${dataSetCreator.labels.length*CHART_MIN_ENTRY_WIDTH}px` : \"100%\"\n\t\t\n\t\t\n\t\tconst windowView = document.createElement(\"div\")\n\t\twindowView.classList.add(\"chartWindow\")\n\t\t\n\t\tconst legendView = document.createElement(\"div\")\n\t\tlegendView.classList.add(\"legend\")\n\t\t\n\t\tconst scrollView = document.createElement(\"div\")\n\t\tscrollView.classList.add(\"scrollEl\")\n\t\tif(chartType === STATISTICS_CHARTTYPES_PIE)\n\t\t\tscrollView.classList.add(\"pie\")\n\t\t\n\t\tconst chartView = document.createElement(\"div\")\n\t\tchartView.style.cssText = `width: ${width}`\n\t\tchartView.classList.add(\"chartEl\")\n\t\t\n\t\tconst canvas = document.createElement(\"canvas\")\n\t\tcanvas.style.cssText = `height: 200px; width: ${width}`\n\t\t\n\t\t\n\t\tchartView.appendChild(canvas)\n\t\tscrollView.appendChild(chartView)\n\t\twindowView.appendChild(legendView)\n\t\twindowView.appendChild(scrollView)\n\t\tparentView.appendChild(windowView)\n\t\t\n\t\tif(scrollable)\n\t\t\tchartView.classList.add(\"scrollable\")\n\t\t\n\t\tthis.chartJs = new Chart(canvas.getContext('2d') as CanvasRenderingContext2D, {\n\t\t\ttype: this.getChartJsType(chartType),\n\t\t\tdata: {\n\t\t\t\tlabels: dataSetCreator.labels,\n\t\t\t\tdatasets: datasets\n\t\t\t},\n\t\t\toptions: this.getChartOptions(chartType, datasets, chart.inPercent.get()),\n\t\t\tplugins: this.getChartPlugins(legendView)\n\t\t})\n\t}\n\t\n\tprivate getOptionFill(chartType: number): string {\n\t\treturn chartType == STATISTICS_CHARTTYPES_LINE_FILLED ? \"origin\" : \"\"\n\t}\n\tprivate getForScatterPlot(chartType: number): boolean {\n\t\treturn chartType == STATISTICS_CHARTTYPES_SCATTER\n\t}\n\t\n\tprivate getChartJsType(chartType: number): ChartType {\n\t\tswitch(chartType) {\n\t\t\tcase STATISTICS_CHARTTYPES_LINE_FILLED:\n\t\t\tcase STATISTICS_CHARTTYPES_LINE:\n\t\t\t\tChart.defaults.elements.line.spanGaps = true\n\t\t\t\treturn \"line\"\n\t\t\tcase STATISTICS_CHARTTYPES_SCATTER:\n\t\t\t\treturn \"scatter\"\n\t\t\tcase STATISTICS_CHARTTYPES_PIE:\n\t\t\t\treturn \"pie\"\n\t\t\tcase STATISTICS_CHARTTYPES_BARS:\n\t\t\tdefault:\n\t\t\t\treturn \"bar\"\n\t\t}\n\t}\n\t\n\tprivate getDataSetCreator(dataType: number, noSort: boolean = false): DataSetCreator {\n\t\tswitch(dataType) {\n\t\t\tcase STATISTICS_DATATYPES_DAILY:\n\t\t\t\treturn new DailyDataSetCreator(this.chart, this.forScatterPlot, this.optionFill)\n\t\t\tcase STATISTICS_DATATYPES_FREQ_DISTR:\n\t\t\t\treturn new FreqDistrDataSetCreator(this.chart, this.forScatterPlot, this.optionFill, noSort)\n\t\t\tcase STATISTICS_DATATYPES_SUM:\n\t\t\t\treturn new SumDataSetCreator(this.chart, this.forScatterPlot, this.optionFill)\n\t\t\tcase STATISTICS_DATATYPES_XY:\n\t\t\t\treturn new XyDataSetCreator(this.chart, this.forScatterPlot, this.optionFill)\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown data type: ${dataType}`)\n\t\t}\n\t}\n\t\n\tprivate getChartPlugins(legendView: HTMLElement): Plugin[] {\n\t\treturn [{ //legend\n\t\t\tid: \"legend\",\n\t\t\tafterUpdate: function(chartJs) {\n\t\t\t\twhile(legendView.hasChildNodes()) {\n\t\t\t\t\tlegendView.removeChild(legendView.firstElementChild!)\n\t\t\t\t}\n\t\t\t\tconst legendPlugin = chartJs.options.plugins?.legend?.labels\n\t\t\t\tif(!legendPlugin || !legendPlugin.generateLabels)\n\t\t\t\t\treturn\n\t\t\t\tconst legendItems = legendPlugin.generateLabels(chartJs);\n\t\t\t\tfor(const item of legendItems) {\n\t\t\t\t\tif(item.text == undefined || item.text == \"\")\n\t\t\t\t\t\tcontinue\n\t\t\t\t\tconst line = document.createElement(\"div\");\n\t\t\t\t\tline.classList.add(\"line\")\n\t\t\t\t\t\n\t\t\t\t\tconst span = document.createElement(\"span\");\n\t\t\t\t\tspan.style.cssText = `background-color: ${item.fillStyle}`\n\t\t\t\t\tspan.classList.add(\"colorRect\")\n\t\t\t\t\t\n\t\t\t\t\tconst small = document.createElement(\"small\");\n\t\t\t\t\tsmall.innerText = item.text\n\t\t\t\t\t\n\t\t\t\t\tline.appendChild(span)\n\t\t\t\t\tline.appendChild(small)\n\t\t\t\t\tlegendView.appendChild(line);\n\t\t\t\t}\n\t\t\t}\n\t\t}]\n\t}\n\t\n\tprivate getChartOptions(chartType: number, dataSets: ChartDataset[], inPercent: boolean): ChartOptions {\n\t\tlet verticalPadding = chartType === STATISTICS_CHARTTYPES_PIE ? 40 : 0;\n\t\treturn {\n\t\t\tlayout: {\n\t\t\t\tpadding: {\n\t\t\t\t\tleft: verticalPadding,\n\t\t\t\t\tright: verticalPadding,\n\t\t\t\t\ttop: 20,\n\t\t\t\t\tbottom: verticalPadding\n\t\t\t\t}\n\t\t\t},\n\t\t\tresponsive: true,\n\t\t\tscales: {\n\t\t\t\ty: {\n\t\t\t\t\tdisplay: chartType === STATISTICS_CHARTTYPES_SCATTER\n\t\t\t\t}\n\t\t\t},\n\t\t\tplugins: {\n\t\t\t\tlegend: {\n\t\t\t\t\tdisplay: false\n\t\t\t\t},\n\t\t\t\tdatalabels: {\n\t\t\t\t\tanchor: \"end\",\n\t\t\t\t\talign: \"end\",\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tdisplay: chartType === STATISTICS_CHARTTYPES_SCATTER ? false : ({datasetIndex, dataIndex}) => {\n\t\t\t\t\t\treturn dataSets[datasetIndex].data[dataIndex] !== 0 ? \"auto\" : false\n\t\t\t\t\t},\n\t\t\t\t\tformatter: inPercent ? (value) => { return `${value}%` } : undefined\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nabstract class DataSetCreator {\n\tprotected chart: ChartData\n\tpublic readonly labels: string[] = []\n\tpublic readonly dataSets: ChartDataset[] = []\n\tprotected forScatterPlot: boolean\n\tprotected optionFill: string\n\t\n\tconstructor(chart: ChartData, forScatterPlot: boolean = false, optionFill: string = \"\") {\n\t\tthis.chart = chart\n\t\tthis.forScatterPlot = forScatterPlot\n\t\tthis.optionFill = optionFill\n\t}\n\tprotected createDataSet(label: string, data: DataPoint, color: string): ChartDataset {\n\t\tlet backgroundColor: string[] | string\n\t\tlet borderColor: string[] | string\n\t\t\n\t\tif(this.chart.chartType.get() === STATISTICS_CHARTTYPES_PIE && data.length > 1) {\n\t\t\tbackgroundColor = []\n\t\t\tborderColor = []\n\t\t\tfor(let i=0, max=this.labels.length; i<max; ++i) {\n\t\t\t\tconst currentColor = getChartColor(i)\n\t\t\t\t\n\t\t\t\tbackgroundColor.push(this.hexToRGB(currentColor, BACKGROUND_ALPHA))\n\t\t\t\tborderColor.push(currentColor)\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tbackgroundColor = this.hexToRGB(color, BACKGROUND_ALPHA);\n\t\t\tborderColor = this.hexToRGB(color, 1)\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tlabel: label,\n\t\t\tdata: data,\n\t\t\tbackgroundColor: backgroundColor,\n\t\t\tborderColor: borderColor,\n\t\t\tborderWidth: 1,\n\t\t\tfill: this.optionFill,\n\t\t}\n\t}\n\t\n\tprotected hexToRGB(hex: string, alpha: number): string {\n\t\tconst r = parseInt(hex.slice(1, 3), 16)\n\t\tconst g = parseInt(hex.slice(3, 5), 16)\n\t\tconst b = parseInt(hex.slice(5, 7), 16)\n\t\treturn `rgba(${r}, ${g}, ${b}, ${alpha})`\n\t}\n\t\n\tabstract create(personalStatistics: StatisticsCollection, publicStatistics: StatisticsCollection): ChartDataset[]\n}\n\nclass DailyDataSetCreator extends DataSetCreator {\n\tprivate firstDay: number = Number.MAX_VALUE\n\tprivate lastDay: number = 0\n\t\n\tprivate setFirstAndLastDay(axisContainerArray: AxisContainer[], statistics: StatisticsCollection): void {\n\t\tfor(const axisContainer of axisContainerArray) {\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\tconst variableName = yAxis.variableName.get()\n\t\t\t\n\t\t\tif(!statistics.hasOwnProperty(variableName) || !statistics[variableName][yAxis.observedVariableIndex.get()])\n\t\t\t\tcontinue\n\t\t\t\n\t\t\tconst rawYData = statistics[variableName][yAxis.observedVariableIndex.get()].data as StatisticsEntryTimed\n\t\t\tif(!rawYData)\n\t\t\t\tcontinue\n\t\t\tconst keys = Object.keys(rawYData).sort() //should be sorted already but lets make sure\n\t\t\t\n\t\t\tif(parseInt(keys[0]) < this.firstDay)\n\t\t\t\tthis.firstDay = parseInt(keys[0])\n\t\t\tconst lastValue = keys[keys.length - 1]\n\t\t\tif(parseInt(lastValue) > this.lastDay)\n\t\t\t\tthis.lastDay = parseInt(lastValue)\n\t\t}\n\t}\n\t\n\tprivate getYValue(valueType: number, rawY: StatisticsDataEntry) : number | null {\n\t\tswitch(valueType) {\n\t\t\tcase STATISTICS_VALUETYPES_MEAN:\n\t\t\t\treturn rawY === undefined ? null : Math.round(rawY.sum / rawY.count * 100)/100\n\t\t\tcase STATISTICS_VALUETYPES_SUM:\n\t\t\t\treturn rawY === undefined ? null : rawY.sum\n\t\t\tcase STATISTICS_VALUETYPES_COUNT:\n\t\t\t\treturn rawY === undefined ? null : rawY.count\n\t\t}\n\t\treturn 0\n\t}\n\tprivate addVars(containerArray: AxisContainer[], statistics: StatisticsCollection): void {\n\t\tconst valueType = this.chart.valueType.get()\n\t\tfor(const axisContainer of containerArray) {\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\tconst variableName = yAxis.variableName.get()\n\t\t\tconst rawYData = statistics[variableName][yAxis.observedVariableIndex.get()].data as StatisticsEntryTimed\n\t\t\tconst data: DataPoint = []\n\t\t\t\n\t\t\tfor(let current_day=this.firstDay, i=0; current_day<=this.lastDay; current_day+=ONE_DAY, ++i) {\n\t\t\t\tconst yValue = this.getYValue(valueType, rawYData[current_day])\n\n\t\t\t\tif(this.forScatterPlot) {\n\t\t\t\t\tif(yValue !== null)\n\t\t\t\t\t\tdata.push({x: i, y: yValue});\n\t\t\t\t} else\n\t\t\t\t\tdata.push(yValue)\n\t\t\t}\n\t\t\t\n\t\t\tthis.dataSets.push(this.createDataSet(\n\t\t\t\taxisContainer.label.get(),\n\t\t\t\tdata,\n\t\t\t\taxisContainer.color.get()\n\t\t\t));\n\t\t}\n\t}\n\tpublic create(personalStatistics: StatisticsCollection, publicStatistics: StatisticsCollection): ChartDataset[] {\n\t\tthis.setFirstAndLastDay(this.chart.axisContainer.get(), personalStatistics)\n\t\tif(this.chart.displayPublicVariable.get())\n\t\t\tthis.setFirstAndLastDay(this.chart.publicVariables.get(), publicStatistics)\n\t\t\n\t\t//create data array:\n\t\tthis.addVars(this.chart.axisContainer.get(), personalStatistics)\n\t\tif(this.chart.displayPublicVariable.get())\n\t\t\tthis.addVars(this.chart.publicVariables.get(), publicStatistics)\n\t\t\n\t\t\n\t\t//create labels:\n\t\tconst now = Date.now() / 1000\n\t\tconst cutoffToday = now - ONE_DAY\n\t\tconst cutoffYesterday = cutoffToday - ONE_DAY\n\t\tconst cutoffWeek = now - (ONE_DAY*7)\n\t\tfor(let i=this.firstDay; i<=this.lastDay; i+=ONE_DAY) {\n\t\t\tif(i < cutoffWeek)\n\t\t\t\tthis.labels.push(new Date(i*1000).toLocaleDateString())\n\t\t\telse if(i < cutoffYesterday)\n\t\t\t\tthis.labels.push(Lang.get(\"x_days_ago\", Math.floor((now - i) / ONE_DAY)))\n\t\t\telse if(i < cutoffToday)\n\t\t\t\tthis.labels.push(Lang.get(\"yesterday\"))\n\t\t\telse\n\t\t\t\tthis.labels.push(Lang.get(\"today\"))\n\t\t}\n\t\treturn this.dataSets\n\t}\n}\n\nclass SumDataSetCreator extends DataSetCreator {\n\tprivate dataPoint: DataPoint = []\n\tprivate backgroundColor: string[] = []\n\tprivate borderColors: string[] = []\n\t\n\tprivate getXValue(valueType: number, rawY: StatisticsEntryTimed) : number {\n\t\tlet num = 0\n\t\tswitch(valueType) {\n\t\t\tcase STATISTICS_VALUETYPES_MEAN:\n\t\t\t\tlet count = 0\n\t\t\t\tfor(const day in rawY) {\n\t\t\t\t\tconst statistic = rawY[day]\n\t\t\t\t\tcount += statistic.count\n\t\t\t\t\tnum += statistic.sum\n\t\t\t\t}\n\t\t\t\tif(count)\n\t\t\t\t\treturn Math.round((num / count) * 100) / 100\n\t\t\t\telse\n\t\t\t\t\treturn 0\n\t\t\tcase STATISTICS_VALUETYPES_SUM:\n\t\t\t\tfor(const day in rawY) {\n\t\t\t\t\tconst statistic = rawY[day]\n\t\t\t\t\tnum += statistic.sum\n\t\t\t\t}\n\t\t\t\treturn num\n\t\t\tcase STATISTICS_VALUETYPES_COUNT:\n\t\t\t\tfor(const day in rawY) {\n\t\t\t\t\tconst statistic = rawY[day]\n\t\t\t\t\tnum += statistic.count\n\t\t\t\t}\n\t\t\t\treturn num\n\t\t}\n\t\treturn 0\n\t}\n\t\n\tprivate addVars(containerArray: AxisContainer[], statistics: StatisticsCollection): void {\n\t\tconst valueType = this.chart.valueType.get()\n\t\t\n\t\tcontainerArray.forEach((axisContainer, index) => {\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\tconst variableName = yAxis.variableName.get()\n\t\t\tif(!statistics.hasOwnProperty(variableName))\n\t\t\t\treturn\n\t\t\tconst rawData = statistics[variableName][yAxis.observedVariableIndex.get()].data as StatisticsEntryTimed\n\t\t\tconst num = this.getXValue(valueType, rawData)\n\t\t\t\n\t\t\tif(this.forScatterPlot)\n\t\t\t\tthis.dataPoint.push({ x: index, y: num })\n\t\t\telse\n\t\t\t\tthis.dataPoint.push(num)\n\t\t\t\n\t\t\tthis.backgroundColor.push(this.hexToRGB(axisContainer.color.get(), 0.5))\n\t\t\tthis.borderColors.push(this.hexToRGB(axisContainer.color.get(), 1))\n\t\t\tthis.labels.push(axisContainer.label.get())\n\t\t})\n\t}\n\t\n\tpublic create(personalStatistics: StatisticsCollection, publicStatistics: StatisticsCollection): ChartDataset[] {\n\t\tthis.addVars(this.chart.axisContainer.get(), personalStatistics);\n\t\tif(this.chart.displayPublicVariable.get())\n\t\t\tthis.addVars(this.chart.publicVariables.get(), publicStatistics);\n\t\t\n\t\treturn [{\n\t\t\tdata: this.dataPoint,\n\t\t\tbackgroundColor: this.backgroundColor,\n\t\t\tborderColor: this.borderColors,\n\t\t\tborderWidth: 1,\n\t\t\tfill: this.optionFill\n\t\t}]\n\t}\n}\nclass FreqDistrDataSetCreator extends DataSetCreator {\n\tprivate labelsIndex: Record<string, boolean> = {}\n\tprivate readonly noSort: boolean = false\n\t\n\tconstructor(chart: ChartData, forScatterPlot: boolean = false, optionFill: string = \"\", noSort: boolean = false) {\n\t\tsuper(chart, forScatterPlot, optionFill)\n\t\tthis.noSort = noSort\n\t}\n\t\n\t\n\tprivate createNumData(rawData: StatisticsEntryPerValue, xValue: number, xMin: number, xMax: number, inPercent: boolean): DataPoint {\n\t\tconst data: DataPoint = []\n\t\tif(inPercent) {\n\t\t\tlet sum = 0\n\t\t\tfor(let i=xMin; i <= xMax; ++i) {\n\t\t\t\tsum += rawData[i] ?? 0\n\t\t\t}\n\t\t\tfor(let i=xMin; i <= xMax; ++i) {\n\t\t\t\tconst value = rawData.hasOwnProperty(i) ? Math.round(100 / (sum / rawData[i])) : 0\n\t\t\t\tdata.push(this.forScatterPlot\n\t\t\t\t\t? {x: xValue, y: value}\n\t\t\t\t\t: value\n\t\t\t\t)\n\t\t\t\tthis.labels.push(i.toString())\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(let i=xMin; i <= xMax; ++i) {\n\t\t\t\tdata.push(this.forScatterPlot\n\t\t\t\t\t? {x: xValue, y: rawData[i]}\n\t\t\t\t\t: rawData[i]\n\t\t\t\t)\n\t\t\t\tthis.labels.push(i.toString())\n\t\t\t}\n\t\t}\n\t\treturn data\n\t}\n\tprivate addNumVar(rawData: StatisticsEntryPerValue, axisContainer: AxisContainer, xValue: number, inPercent: boolean): void {\n\t\tlet xMin = Number.MAX_SAFE_INTEGER\n\t\tlet xMax = Number.MIN_SAFE_INTEGER\n\t\t\n\t\tfor(const key in rawData) {\n\t\t\tconst num = parseInt(key);\n\t\t\tif(isNaN(num))\n\t\t\t\tcontinue\n\t\t\tif(num < xMin)\n\t\t\t\txMin = num\n\t\t\telse if(num > xMax)\n\t\t\t\txMax = num\n\t\t}\n\t\tif(xMax == Number.MIN_SAFE_INTEGER) //happens when there is only one entry\n\t\t\txMax = xMin\n\t\t\n\t\tconst data: DataPoint = xMin != Number.MAX_SAFE_INTEGER\n\t\t\t? this.createNumData(rawData, xValue, xMin, xMax, inPercent)\n\t\t\t: []\n\t\t\n\t\tthis.dataSets.push(this.createDataSet(\n\t\t\taxisContainer.label.get(),\n\t\t\tdata,\n\t\t\taxisContainer.color.get()\n\t\t))\n\t}\n\tprivate addNumVars(containerArray: AxisContainer[], statistics: StatisticsCollection, inPercent: boolean): void {\n\t\tfor(let i=containerArray.length-1; i>=0; --i) {\n\t\t\tconst axisContainer = containerArray[i]\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\tconst variableName = yAxis.variableName.get()\n\t\t\tif(!statistics.hasOwnProperty(variableName) || yAxis.observedVariableIndex.get() == -1)\n\t\t\t\tcontinue\n\t\t\tconst rawData = statistics[variableName][yAxis.observedVariableIndex.get()].data as StatisticsEntryPerValue\n\t\t\tthis.addNumVar(rawData, axisContainer, i, inPercent)\n\t\t}\n\t}\n\t\n\t\n\tprivate createStringPercentData(rawData: StatisticsEntryPerValue): DataPoint {\n\t\tconst labelsMax = this.labels.length\n\t\tconst data: DataPoint = []\n\t\t\n\t\tlet sum = 0\n\t\tfor(let i=0; i < labelsMax; ++i) {\n\t\t\tsum += rawData[this.labels[i]] ?? 0\n\t\t}\n\t\tfor(let i=0; i < labelsMax; ++i) {\n\t\t\tconst key = this.labels[i]\n\t\t\tconst value = rawData.hasOwnProperty(key) ? Math.round(100 / (sum / rawData[key])) : 0\n\t\t\tdata.push(this.forScatterPlot ? {x: i, y: value} : value)\n\t\t}\n\t\treturn data\n\t}\n\tprivate createStringCountData(rawData: StatisticsEntryPerValue): DataPoint {\n\t\tconst labelsMax = this.labels.length\n\t\tconst data: DataPoint = []\n\t\t\n\t\tfor(let i=0; i < labelsMax; ++i) {\n\t\t\tconst key = this.labels[i]\n\t\t\tconst value = rawData.hasOwnProperty(key) ? rawData[key] : 0\n\t\t\tdata.push(this.forScatterPlot ? {x: i, y: value} : value)\n\t\t}\n\t\treturn data\n\t}\n\tprivate addStringVars(containerArray: AxisContainer[], statistics: StatisticsCollection, inPercent: boolean): void {\n\t\tconst createData = inPercent ? this.createStringPercentData.bind(this) : this.createStringCountData.bind(this)\n\t\t\n\t\tfor(const axisContainer of containerArray) {\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\tconst variableName = yAxis.variableName.get()\n\t\t\tif(!statistics.hasOwnProperty(variableName) || yAxis.observedVariableIndex.get() == -1)\n\t\t\t\tcontinue\n\t\t\t\n\t\t\tconst rawData = statistics[variableName][yAxis.observedVariableIndex.get()].data as StatisticsEntryPerValue\n\t\t\tconst data = createData(rawData)\n\t\t\t\n\t\t\tthis.dataSets.push(this.createDataSet(\n\t\t\t\taxisContainer.label.get(),\n\t\t\t\tdata,\n\t\t\t\taxisContainer.color.get()\n\t\t\t));\n\t\t}\n\t}\n\t\n\tprivate addStringLabels(containerArray: AxisContainer[], statistics: StatisticsCollection): void {\n\t\tfor(const axisContainer of containerArray) {\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\tconst variableName = yAxis.variableName.get()\n\t\t\tif(!statistics.hasOwnProperty(variableName))\n\t\t\t\tcontinue\n\t\t\tif(yAxis.observedVariableIndex.get() == -1)\n\t\t\t\tcontinue\n\t\t\tconst rawData = statistics[variableName][yAxis.observedVariableIndex.get()].data as StatisticsEntryPerValue\n\t\t\t\n\t\t\tfor(const key in rawData) {\n\t\t\t\tif(!rawData.hasOwnProperty(key) || !key.length || this.labelsIndex.hasOwnProperty(key))\n\t\t\t\t\tcontinue\n\t\t\t\t\n\t\t\t\tthis.labelsIndex[key] = true\n\t\t\t\tthis.labels.push(key)\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate sortLabelComparator(a: string, b: string): number {\n\t\tconst r = parseInt(a) - parseInt(b)\n\t\tif(isNaN(r)) {\n\t\t\tconst sa = a.toLowerCase(), sb = b.toLowerCase()\n\t\t\t\n\t\t\tif(sa < sb)\n\t\t\t\treturn -1\n\t\t\telse if(sa == sb)\n\t\t\t\treturn 0\n\t\t\telse\n\t\t\t\treturn 1\n\t\t}\n\t\telse\n\t\t\treturn r\n\t}\n\tpublic create(personalStatistics: StatisticsCollection, publicStatistics: StatisticsCollection): ChartDataset[] {\n\t\tif(this.chart.xAxisIsNumberRange.get()) {\n\t\t\tthis.addNumVars(this.chart.axisContainer.get(), personalStatistics, this.chart.inPercent.get())\n\t\t\tif(this.chart.displayPublicVariable.get())\n\t\t\t\tthis.addNumVars(this.chart.publicVariables.get(), publicStatistics, this.chart.inPercent.get())\n\t\t}\n\t\telse {\n\t\t\t//create labels first, so we know the order to add data in:\n\t\t\t\n\t\t\tthis.addStringLabels(this.chart.axisContainer.get(), personalStatistics)\n\t\t\tif(this.chart.displayPublicVariable.get())\n\t\t\t\tthis.addStringLabels(this.chart.publicVariables.get(), publicStatistics)\n\t\t\t\n\t\t\tif(!this.noSort)\n\t\t\t\tthis.labels.sort(this.sortLabelComparator)\n\t\t\t\n\t\t\tthis.addStringVars(this.chart.axisContainer.get(), personalStatistics, this.chart.inPercent.get())\n\t\t\tif(this.chart.displayPublicVariable.get())\n\t\t\t\tthis.addStringVars(this.chart.publicVariables.get(), publicStatistics, this.chart.inPercent.get())\n\t\t\t\n\t\t\t//we do that last because this.labels is used in addStringVars()\n\t\t\tfor(let i=0; i < this.labels.length; ++i) {\n\t\t\t\tthis.labels[i] = this.labels[i].substring(0, MAX_VARIABLE_LABEL_LENGTH)\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn this.dataSets\n\t}\n}\n\ntype AxisIndexType = {\n\tlabel: string\n\tcolor: string\n\tindex: Record<number, number>\n}\nclass XyDataSetCreator extends DataSetCreator {\n\tprivate general_xMinValue: number = Number.MAX_SAFE_INTEGER\n\tprivate general_xMaxValue: number = -Number.MAX_SAFE_INTEGER\n\t\n\tprivate axisIndex: AxisIndexType[] = []\n\t\n\tprivate addVarsForScatterPlot(containerArray: AxisContainer[], statistics: StatisticsCollection): void {\n\t\tfor(const axisContainer of containerArray) {\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\tconst xAxis = axisContainer.xAxis\n\t\t\tlet xMinValue = Number.MAX_SAFE_INTEGER\n\t\t\tlet xMaxValue = -Number.MAX_SAFE_INTEGER\n\t\t\t\n\t\t\tconst rawYData = statistics[yAxis.variableName.get()][yAxis.observedVariableIndex.get()].data as StatisticsEntryPerData\n\t\t\tconst rawXData = statistics[xAxis.variableName.get()][xAxis.observedVariableIndex.get()].data as StatisticsEntryPerData\n\t\t\tconst data = []\n\t\t\tlet xSum = 0\n\t\t\tlet ySum = 0\n\t\t\tlet xySum = 0\n\t\t\tlet xxSum = 0\n\t\t\tlet yySum = 0\n\t\t\t\n\t\t\t//add data:\n\t\t\t\n\t\t\tfor(const i in rawXData) {\n\t\t\t\tconst xValue = rawXData[i]\n\t\t\t\tconst yValue = rawYData[i]\n\t\t\t\t\n\t\t\t\tif(xValue < xMinValue)\n\t\t\t\t\txMinValue = xValue\n\t\t\t\tif(xValue > xMaxValue)\n\t\t\t\t\txMaxValue = xValue\n\t\t\t\t\n\t\t\t\txSum += xValue\n\t\t\t\tySum += yValue;\n\t\t\t\txySum += xValue*yValue;\n\t\t\t\txxSum += xValue*xValue;\n\t\t\t\tyySum += yValue*yValue;\n\t\t\t\tdata.push({x: xValue, y: yValue})\n\t\t\t}\n\t\t\t\n\t\t\tthis.dataSets.push(this.createDataSet(\n\t\t\t\taxisContainer.label.get(),\n\t\t\t\tdata,\n\t\t\t\taxisContainer.color.get()\n\t\t\t))\n\t\t\t\n\t\t\t\n\t\t\t//create regression line:\n\t\t\t\n\t\t\tconst fitToShowLinearProgression = this.chart.fitToShowLinearProgression.get()\n\t\t\tconst n = data.length\n\t\t\tif(n >= 2) {\n\t\t\t\tlet r2 = Math.pow((n*xySum - xSum*ySum) / Math.sqrt((n*xxSum - xSum*xSum)*(n*yySum - ySum*ySum)),2)\n\t\t\t\t\n\t\t\t\tif(r2*100 < fitToShowLinearProgression)\n\t\t\t\t\tcontinue\n\t\t\t\tconst slope = (n*xySum - xSum*ySum) / (n*xxSum - xSum*xSum)\n\t\t\t\tconst intercept = (ySum - slope*xSum) / n\n\t\t\t\tconst regressionData = this.createDataSet(\n\t\t\t\t\t\"\",\n\t\t\t\t\t[{x:xMinValue, y:intercept + slope * xMinValue}, {x:xMaxValue, y:intercept + slope * xMaxValue}],\n\t\t\t\t\taxisContainer.color.get()\n\t\t\t\t)\n\t\t\t\tregressionData.type = \"line\"\n\t\t\t\tthis.dataSets.push(regressionData)\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate addVars(containerArray: AxisContainer[], statistics: StatisticsCollection): void {\n\t\tfor(const axisContainer of containerArray) {\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\tconst xAxis = axisContainer.xAxis\n\t\t\tconst rawYData = statistics[yAxis.variableName.get()][yAxis.observedVariableIndex.get()].data as StatisticsEntryPerData\n\t\t\tconst rawXData = statistics[xAxis.variableName.get()][xAxis.observedVariableIndex.get()].data as StatisticsEntryPerData\n\t\t\t\n\t\t\tconst newIndex: AxisIndexType = {\n\t\t\t\tlabel: axisContainer.label.get(),\n\t\t\t\tcolor: axisContainer.color.get(),\n\t\t\t\tindex: {}\n\t\t\t}\n\t\t\tthis.axisIndex.push(newIndex)\n\t\t\tconst index = newIndex.index\n\t\t\t\n\t\t\tfor(let i in rawXData) {\n\t\t\t\tconst xValue = rawXData[i]\n\t\t\t\tconst yValue = rawYData[i]\n\t\t\t\t\n\t\t\t\tif(xValue < this.general_xMinValue)\n\t\t\t\t\tthis.general_xMinValue = xValue\n\t\t\t\tif(xValue > this.general_xMaxValue)\n\t\t\t\t\tthis.general_xMaxValue = xValue\n\t\t\t\t\n\t\t\t\tindex[xValue] = yValue\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate addData(): void {\n\t\tfor(const indexInfo of this.axisIndex) {\n\t\t\tconst index = indexInfo.index\n\t\t\tconst data: DataPoint = []\n\t\t\tfor(let i = this.general_xMinValue; i <= this.general_xMaxValue; ++i) {\n\t\t\t\tif(!index.hasOwnProperty(i))\n\t\t\t\t\tcontinue\n\t\t\t\tdata.push(index[i])\n\t\t\t}\n\t\t\tthis.dataSets.push(this.createDataSet(\n\t\t\t\tindexInfo.label,\n\t\t\t\tdata,\n\t\t\t\tindexInfo.color\n\t\t\t))\n\t\t}\n\t}\n\t\n\tpublic create(personalStatistics: StatisticsCollection, publicStatistics: StatisticsCollection): ChartDataset[] {\n\t\tif(this.forScatterPlot) {\n\t\t\tthis.addVarsForScatterPlot(this.chart.axisContainer.get(), personalStatistics);\n\t\t\tif(this.chart.displayPublicVariable.get())\n\t\t\t\tthis.addVarsForScatterPlot(this.chart.publicVariables.get(), publicStatistics);\n\t\t}\n\t\telse {\n\t\t\tthis.addVars(this.chart.axisContainer.get(), personalStatistics);\n\t\t\tif(this.chart.displayPublicVariable.get())\n\t\t\t\tthis.addVars(this.chart.publicVariables.get(), publicStatistics);\n\t\t\t\n\t\t\t\n\t\t\t//create labels:\n\t\t\tfor(let i = this.general_xMinValue; i <= this.general_xMaxValue; ++i) {\n\t\t\t\tthis.labels.push(i.toString());\n\t\t\t}\n\t\t\t\n\t\t\t//add data:\n\t\t\tthis.addData()\n\t\t}\n\t\t\n\t\treturn this.dataSets\n\t}\n}","import {CSV_DELIMITER, DATAVIEWER_SKIPPED_COLUMNS, DATAVIEWER_TIMESTAMP_COLUMNS} from \"../../constants/csv\";\nimport Papa from 'papaparse';\nimport {InputMediaTypes} from \"../../data/study/Input\";\nimport {CsvRow} from \"./CsvRow\";\nimport {CsvSpecialType} from \"./CsvSpecialType\";\nimport {CsvCell, CsvCellsWithMeta} from \"./CsvCell\";\nimport {StatisticsCreator} from \"./StatisticsCreator\";\nimport {StatisticsCollection} from \"../../data/statistics/StatisticsCollection\";\nimport {AxisContainer} from \"../../data/study/AxisContainer\";\nimport {WorkerResponseData} from \"./WorkerResponseData\";\nimport {ValueListInfo} from \"./ValueListInfo\";\nimport {WorkerSendData} from \"./WorkerSendData\";\n\n\nconst EMPTY_DATA_SYMBOL = \"-\";\nconst LOADING_INFO_MESSAGE_FREQUENCY = 1000\n\nclass ColumnData {\n\treadonly headerName: string\n\t\n\treadonly specialType?: CsvSpecialType\n\t\n\t/**\n\t * Lists all cells with the same value in that column.\n\t */\n\treadonly valueCellList: Record<string, CsvCellsWithMeta> = {}\n\t\n\t/**\n\t * Counts all cells with the same value in that column.\n\t * Only cells that are visible are considered\n\t */\n\tvisibleValueCountList: Record<string, number> = {}\n\t\n\tpublic invisibleValuesList: Record<string, boolean> = {}\n\tpublic invisibleValuesCount: number = 0\n\t\n\tconstructor(headerName: string, specialType?: CsvSpecialType) {\n\t\tthis.headerName = headerName\n\t\tthis.specialType = specialType\n\t}\n}\n\nexport class CsvData {\n\tprivate loadingPromise?: Promise<any>\n\tprivate rawData: string[][] = []\n\tprivate importingComplete: boolean = false\n\t\n\tprivate readonly specialColumnsIndex: {\n\t\ttimestamp: Record<string, boolean>\n\t\tskipped: Record<string, boolean>\n\t\timage: Record<string, boolean>\n\t\taudio: Record<string, boolean>\n\t}\n\t\n\tprivate readonly columnDataList: ColumnData[] = []\n\t\n\t/**\n\t * An index of all rows that have been indexed (and are available to be displayed)\n\t */\n\tprivate readonly rowsIndex: CsvRow[] = []\n\t\n\t/**\n\t * An index of rows that are currently displayed (by default is the same as {@link rowsIndex})\n\t */\n\tpublic visibleRowsList: CsvRow[] = []\n\t\n\t// private readonly filteredColumnsIndex: Record<number, Record<string, boolean>> = {}\n\tprivate filteredRowsIndex: Record<number, boolean> = {}\n\t\n\tprivate needsHeader: boolean = true\n\t\n\tprivate needsIndexing: boolean = true\n\tpublic visibleRowsCount: number = 0\n\t\n\t\n\tconstructor(specialInputColumns: Record<InputMediaTypes, string[]>) {\n\t\tthis.specialColumnsIndex = {\n\t\t\ttimestamp: {},\n\t\t\tskipped: {},\n\t\t\timage: {},\n\t\t\taudio: {},\n\t\t}\n\t\t\n\t\tfor(let mediaType in specialInputColumns) {\n\t\t\tconst names = specialInputColumns[mediaType as InputMediaTypes]\n\t\t\tconst index = this.specialColumnsIndex[mediaType as InputMediaTypes]\n\t\t\tfor(const name of names) {\n\t\t\t\tindex[name] = true\n\t\t\t}\n\t\t}\n\t\tfor(const name of DATAVIEWER_TIMESTAMP_COLUMNS) {\n\t\t\tthis.specialColumnsIndex.timestamp[name] = true\n\t\t}\n\t\tfor(const name of DATAVIEWER_SKIPPED_COLUMNS) {\n\t\t\tthis.specialColumnsIndex.skipped[name] = true\n\t\t}\n\t}\n\t\n\tprivate loadCsvRow(csvColumns: string[]): void {\n\t\tif(!csvColumns.length) {\n\t\t\tlet msg = csvColumns.toString()\n\t\t\ttry {\n\t\t\t\tmsg = JSON.parse(msg).error\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tthrow new Error(msg)\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(this.needsHeader) {\n\t\t\tthis.needsHeader = false\n\t\t\t\n\t\t\tcsvColumns.forEach((columnValue, columnIndex) => {\n\t\t\t\tlet specialType: CsvSpecialType | undefined\n\t\t\t\tif(this.specialColumnsIndex.timestamp.hasOwnProperty(columnValue))\n\t\t\t\t\tspecialType = CsvSpecialType.timestamp\n\t\t\t\telse if(this.specialColumnsIndex.image.hasOwnProperty(columnValue))\n\t\t\t\t\tspecialType = CsvSpecialType.image\n\t\t\t\telse if(this.specialColumnsIndex.audio.hasOwnProperty(columnValue))\n\t\t\t\t\tspecialType = CsvSpecialType.audio\n\t\t\t\telse if(this.specialColumnsIndex.skipped.hasOwnProperty(columnValue))\n\t\t\t\t\tspecialType = CsvSpecialType.skipped\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tthis.columnDataList[columnIndex] = new ColumnData(columnValue, specialType)\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tthis.rawData.push(csvColumns);\n\t\t\tif((++this.visibleRowsCount) % LOADING_INFO_MESSAGE_FREQUENCY === 0)\n\t\t\t\tsendMessage({loadingState: this.visibleRowsCount});\n\t\t}\n\t}\n\t\n\tpublic loadData(url: string): Promise<any> {\n\t\tif(this.loadingPromise)\n\t\t\treturn this.loadingPromise\n\t\t\n\t\tthis.loadingPromise = new Promise((complete, error) => {\n\t\t\tPapa.parse<string[]>(`${url}${url.indexOf(\"?\") == -1 ? \"?\" : \"&\"}${Date.now()}`, {\n\t\t\t\tdownload: true,\n\t\t\t\tstep: (rowData) => this.loadCsvRow(rowData.data),\n\t\t\t\tdelimiter: CSV_DELIMITER,\n\t\t\t\tcomplete: complete,\n\t\t\t\terror: error\n\t\t\t})\n\t\t})\n\t\treturn this.loadingPromise\n\t}\n\t\n\tpublic loadCsv(csvRows: string[][]): void {\n\t\tfor(const row of csvRows) {\n\t\t\tthis.loadCsvRow(row)\n\t\t}\n\t}\n\t\n\tprivate createCell(row: CsvRow, columnIndex: number, columnCellData: string): CsvCell {\n\t\tif(columnIndex >= this.columnDataList.length) {\n\t\t\tconsole.warn(`Row ${row.shownIndex + 1} has too many entries. Creating a new column`)\n\t\t\twhile(columnIndex >= this.columnDataList.length) {\n\t\t\t\tthis.columnDataList.push(new ColumnData(\"\", undefined))\n\t\t\t}\n\t\t}\n\t\tconst columnData = this.columnDataList[columnIndex]\n\t\t\n\t\tif(!columnCellData && columnData.specialType != CsvSpecialType.skipped)\n\t\t\treturn new CsvCell(row, EMPTY_DATA_SYMBOL, \"\", CsvSpecialType.empty)\n\t\t\n\t\tswitch(columnData.specialType) {\n\t\t\tcase CsvSpecialType.image:\n\t\t\t\treturn new CsvCell(row, columnCellData, columnCellData, CsvSpecialType.image)\n\t\t\t\t\n\t\t\tcase CsvSpecialType.audio:\n\t\t\t\treturn new CsvCell(row, columnCellData, columnCellData, CsvSpecialType.audio)\n\t\t\t\t\n\t\t\tcase CsvSpecialType.timestamp:\n\t\t\t\tconst timestamp = parseInt(columnCellData)\n\t\t\t\tif(!timestamp)\n\t\t\t\t\treturn new CsvCell(row, EMPTY_DATA_SYMBOL, \"\", CsvSpecialType.empty)\n\t\t\t\telse if(timestamp > 32532447600) //test if timestamp is in ms or seconds. NOTE: Exactly in the year 3000 when ducks have taken over the world, this code will stop working!!\n\t\t\t\t\treturn new CsvCell(row, (new Date(timestamp)).toLocaleString(), columnCellData, CsvSpecialType.timestamp)\n\t\t\t\telse\n\t\t\t\t\treturn new CsvCell(row, (new Date(timestamp * 1000)).toLocaleString(), columnCellData, CsvSpecialType.timestamp)\n\t\t\t\t\n\t\t\tdefault:\n\t\t\t\t\treturn new CsvCell(row, columnCellData, columnCellData, columnData.specialType)\n\t\t}\n\t}\n\t\n\tprivate indexRowData(rowData: string[], shownIndex: number): void {\n\t\tconst columnCells: CsvCell[] = []\n\t\tconst row = new CsvRow(this.rowsIndex.length, shownIndex, columnCells)\n\t\t\n\t\trowData.forEach((columnCellData, columnI) => {\n\t\t\tconst cell = this.createCell(row, columnI, columnCellData)\n\t\t\t\n\t\t\tconst columnData = this.columnDataList[columnI]\n\t\t\tif(!columnData) //this will only be false when datasets.php has been changed after the csv was created and data has more columns than the header line\n\t\t\t\treturn\n\t\t\tconst valueCellList = columnData.valueCellList\n\t\t\tconst visibleValueCountList = columnData.visibleValueCountList\n\t\t\t\n\t\t\tconst columnCellValue = cell.value;\n\t\t\t\n\t\t\tif(!valueCellList.hasOwnProperty(columnCellValue)) {\n\t\t\t\tvalueCellList[columnCellValue] = { cells: [cell], meta: {visible: true} }\n\t\t\t\tvisibleValueCountList[columnCellValue] = 1\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalueCellList[columnCellValue].cells.push(cell);\n\t\t\t\t++visibleValueCountList[columnCellValue]\n\t\t\t}\n\t\t\tcolumnCells[columnI] = cell\n\t\t})\n\t\t\n\t\tthis.rowsIndex.push(row)\n\t\tthis.visibleRowsList.push(row)\n\t}\n\tprivate indexNewData(until: number = this.visibleRowsCount-1): void {\n\t\tconst missingRowsCount = until - (this.visibleRowsList.length-1)\n\t\tif(missingRowsCount <= 0)\n\t\t\treturn\n\t\t\n\t\tconst notIndexedRowsCount = this.rawData.length\n\t\tconst rowsForIndexing = notIndexedRowsCount > missingRowsCount\n\t\t\t? this.rawData.splice(notIndexedRowsCount - missingRowsCount, missingRowsCount) //we splice from the back\n\t\t\t: this.rawData.splice(0, notIndexedRowsCount)\n\t\tconst newNotIndexedRowsCount = this.rawData.length\n\t\t//Note that rows are reversed. So firstRowIndex counts down. When we are done indexing, the very last value will be 0\n\t\tconst startingRowIndex = newNotIndexedRowsCount - (newNotIndexedRowsCount - notIndexedRowsCount) - rowsForIndexing.length\n\t\t\n\t\t//This loop needs to be reversed or new data will be added in the wrong order:\n\t\tfor(let i = rowsForIndexing.length - 1; i >= 0; --i) {\n\t\t\tthis.indexRowData(rowsForIndexing[i], startingRowIndex + i)\n\t\t\tif(i % 1000 === 0)\n\t\t\t\tsendMessage({indexingState: i})\n\t\t}\n\t\t\n\t\tthis.needsIndexing = this.importingComplete = this.rawData.length == 0\n\t}\n\tpublic indexing(until: number = this.visibleRowsCount-1): void {\n\t\tif(!this.importingComplete) {\n\t\t\tthis.indexNewData(until)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif(!this.needsIndexing || until < this.visibleRowsList.length || !this.visibleRowsCount)\n\t\t\treturn\n\t\tlet visibleRowI = this.visibleRowsList.length\n\t\tlet realRowI = visibleRowI ? this.visibleRowsList[visibleRowI - 1].arrayIndex + 1 : 0 // we dont know the REAL row position because some rows might hav been skipped\n\t\t\n\t\t//Note: if a filter happened, then reset_visibleFilter() should have been called and visible_rowsIndex is empty\n\t\t// if not, we continue an index-action from before\n\t\tfor(; visibleRowI <= until && realRowI < this.rowsIndex.length; ++realRowI) {\n\t\t\tif(this.rowsIndex[realRowI].hiddenSum)\n\t\t\t\tcontinue\n\t\t\t\n\t\t\tconst row = this.rowsIndex[realRowI]\n\t\t\tthis.visibleRowsList.push(row)\n\t\t\t\n\t\t\t\n\t\t\t//Note: To be able to deal with bugs or corrupted files, we are not assuming that each row has the same number of columns\n\t\t\trow.columnCells.forEach((columnCell, index) => {\n\t\t\t\tconst value = columnCell.value\n\t\t\t\tconst columnList = this.columnDataList[index]\n\t\t\t\tif(!columnList)\n\t\t\t\t\treturn\n\t\t\t\tif(columnList.visibleValueCountList.hasOwnProperty(value))\n\t\t\t\t\t++columnList.visibleValueCountList[value]\n\t\t\t\telse\n\t\t\t\t\tcolumnList.visibleValueCountList[value] = 1\n\t\t\t})\n\t\t\t\n\t\t\t++visibleRowI\n\t\t}\n\t\tthis.needsIndexing = realRowI != this.rowsIndex.length - 1\n\t}\n\t\n\t\n\tprivate completeReset(): void {\n\t\tfor(const row of this.rowsIndex) {\n\t\t\tif(row.visible) //if it is already visible we do nothing\n\t\t\t\treturn\n\t\t\t\n\t\t\t++this.visibleRowsCount\n\t\t\trow.hiddenSum = 0\n\t\t\trow.visible = true\n\t\t}\n\t\t\n\t\tfor(const columnData of this.columnDataList) {\n\t\t\tfor(const search_key in columnData.invisibleValuesList) {\n\t\t\t\tconst list = columnData.valueCellList\n\t\t\t\tif(list.hasOwnProperty(search_key))\n\t\t\t\t\tlist[search_key].meta.visible = true;\n\t\t\t}\n\t\t\tcolumnData.invisibleValuesList = {}\n\t\t}\n\t}\n\tpublic reset(): void {\n\t\tif(!this.importingComplete)\n\t\t\treturn\n\t\t\n\t\tlet needsCompleteReset = false;\n\t\tfor(const _ in this.filteredRowsIndex) { //check if there are any entries\n\t\t\tneedsCompleteReset = true\n\t\t\tbreak\n\t\t}\n\t\t\n\t\tif(needsCompleteReset)\n\t\t\tthis.completeReset()\n\t\telse {\n\t\t\tthis.columnDataList.forEach((columnData, columnNum) => {\n\t\t\t\tfor(const searchKey in columnData.invisibleValuesList) {\n\t\t\t\t\tthis.filterByValue(true, columnNum, searchKey)\n\t\t\t\t}\n\t\t\t\tcolumnData.invisibleValuesList = {}\n\t\t\t})\n\t\t}\n\t\t\n\t\tthis.filteredRowsIndex = {}\n\t\tthis.resetVisibleFilter()\n\t\tthis.indexing()\n\t}\n\t\n\tpublic getColumnNum(columnName: string): number {\n\t\treturn this.columnDataList.findIndex((columnData) => columnData.headerName == columnName)\n\t}\n\t\n\t\n\t\n\tpublic getVisibleCount(columnNum: number, value: string): number {\n\t\tconst visibleList = this.columnDataList[columnNum].visibleValueCountList\n\t\treturn visibleList.hasOwnProperty(value) ? visibleList[value] : 0\n\t}\n\t\n\tpublic getVisibleRows(from: number, to: number): CsvRow[] {\n\t\tthis.indexing(to - 1)\n\t\treturn this.visibleRowsList.slice(from, to)\n\t}\n\t\n\tpublic getValueCellList(columnNum: number): Record<string, CsvCellsWithMeta> {\n\t\tthis.indexing()\n\t\treturn this.columnDataList[columnNum].valueCellList\n\t}\n\t\n\tpublic getValueListInfos(columnNum: number, sortByAmount: boolean, includeHiddenValues: boolean): ValueListInfo[] {\n\t\tthis.indexing()\n\t\t\n\t\tconst columnData = this.columnDataList[columnNum]\n\t\tconst visibleList = columnData.visibleValueCountList\n\t\tconst valueList = Object.keys(includeHiddenValues ? columnData.valueCellList : visibleList);\n\t\tif(sortByAmount) {\n\t\t\tvalueList.sort(function(a, b) {\n\t\t\t\tconst l1 = visibleList.hasOwnProperty(a) ? visibleList[a] : 0\n\t\t\t\tconst l2 = visibleList.hasOwnProperty(b) ? visibleList[b] : 0\n\t\t\t\treturn l2 - l1\n\t\t\t});\n\t\t}\n\t\telse\n\t\t\tvalueList.sort()\n\t\t\n\t\tconst list: ValueListInfo[] = [];\n\t\tconst addToList = includeHiddenValues\n\t\t\t? (key: string) => {\n\t\t\t\tconst valueIndexEntry = columnData.valueCellList[key];\n\t\t\t\tlist.push({\n\t\t\t\t\tname: key,\n\t\t\t\t\tcount: visibleList.hasOwnProperty(key) ? visibleList[key] : 0,\n\t\t\t\t\ttotalCount: valueIndexEntry.cells.length,\n\t\t\t\t\tvisible: valueIndexEntry.meta.visible\n\t\t\t\t})\n\t\t\t}\n\t\t\t: (key: string) => {\n\t\t\t\tconst count = visibleList[key]\n\t\t\t\tlist.push({\n\t\t\t\t\tname: key,\n\t\t\t\t\tcount: count,\n\t\t\t\t\ttotalCount: count,\n\t\t\t\t\tvisible: true\n\t\t\t\t})\n\t\t\t}\n\t\tfor(const value of valueList) {\n\t\t\taddToList(value)\n\t\t}\n\t\treturn list\n\t}\n\t\n\tpublic getStatisticsCollection(axisContainerArray: AxisContainer[], dataType: number): StatisticsCollection {\n\t\tconst creator = new StatisticsCreator(this)\n\t\treturn creator.create(axisContainerArray, dataType)\n\t}\n\t\n\tpublic getValueCount(columnNum: number, values: string[]): Record<string, number> {\n\t\tif(!this.importingComplete)\n\t\t\tthis.indexing()\n\t\tconst valueList = this.columnDataList[columnNum].valueCellList\n\t\tconst r: Record<string, number> = {}\n\t\tfor(const key of values) {\n\t\t\tr[key] = valueList.hasOwnProperty(key) ? valueList[key].cells.length : 0;\n\t\t}\n\t\treturn r\n\t}\n\t\n\tprivate setRowVisibility(row: CsvRow, visible: boolean): void {\n\t\tif(visible) {\n\t\t\tif(!row.visible && !--row.hiddenSum) { //if it is already visible we do nothing\n\t\t\t\t++this.visibleRowsCount\n\t\t\t\trow.visible = true\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif(++row.hiddenSum === 1) {\n\t\t\t\t--this.visibleRowsCount\n\t\t\t\trow.visible = false\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate resetVisibleFilter(): void {\n\t\tthis.visibleRowsList = []\n\t\t\n\t\tfor(const columnData of this.columnDataList) {\n\t\t\tcolumnData.visibleValueCountList = {}\n\t\t}\n\t}\n\t\n\tpublic mark(enable: boolean, rowPos: number): void {\n\t\tthis.rowsIndex[rowPos].marked = enable\n\t}\n\t\n\tpublic filterByValue(visible: boolean, columnNum: number, value: string): void {\n\t\tif(!this.importingComplete)\n\t\t\tthis.indexing()\n\t\tconst columnData = this.columnDataList[columnNum]\n\t\tif(columnData.valueCellList.hasOwnProperty(value)) {\n\t\t\tconst keyCells = columnData.valueCellList[value]\n\t\t\t\n\t\t\tif(keyCells.meta.visible == visible)\n\t\t\t\treturn\n\t\t\t\n\t\t\tkeyCells.meta.visible = visible\n\t\t\t\n\t\t\tfor(const cell of keyCells.cells) {\n\t\t\t\tthis.setRowVisibility(cell.row, visible)\n\t\t\t}\n\t\t}\n\t\tthis.resetVisibleFilter()\n\t\t\n\t\t//keep track for reset()\n\t\tif(visible) {\n\t\t\tif(columnData.invisibleValuesList.hasOwnProperty(value)) {\n\t\t\t\tdelete columnData.invisibleValuesList[value]\n\t\t\t\t--columnData.invisibleValuesCount\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcolumnData.invisibleValuesList[value] = true\n\t\t\t++columnData.invisibleValuesCount\n\t\t}\n\t\t\n\t\tthis.needsIndexing = true\n\t}\n\t\n\tpublic filterEntireColumn(visible: boolean, columnNum: number): void {\n\t\tif(!this.importingComplete)\n\t\t\tthis.indexing()\n\t\tconst valueList = this.columnDataList[columnNum].valueCellList\n\t\tfor(const key in valueList) {\n\t\t\tif(valueList.hasOwnProperty(key))\n\t\t\t\tthis.filterByValue(visible, columnNum, key)\n\t\t}\n\t\tthis.needsIndexing = true\n\t}\n\t\n\tfilterRowsByResponseTime(visible: boolean, newestTimestamp: number): void {\n\t\tif(!this.importingComplete)\n\t\t\tthis.indexing()\n\t\tconst responseTimeNum = this.getColumnNum(\"responseTime\")\n\t\t\n\t\tif(!visible && this.filteredRowsIndex.hasOwnProperty(responseTimeNum)) //we don't want to filter the same row twice\n\t\t\treturn\n\t\t\n\t\tfor(const row of this.visibleRowsList) {\n\t\t\tconst cells = row.columnCells\n\t\t\t\n\t\t\tif(cells.length <= responseTimeNum) //if there was an error in dataset row.columnCells[responseTimeNum] can be undefined\n\t\t\t\tthis.setRowVisibility(row, false)\n\t\t\telse if(parseInt(cells[responseTimeNum].realValue) < newestTimestamp)\n\t\t\t\tthis.setRowVisibility(row, visible)\n\t\t}\n\t\t\n\t\tthis.resetVisibleFilter()\n\t\t\n\t\t//keep track for reset() :\n\t\tif(visible) {\n\t\t\tif(this.filteredRowsIndex.hasOwnProperty(responseTimeNum))\n\t\t\t\tdelete this.filteredRowsIndex[responseTimeNum]\n\t\t}\n\t\telse\n\t\t\tthis.filteredRowsIndex[responseTimeNum] = true\n\t\tthis.needsIndexing = true\n\t}\n\t\n\tpublic getHeaderNames(): string[] {\n\t\tconst output: string[] = []\n\t\tfor(const columnData of this.columnDataList) {\n\t\t\toutput.push(columnData.headerName)\n\t\t}\n\t\treturn output\n\t}\n}\n\nlet csvData: CsvData\n\nonmessage = async (event) => {\n\tconst data = event.data as WorkerSendData\n\tconst id = data.id\n\t\n\tconst returnObj: WorkerResponseData = { id: id }\n\tswitch(data.type) {\n\t\tcase \"load\":\n\t\t\ttry {\n\t\t\t\tcsvData = new CsvData(data.specialColumns ?? {} as Record<InputMediaTypes, string[]>)\n\t\t\t\tawait csvData.loadData(data.url ?? \"missing\")\n\t\t\t\treturnObj.visibleRowsCount = csvData.visibleRowsCount\n\t\t\t\treturnObj.headerNames = csvData.getHeaderNames()\n\t\t\t\tsendMessage(returnObj)\n\t\t\t}\n\t\t\tcatch(error: any) {\n\t\t\t\tconsole.error(error)\n\t\t\t\treturnObj.error = error.toString()\n\t\t\t\tsendMessage(returnObj)\n\t\t\t}\n\t\t\treturn\n\t\tcase \"fromCsv\":\n\t\t\tcsvData = new CsvData(data.specialColumns ?? {} as Record<InputMediaTypes, string[]>)\n\t\t\tcsvData.loadCsv(data.csv ?? []);\n\t\t\treturnObj.visibleRowsCount = csvData.visibleRowsCount\n\t\t\treturnObj.headerNames = csvData.getHeaderNames()\n\t\t\tbreak\n\t\tcase \"reset\":\n\t\t\tcsvData.reset()\n\t\t\tbreak\n\t\tcase \"getVisibleCount\":\n\t\t\treturnObj.visibleRowsCount = csvData.getVisibleCount(data.columnNum ?? 0, data.value ?? \"\")\n\t\t\tbreak\n\t\tcase \"getVisibleRows\":\n\t\t\treturnObj.rows = csvData.getVisibleRows(data.from ?? 0, data.to ?? 0)\n\t\t\tbreak\n\t\tcase \"valueCellList\":\n\t\t\treturnObj.valueCellList = csvData.getValueCellList(data.columnNum ?? 0)\n\t\t\tbreak\n\t\tcase \"valueListInfo\":\n\t\t\treturnObj.valueListInfo = csvData.getValueListInfos(data.columnNum ?? 0, !!data.sortByAmount, !!data.includeHiddenValues)\n\t\t\tbreak\n\t\tcase \"mark\":\n\t\t\tcsvData.mark(!!data.enable, data.rowPos ?? 0)\n\t\t\tbreak\n\t\tcase \"filterByValue\":\n\t\t\tcsvData.filterByValue(!!data.enable, data.columnNum ?? 0, data.value ?? \"\")\n\t\t\treturnObj.visibleRowsCount = csvData.visibleRowsCount\n\t\t\tbreak\n\t\tcase \"filterEntireColumn\":\n\t\t\tcsvData.filterEntireColumn(!!data.enable, data.columnNum ?? 0)\n\t\t\treturnObj.visibleRowsCount = csvData.visibleRowsCount\n\t\t\tbreak\n\t\tcase \"filterRowsByResponseTime\":\n\t\t\tcsvData.filterRowsByResponseTime(!!data.enable, data.newestTimestamp ?? 0)\n\t\t\treturnObj.visibleRowsCount = csvData.visibleRowsCount\n\t\t\tbreak\n\t\tcase \"getStatistics\":\n\t\t\treturnObj.statistics = csvData.getStatisticsCollection(\n\t\t\t\tdata.axisContainerArrayJson?.map((json) => new AxisContainer(JSON.parse(json), null, \"axisContainer\")) ?? [],\n\t\t\t\tdata.dataType ?? 0\n\t\t\t)\n\t\t\tbreak\n\t\tcase \"getValueCount\":\n\t\t\treturnObj.valueCount = csvData.getValueCount(data.columnNum ?? 0, data.values ?? [])\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturnObj.error = \"Unknown error\"\n\t\t\tbreak\n\t}\n\tsendMessage(returnObj)\n}\n\n\nfunction sendMessage(returnData: WorkerResponseData): void {\n\tpostMessage(returnData)\n}","import {ObservableStructure} from \"../../observable/ObservableStructure\";\nimport {AxisData} from \"./AxisData\";\nimport {JsonTypes} from \"../../observable/types/JsonTypes\";\nimport {CONDITION_OPERATOR_EQUAL, CONDITION_TYPE_AND} from \"../../constants/statistics\";\nimport {Lang} from \"../../singletons/Lang\";\nimport {getChartColor} from \"../../helpers/ChartJsBox\";\nimport {CsvLoader} from \"../../loader/csv/CsvLoader\";\n\nexport class AxisContainer extends ObservableStructure {\n\tpublic color = this.primitive<string>(\"color\",\"#00bbff\")\n\t\n\tpublic label = this.translatable(\"label\",\"\")\n\t\n\tpublic xAxis = this.object(\"xAxis\", AxisData)\n\tpublic yAxis = this.object(\"yAxis\", AxisData)\n\t\n\tpublic static async getPerDayAxisCodeFromValueList(csvLoader: CsvLoader, columnKey: string): Promise<Record<string, JsonTypes>[]> {\n\t\tconst axis: Record<string, JsonTypes>[] = [];\n\t\tconst valueList = await csvLoader.getValueListInfo(columnKey)\n\t\tvalueList.forEach((entry, index) => {\n\t\t\tconst key = entry.name;\n\t\t\taxis.push({\n\t\t\t\txAxis: {\n\t\t\t\t\tconditions: []\n\t\t\t\t},\n\t\t\t\tyAxis: {\n\t\t\t\t\tconditions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: columnKey,\n\t\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\t\toperator: CONDITION_OPERATOR_EQUAL\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tvariableName: \"responseTime\",\n\t\t\t\t\tconditionType: CONDITION_TYPE_AND,\n\t\t\t\t\tobservedVariableIndex: index\n\t\t\t\t},\n\t\t\t\tlabel: Lang.get(\"text_with_count\", key, entry.count),\n\t\t\t\tcolor: getChartColor(index)\n\t\t\t});\n\t\t})\n\t\treturn axis\n\t}\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [2544], () => (__webpack_require__(2728)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + \"131aef3fd964cffb4611\" + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t2728: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkESMira\"] = self[\"webpackChunkESMira\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","CsvSpecialType","DATAVIEWER_SKIPPED_COLUMNS","DATAVIEWER_TIMESTAMP_COLUMNS","arrayIndex","shownIndex","columnCells","hiddenSum","visible","marked","this","row","value","realValue","specialType","special","undefined","ONE_DAY","csvData","getStorageType","dataType","addTimedStatisticsEntryData","entry","responseTimeColumnNum","uploadedColumnNum","cells","intValue","parseInt","day","NaN","Math","floor","round","isNaN","timedEntryData","data","hasOwnProperty","sum","count","addFreqDistrEntryData","perValueEntryData","addPerDataEntryData","entryCount","parseFloat","statisticConditionsAreMet","conditionType","conditions","conditionTypeIsAnd","conditionTypeIsOr","conditionIsMet","i","length","condition","conditionColumn","getColumnNum","key","get","conditionCompareValue","isTrue","conditionValue","operator","createDataFromAxis","axis","statisticsObj","storageType","timeInterval","visibleRows","visibleRowsList","variableName","columnNum","a","observedVariableIndex","addEntryData","forEach","columnCell","create","axisContainerArray","indexing","axisContainer","yAxis","xAxis","observerContainer","idCounter","shared","id","address","removeObserver","parent","SharedForObservable","keyName","createAddress","runObservers","turnedDifferent","target","bubbled","observers","addObserver","callback","existingId","ObserverId","importObserverData","other","removeAllConnectedObservers","updateKeyName","oldAddress","newAddress","hasMutated","forceIsDifferent","wasDifferent","isDifferent","reCalcIsDifferent","_isDifferent","backingField","defaultField","createJson","set","silently","BaseObservable","newLang","parentTranslatable","isTranslatable","currentLangCode","ObservablePrimitive","addLanguage","observables","langCount","langCode","defaultValue","options","dontIncludeAllLanguages","lastValue","hasDifferentValues","r","console","log","renameLanguage","oldLangCode","newLangCode","removeLanguage","firstLangKey","observablesKey","getObs","BaseTranslatable","defaultFields","constructObservable","values","defaultObsValues","index","obs","toString","push","map","_value","_silently","Error","addCopy","original","jsonObj","newObs","move","remove","oldEntry","splice","max","replace","silent","oldIndex","newIndex","moveFromOtherList","oldList","indexOf","searchElement","fromIndex","array","ObservableArray","_parent","childKey","langData","alwaysDifferent","generalDefaultValues","valueIndex","initJson","setDifferent","record","dontFilterDefaults","primitive","primitiveArray","translatable","TranslatablePrimitive","translatableArray","TranslatableArray","objectArray","typeConstructor","object","createDataStructure","ObservableStructure","Conditions","promise","Promise","resolve","langRecord","Lang","code","isInit","init","packageVersion","url","type","requestData","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","send","then","status","error","responseText","jsonString","JSON","parse","catch","e","awaitPromise","getDynamic","replacers","search","getWithColon","CHART_COLORS","getChartColor","isRegistered","parentView","personalStatistics","publicStatistics","chart","noSort","register","dataSetCreator","datasets","chartType","optionFill","getOptionFill","forScatterPlot","getForScatterPlot","getDataSetCreator","errorView","document","createElement","classList","add","innerText","append","title","titleView","appendChild","chartDescription","descView","innerHTML","scrollable","clientWidth","labels","width","windowView","legendView","scrollView","chartView","style","cssText","canvas","chartJs","getContext","getChartJsType","getChartOptions","inPercent","plugins","getChartPlugins","defaults","elements","line","spanGaps","DailyDataSetCreator","FreqDistrDataSetCreator","SumDataSetCreator","XyDataSetCreator","afterUpdate","hasChildNodes","removeChild","firstElementChild","legendPlugin","legend","generateLabels","item","text","span","fillStyle","small","dataSets","verticalPadding","layout","padding","left","right","top","bottom","responsive","scales","y","display","datalabels","anchor","align","offset","datasetIndex","dataIndex","formatter","createDataSet","label","color","backgroundColor","borderColor","currentColor","hexToRGB","borderWidth","fill","hex","alpha","slice","g","b","firstDay","Number","MAX_VALUE","lastDay","setFirstAndLastDay","statistics","rawYData","keys","Object","sort","getYValue","valueType","rawY","addVars","containerArray","current_day","yValue","x","displayPublicVariable","publicVariables","now","Date","cutoffToday","cutoffYesterday","cutoffWeek","toLocaleDateString","DataSetCreator","dataPoint","borderColors","getXValue","num","statistic","rawData","labelsIndex","createNumData","xValue","xMin","xMax","addNumVar","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","addNumVars","createStringPercentData","labelsMax","createStringCountData","addStringVars","createData","bind","addStringLabels","sortLabelComparator","sa","toLowerCase","sb","xAxisIsNumberRange","substring","general_xMinValue","general_xMaxValue","axisIndex","addVarsForScatterPlot","xMinValue","xMaxValue","rawXData","xSum","ySum","xySum","xxSum","yySum","fitToShowLinearProgression","n","pow","sqrt","slope","intercept","regressionData","addData","indexInfo","AxisData","getPerDayAxisCodeFromValueList","csvLoader","columnKey","getValueListInfo","name","headerName","valueCellList","visibleValueCountList","invisibleValuesList","invisibleValuesCount","specialInputColumns","mediaType","importingComplete","columnDataList","rowsIndex","filteredRowsIndex","needsHeader","needsIndexing","visibleRowsCount","specialColumnsIndex","timestamp","skipped","image","audio","names","loadCsvRow","csvColumns","msg","columnValue","columnIndex","ColumnData","sendMessage","loadingState","loadData","loadingPromise","complete","download","step","rowData","delimiter","loadCsv","csvRows","createCell","columnCellData","warn","columnData","CsvCell","empty","toLocaleString","indexRowData","CsvRow","columnI","cell","columnCellValue","meta","indexNewData","until","missingRowsCount","notIndexedRowsCount","rowsForIndexing","newNotIndexedRowsCount","startingRowIndex","indexingState","visibleRowI","realRowI","columnList","completeReset","search_key","list","reset","needsCompleteReset","_","searchKey","filterByValue","resetVisibleFilter","columnName","findIndex","getVisibleCount","visibleList","getVisibleRows","from","to","getValueCellList","getValueListInfos","sortByAmount","includeHiddenValues","valueList","l1","addToList","valueIndexEntry","totalCount","getStatisticsCollection","StatisticsCreator","getValueCount","setRowVisibility","mark","enable","rowPos","keyCells","filterEntireColumn","filterRowsByResponseTime","newestTimestamp","responseTimeNum","getHeaderNames","output","returnData","postMessage","onmessage","event","returnObj","CsvData","specialColumns","headerNames","csv","rows","valueListInfo","axisContainerArrayJson","json","AxisContainer","valueCount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","__webpack_exports__","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","getter","__esModule","d","definition","o","defineProperty","enumerable","f","chunkId","all","reduce","promises","u","miniCssF","globalThis","Function","window","obj","prop","prototype","scriptUrl","importScripts","location","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","p","installedChunks","chunkLoadingGlobal","self","parentChunkLoadingFunction","moreModules","runtime","pop"],"sourceRoot":""}