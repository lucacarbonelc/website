{"version":3,"file":"1182.1400027439df8b35adb6.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/merlinLogView.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Component, Vnode, VnodeDOM} from \"mithril\";\nimport { Section } from \"../site/Section\";\nimport { FILE_ADMIN } from \"../constants/urls\";\nimport {Requests} from \"../singletons/Requests\";\nimport { Lang } from \"../singletons/Lang\";\n\n\ninterface MerlinLogComponentOptions {\n    merlinLog: string\n}\n\nclass MerlinLogComponent implements Component<MerlinLogComponentOptions, any> {\n    public oncreate(vNode: VnodeDOM<MerlinLogComponentOptions, any>): void {\n        const listView = vNode.dom.getElementsByClassName(\"merlinLogList\")[0] as HTMLElement\n        \n        const lines = vNode.attrs.merlinLog.split(\"\\n\")\n        for(const element of lines) {\n            const view = document.createElement(\"div\")\n            view.classList.add(\"line\")\n            view.innerText = element\n            listView.appendChild(view)\n        }\n    }\n\n    public view(): Vnode<any, any> {\n        return <div>\n            <div class=\"merlinLogList\"></div>\n        </div>\n    }\n}\n\nexport class Content extends SectionContent {\n    private readonly merlinLog: string\n    public static preLoad(section: Section): Promise<any>[] {\n        return [\n            Requests.loadRaw(`${FILE_ADMIN}?type=GetMerlinLog&study_id=${section.getStaticInt(\"id\") ?? 0}&timestamp=${section.getStaticInt(\"timestamp\")}`)\n        ]\n    }\n    constructor(section: Section, merlinLog: string) {\n        super(section)\n        this.merlinLog = merlinLog\n    }\n\n    public title(): string {\n        return Lang.get(\"merlin_logs\")\n    }\n\n    public getView(): Vnode<any, any> {\n        return m(MerlinLogComponent, {merlinLog: this.merlinLog})\n    }\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}"],"names":["oncreate","vNode","listView","dom","getElementsByClassName","attrs","merlinLog","split","element","view","document","createElement","classList","add","innerText","appendChild","class","section","preLoad","loadRaw","getStaticInt","title","get","getView","MerlinLogComponent","this","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","getUrl","depth","getHash","goTo","target","window","location","hash","newSection","destroy"],"sourceRoot":""}