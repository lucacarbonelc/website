{"version":3,"file":"6096.c0d44e20399a0aef9c30.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/home.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashElement.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashRow.tsx","webpack://ESMira/./src/frontend/ts/widgets/NotCompatibleIcon.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {DashRow} from \"../widgets/DashRow\";\nimport {DashElement} from \"../widgets/DashElement\";\nimport {Lang} from \"../singletons/Lang\";\nimport participateSvg from \"../../imgs/dashIcons/participate.svg?raw\"\nimport questionSvg from \"../../imgs/icons/question.svg?raw\"\nimport statisticsSvg from \"../../imgs/icons/statistics.svg?raw\"\nimport serverStatisticsSvg from \"../../imgs/dashIcons/serverStatistics.svg?raw\"\nimport {Section} from \"../site/Section\";\nimport {PromiseCache} from \"../singletons/PromiseCache\";\nimport {Requests} from \"../singletons/Requests\";\nimport {FILE_SETTINGS} from \"../constants/urls\";\n\nexport class Content extends SectionContent {\n\tprivate readonly homeMessage: string\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"home\")\n\t}\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tPromiseCache.get(\"homeSettings\", () => {\n\t\t\t\treturn Requests.loadJson(FILE_SETTINGS.replace(\"%1\", Lang.code).replace(\"%2\", \"homeMessage\"))\n\t\t\t})\n\t\t]\n\t}\n\tconstructor(section: Section, settings: {homeMessage: string}) {\n\t\tsuper(section)\n\t\tthis.homeMessage = settings.homeMessage\n\t}\n\tpublic getView(): Vnode<any, any> {\n\t\treturn DashRow(\n\t\t\tDashElement(null, {template: {title: Lang.get(\"participate_in_study\"), icon: m.trust(participateSvg)}, href: this.getUrl(\"studies:attend\")}),\n\t\t\tDashElement(null, {template: {title: Lang.get(\"what_is_esmira\"), icon: m.trust(questionSvg)}, href: this.getUrl(\"about\")}),\n\t\t\tDashElement(null, {template: {title: Lang.get(\"show_study_statistics\"), icon: m.trust(statisticsSvg)}, href: this.getUrl(\"studies:statistics\")}),\n\t\t\tDashElement(null, {template: {title: Lang.get(\"show_server_statistics\"), icon: m.trust(serverStatisticsSvg)}, href: this.getUrl(\"serverStatistics\")}),\n\t\tthis.homeMessage.length > 0 && DashElement(\"stretched\", {content: <div>{m.trust(this.homeMessage)}</div>}),\n\t\t)\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {NotCompatibleIcon, PossibleDevices} from \"./NotCompatibleIcon\";\n\ntype DashTemplateOptions = {\n\ttitle: string\n\ticon?: Vnode<any, any>\n\tnoCompatibilityIcon?: PossibleDevices[]\n\tmsg?: string | Vnode<any, any>\n\tinnerLinkTitle?: string\n\tinnerLinkHref?: string\n}\n\ntype DashContainerOptions = \"stretched\" | \"cramped\" | \"vertical\" | \"horizontal\" | null\nexport type DashViewOptions = {\n\tdisabled?: boolean\n\tonclick?: (e: MouseEvent) => void\n\thref?: string\n\tshowAsClickable?: boolean\n\tfloating?: boolean\n\tfloatingRight?: boolean\n\thighlight?: boolean\n\tsmall?: boolean\n\ttemplate?: DashTemplateOptions\n\tcontent?: Vnode<any, any>\n}\n\nfunction DashTemplateView(options: DashTemplateOptions): Vnode<any, any> {\n\treturn (\n\t\t<div>\n\t\t\t{(options.icon || options.noCompatibilityIcon) &&\n\t\t\t\t<div class=\"dashIcon\">\n\t\t\t\t\t{options.icon}\n\t\t\t\t\t{options.noCompatibilityIcon && NotCompatibleIcon(... options.noCompatibilityIcon)}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t<div class=\"dashTitle\">{options.title}</div>\n\t\t\t{options.msg && <p class=\"dashMsg\">{options.msg}</p>}\n\t\t\t{options.innerLinkTitle && options.innerLinkHref && <a class=\"link\" href={options.innerLinkHref}>{options.innerLinkTitle}</a>}\n\t\t</div>\n\t)\n}\n\nfunction DashElementView(options: DashViewOptions): Vnode<any, any> {\n\tlet classString = \"dashEl\"\n\tif(options.floatingRight)\n\t\tclassString += \" floating right\"\n\telse if(options.floating)\n\t\tclassString += \" floating\"\n\t\n\tif(options.small)\n\t\tclassString += \" small\"\n\tif(options.highlight)\n\t\tclassString += \" highlight\"\n\tif(options.disabled)\n\t\tclassString += \" disabled\"\n\t\n\tlet view: Vnode<any, any>\n\tif(options.content)\n\t\tview = options.content\n\telse if(options.template)\n\t\tview = DashTemplateView(options.template)\n\telse\n\t\tview = <div class=\"highlight\">Missing Dash Information</div>\n\t\n\tif(options.href) {\n\t\treturn <a target={options.href.startsWith(\"http\") ? \"_blank\" : \"\"} class={`${classString} dashLink`} href={options.href}>{view}</a>\n\t}\n\telse if(options.onclick)\n\t\treturn <a class={`${classString} dashLink`} onclick={options.onclick}>{view}</a>\n\telse if(options.showAsClickable)\n\t\treturn <a class={`${classString} dashLink`}>{view}</a>\n\telse {\n\t\tview.attrs[\"className\"] = `${classString} ${view.attrs.hasOwnProperty(\"className\") ? view.attrs[\"className\"] : \"\"}`\n\t\treturn view\n\t}\n}\n\nfunction getNewClassString(size: DashContainerOptions, oldClassString: string): string {\n\tif(size)\n\t\toldClassString += \" \" + size\n\treturn oldClassString\n}\n\nexport function DashElement(\n\tsize: DashContainerOptions,\n\t... options: (DashViewOptions | false)[]\n): Vnode<any, any> {\n\tif(options.length == 1) {\n\t\tif(!options[0])\n\t\t\treturn <div></div>\n\t\t\n\t\tconst view =  DashElementView(options[0])\n\t\tview.attrs[\"className\"] = getNewClassString(size, view.attrs[\"className\"])\n\t\treturn view\n\t}\n\telse {\n\t\tconst classString = getNewClassString(size, \"multipleChildren\")\n\t\treturn <div class={classString}>\n\t\t\t{options.map((option) => option && DashElementView(option))}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\"\nexport function DashRow(... content: Array<Vnode<any, any> | undefined | false>): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"dashRow\">{content}</div>\n\t)\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport androidSvg from \"../../imgs/devices/android.svg?raw\"\nimport iosSvg from \"../../imgs/devices/ios.svg?raw\"\nimport webSvg from \"../../imgs/devices/web.svg?raw\"\nimport {closeDropdown, openDropdown} from \"./DropdownMenu\";\n\n\nexport type PossibleDevices = \"Android\" | \"iOS\" | \"Web\"\n\nconst imageRecord: Record<PossibleDevices, string> = {\n\tAndroid: androidSvg,\n\tiOS: iosSvg,\n\tWeb: webSvg\n}\n\nfunction onPointerEnter(title: string, e: MouseEvent) {\n\topenDropdown(\"notCompatible\", e.target as HTMLElement,\n\t\t() => <div class=\"smallText center\">{title}</div>\n\t)\n}\nfunction onPointerLeave() {\n\tcloseDropdown(\"notCompatible\")\n}\n\nexport function NotCompatibleIcon(... devices: PossibleDevices[]): Vnode<any, any> {\n\tconst translationRecord: Record<PossibleDevices, string> = {\n\t\tAndroid: Lang.get(\"Android\"),\n\t\tiOS: Lang.get(\"iOS\"),\n\t\tWeb: Lang.get(\"web_questionnaire\")\n\t}\n\tconst title = Lang.get(\"not_compatible_with\", devices.map((device) => translationRecord[device]).join(\", \"))\n\treturn <div class=\"notCompatibleIcon\" onpointerenter={onPointerEnter.bind(null, title)} onpointerleave={onPointerLeave.bind(null)}>\n\t\t{devices.map((device) =>\n\t\t\t<div class=\"deviceIcon\">{m.trust(imageRecord[device])}</div>)}\n\t</div>\n\n}\n"],"names":["section","settings","homeMessage","title","Lang","get","preLoad","_section","PromiseCache","Requests","loadJson","replace","code","getView","DashRow","DashElement","template","icon","href","this","getUrl","length","content","SectionContent","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticInt","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","depth","getHash","goTo","target","window","location","hash","newSection","destroy","DashElementView","options","view","classString","floatingRight","floating","small","highlight","disabled","noCompatibilityIcon","class","msg","innerLinkTitle","innerLinkHref","DashTemplateView","startsWith","onclick","showAsClickable","attrs","hasOwnProperty","getNewClassString","size","oldClassString","map","option","imageRecord","Android","iOS","Web","onPointerEnter","e","onPointerLeave","NotCompatibleIcon","translationRecord","devices","device","join","onpointerenter","bind","onpointerleave"],"sourceRoot":""}