{"version":3,"file":"8037.c3867553d67698cdc661.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/allStudies.tsx","webpack://ESMira/./src/frontend/ts/pages/studies.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BindObservable.tsx","webpack://ESMira/./src/frontend/ts/widgets/DragContainer.tsx","webpack://ESMira/./src/frontend/ts/widgets/TabBar.tsx"],"sourcesContent":["import m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {TabBar, TabContent} from \"../widgets/TabBar\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Study} from \"../data/study/Study\";\nimport messageSvg from \"../../imgs/icons/message.svg?raw\";\nimport merlinLogsSvg from \"../../imgs/icons/merlinLogs.svg?raw\";\nimport {StudiesDataType} from \"../loader/StudyLoader\";\nimport {Content as StudiesContent} from \"../pages/studies\";\nimport {SectionAlternative} from \"../site/SectionContent\";\nimport {BindObservable} from \"../widgets/BindObservable\";\n\nexport class Content extends StudiesContent {\n\tprotected targetPage: string\n\tprotected titleString: string\n\t\n\tprivate readonly selectedTab: ObservablePrimitive<number>\n\tprivate readonly selectedPublicAccessKeyTab: ObservablePrimitive<number>\n\tprivate readonly selectedDisabledAccessKeyTab: ObservablePrimitive<number>\n\tprivate readonly selectedOwner: ObservablePrimitive<string>\n\t\n\tprivate readonly ownerRegister: Record<string, number[]>\n\tprivate publicAccessKeysTabs: TabContent[] = []\n\tprivate disabledAccessKeysTabs: TabContent[] = []\n\tprotected studies: Study[] = []\n\tprivate readonly destroyImpl: (() => void)\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tsection.getStrippedStudyListPromise()\n\t\t]\n\t}\n\t\n\tconstructor(section: Section, studiesObs: StudiesDataType) {\n\t\tsuper(section)\n\t\tthis.ownerRegister = section.siteData.studyLoader.ownerRegister\n\t\tthis.selectedOwner = section.siteData.dynamicValues.getOrCreateObs(\"owner\", \"~\")\n\t\tthis.selectedPublicAccessKeyTab = section.siteData.dynamicValues.getOrCreateObs(\"publicAccessKeyIndex\", 0)\n\t\tthis.selectedDisabledAccessKeyTab = section.siteData.dynamicValues.getOrCreateObs(\"disabledAccessKeyIndex\", 0)\n\t\t\n\t\tthis.selectedTab = section.siteData.dynamicValues.getOrCreateObs(\"studiesIndex\", 0)\n\t\tswitch(section.sectionValue) {\n\t\t\tcase \"data\":\n\t\t\t\tthis.targetPage = \"dataStatistics\"\n\t\t\t\tif(section.getTools().merlinLogsLoader.studiesWithNewMerlinLogsCount.get())\n\t\t\t\t\tthis.selectedTab.set(2)\n\t\t\t\tthis.titleString = Lang.get(\"data\")\n\t\t\t\tbreak\n\t\t\tcase \"msgs\":\n\t\t\t\tthis.targetPage = \"messagesOverview\"\n\t\t\t\tif(section.getTools().messagesLoader.studiesWithNewMessagesCount.get())\n\t\t\t\t\tthis.selectedTab.set(1)\n\t\t\t\tthis.titleString = Lang.get(\"messages\")\n\t\t\t\tbreak\n\t\t\tcase \"edit\":\n\t\t\tdefault:\n\t\t\t\tthis.targetPage = \"studyEdit\"\n\t\t\t\tthis.titleString = Lang.get(\"edit_studies\")\n\t\t\t\tbreak\n\t\t}\n\t\t\n\t\tthis.updateSortedStudies(this.getStudiesFromObservable(studiesObs))\n\t\tthis.createAccessKeyTabLists()\n\t\t\n\t\tthis.selectedOwner.addObserver(() => {\n\t\t\tthis.selectedPublicAccessKeyTab.set(0)\n\t\t\tthis.updateSortedStudies(this.getStudiesFromObservable(studiesObs))\n\t\t\tthis.createAccessKeyTabLists()\n\t\t})\n\t\tconst messagesObserverId = this.getTools().messagesLoader.studiesWithNewMessagesCount?.addObserver(() => {\n\t\t\tm.redraw()\n\t\t})\n\t\tconst studyObserverId = studiesObs.addObserver((_origin, bubbled) => {\n\t\t\tif(!bubbled) {\n\t\t\t\tthis.updateSortedStudies(this.getStudiesFromObservable(studiesObs))\n\t\t\t\tthis.createAccessKeyTabLists()\n\t\t\t}\n\t\t})\n\t\t\n\t\tthis.destroyImpl = () => {\n\t\t\tmessagesObserverId.removeObserver()\n\t\t\tstudyObserverId.removeObserver()\n\t\t}\n\t}\n\tpublic preInit(): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\tconst ownerList = Object.keys(this.ownerRegister)\n\t\tif(ownerList.length > 1) {\n\t\t\treturn <div>\n\t\t\t\t<select class=\"ownerSelector\" {...BindObservable(this.selectedOwner)}>\n\t\t\t\t\t<option value=\"~\">{Lang.get(\"all_user\")}</option>\n\t\t\t\t\t{ownerList.map((name) =>\n\t\t\t\t\t\t<option value={name}>{name} ({this.ownerRegister[name].length})</option>\n\t\t\t\t\t)}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t}\n\t\telse\n\t\t\treturn null\n\t}\n\t\n\tpublic hasAlternatives(): boolean {\n\t\treturn this.studies.length > 1\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | null {\n\t\tconst allSections = this.section.allSections\n\t\tconst depth = this.section.depth\n\t\tconst id = allSections.length > depth+1 ? allSections[depth+1].getStaticInt(\"id\") : null\n\t\t\n\t\treturn this.studies.map((study) => {\n\t\t\tconst currentId = study.id.get()\n\t\t\treturn {\n\t\t\t\ttitle: study.title.get(),\n\t\t\t\ttarget: id != currentId ? this.getUrl(`${this.targetPage},id:${currentId}`) : false\n\t\t\t}\n\t\t})\n\t}\n\t\n\tprotected updateSortedStudies(unsortedStudies: Study[]): void {\n\t\tconst studies = this.section.siteData.studyLoader.getSortedStudyList(unsortedStudies)\n\t\tswitch(this.section.sectionValue) {\n\t\t\tcase \"data\":\n\t\t\t\tthis.studies = studies.filter((study) => this.hasPermission(\"read\", study.id.get()))\n\t\t\t\tbreak\n\t\t\tcase \"edit\":\n\t\t\t\tthis.studies = studies.filter((study) => this.hasPermission(\"write\", study.id.get()))\n\t\t\t\tbreak\n\t\t\tcase \"msgs\":\n\t\t\t\tthis.studies = studies.filter((study) => this.hasPermission(\"msg\", study.id.get()))\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthis.studies = studies\n\t\t\t\tbreak\n\t\t}\n\t}\n\tprivate getStudiesFromObservable(studiesObs: StudiesDataType): Study[] {\n\t\tif(this.selectedOwner.get() == \"~\")\n\t\t\treturn Object.values(studiesObs.get())\n\t\telse {\n\t\t\tconst studies: Study[] = []\n\t\t\tfor(const studyId of this.ownerRegister[this.selectedOwner.get()]) {\n\t\t\t\tconst study = studiesObs.get()[studyId]\n\t\t\t\tif(study) {\n\t\t\t\t\tstudies.push(study)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn studies\n\t\t}\n\t}\n\t\n\tprivate getStudiesPerAccessKey(published: boolean): Record<string, Study[]> {\n\t\tconst accessKeyIndex: Record<string, Study[]> = {}\n\t\tfor(const id in this.studies) {\n\t\t\tconst study = this.studies[id];\n\t\t\tif(study.published.get() != published)\n\t\t\t\tcontinue\n\t\t\t\n\t\t\tlet studyAccessKeys = study.accessKeys.get();\n\t\t\tfor(let i = studyAccessKeys.length - 1; i >= 0; --i) {\n\t\t\t\tconst accessKey = studyAccessKeys[i].get();\n\t\t\t\tif(accessKeyIndex.hasOwnProperty(accessKey))\n\t\t\t\t\taccessKeyIndex[accessKey].push(study)\n\t\t\t\telse\n\t\t\t\t\taccessKeyIndex[accessKey] = [study]\n\t\t\t}\n\t\t}\n\t\treturn accessKeyIndex\n\t}\n\tprivate getAccessKeyTab(title: string, studies: Study[], highlight: boolean = false): TabContent {\n\t\treturn {\n\t\t\thighlight: highlight,\n\t\t\ttitle: title,\n\t\t\tview: () => this.getStudyListView(studies)\n\t\t}\n\t}\n\tprivate getAccessKeyTitle(indexedAccessKeys: string[]): string {\n\t\tswitch(indexedAccessKeys.length) {\n\t\t\tcase 1:\n\t\t\t\treturn indexedAccessKeys[0]\n\t\t\tcase 2:\n\t\t\t\treturn `${indexedAccessKeys[0]}, ${indexedAccessKeys[indexedAccessKeys.length-1]}`\n\t\t\tdefault:\n\t\t\t\tindexedAccessKeys.sort()\n\t\t\t\treturn `${indexedAccessKeys[0]} ... ${indexedAccessKeys[indexedAccessKeys.length-1]}`\n\t\t}\n\t}\n\tprivate getStudyBundleKey(studies: Study[]): string {\n\t\tconst list = studies.map((study) => study.id.get())\n\t\tlist.sort((a, b) => (a - b))\n\t\treturn list.join(\",\")\n\t}\n\tprivate getAccessKeyTabList(published: boolean): TabContent[] {\n\t\tconst accessKeyTabs: TabContent[] = [this.getAccessKeyTab(\n\t\t\tLang.get(\"all\"),\n\t\t\tthis.studies.filter((study) =>\n\t\t\t\tstudy.published.get() == published && study.accessKeys.get().length\n\t\t\t),\n\t\t\ttrue\n\t\t)]\n\t\t\n\t\t//create an index to count number of studies using each accessKey:\n\t\tconst studiesPerAccessKey = this.getStudiesPerAccessKey(published)\n\t\t\n\t\t//make sure each access key shows a different list of studies,\n\t\t//If not, we combine them in [exclusiveAccessKeyAndStudyCombinations]\n\t\tconst exclusiveAccessKeyAndStudyCombinations: Record<string, {accessKeys: string[], studies: Study[]}> = {}\n\t\tfor(const accessKey in studiesPerAccessKey) {\n\t\t\tconst indexedStudies = studiesPerAccessKey[accessKey]\n\t\t\tconst key = this.getStudyBundleKey(indexedStudies)\n\t\t\tif(!exclusiveAccessKeyAndStudyCombinations.hasOwnProperty(key))\n\t\t\t\texclusiveAccessKeyAndStudyCombinations[key] = {accessKeys: [accessKey], studies: indexedStudies}\n\t\t\telse\n\t\t\t\texclusiveAccessKeyAndStudyCombinations[key].accessKeys.push(accessKey)\n\t\t}\n\t\t\n\t\t//go through all combinations and create a tab (with according title)\n\t\tfor(const id in exclusiveAccessKeyAndStudyCombinations) {\n\t\t\tconst indexedAccessKeys = exclusiveAccessKeyAndStudyCombinations[id]\n\t\t\t\n\t\t\taccessKeyTabs.push(\n\t\t\t\tthis.getAccessKeyTab(this.getAccessKeyTitle(indexedAccessKeys.accessKeys), indexedAccessKeys.studies)\n\t\t\t)\n\t\t}\n\t\t\n\t\t//For accessKey's with a single study:\n\t\t// Create an index to count how many accessKeys this study is using\n\t\t//For accessKey's for multiple studies:\n\t\t// Add them to the array\n\t\t// const exclusiveAccessKeysPerStudy: Record<number, string[]> = {}\n\t\t// for(const accessKey in studiesPerAccessKey) {\n\t\t// \tconst indexedStudies = studiesPerAccessKey[accessKey]\n\t\t// \tif(indexedStudies.length > 1)\n\t\t// \t\taccessKeyTabs.push(this.getAccessKeyTab(accessKey, indexedStudies))\n\t\t// \telse {\n\t\t// \t\t//Note: Studies can have shared and exclusive accessKeys at the same time\n\t\t// \t\tconst id = indexedStudies[0].id.get()\n\t\t// \t\tif(!exclusiveAccessKeysPerStudy.hasOwnProperty(id))\n\t\t// \t\t\texclusiveAccessKeysPerStudy[id] = [accessKey]\n\t\t// \t\telse\n\t\t// \t\t\texclusiveAccessKeysPerStudy[id].push(accessKey)\n\t\t// \t}\n\t\t// }\n\t\t//\n\t\t// // Add remaining accessKey's to array but combine the ones leading to the same study:\n\t\t// for(const id in exclusiveAccessKeysPerStudy) {\n\t\t// \tconst indexedAccessKeys = exclusiveAccessKeysPerStudy[id]\n\t\t//\n\t\t// \taccessKeyTabs.push(\n\t\t// \t\tthis.getAccessKeyTab(this.getAccessKeyTitle(indexedAccessKeys), [this.getStudyOrThrow(parseInt(id))])\n\t\t// \t)\n\t\t// }\n\t\taccessKeyTabs.sort(function(a, b) {\n\t\t\tif(a.highlight)\n\t\t\t\treturn -1\n\t\t\tif(a.title > b.title)\n\t\t\t\treturn 1\n\t\t\telse if(a.title == b.title)\n\t\t\t\treturn 0\n\t\t\telse\n\t\t\t\treturn -1\n\t\t})\n\t\treturn accessKeyTabs\n\t}\n\tprivate createAccessKeyTabLists(): void {\n\t\tthis.publicAccessKeysTabs = this.getAccessKeyTabList(true)\n\t\tthis.disabledAccessKeysTabs = this.getAccessKeyTabList(false)\n\t}\n\t\n\tprivate getStudyListView(studies: Study[]): Vnode<any, any> {\n\t\treturn <div class=\"stickerList\">{\n\t\t\tstudies.map((study) =>\n\t\t\t\t<div class={`line ${study.published.get() ? \"\" : \"unPublishedStudy\"}`}>\n\t\t\t\t\t<span class=\"title\">\n\t\t\t\t\t\t{this.getStudyLinkView(study)}\n\t\t\t\t\t\t{ study.isDifferent() &&\n\t\t\t\t\t\t\t<span class=\"extraNote\">{Lang.get('changed')}</span>\n\t\t\t\t\t\t}\n\t\t\t\t\t</span>\n\t\t\t\t\t\n\t\t\t\t\t<span class=\"accessKeys\">\n\t\t\t\t\t\t{ study.accessKeys.get().map((accessKey) =>\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t<span class=\"infoSticker\">{accessKey.get()}</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{ this.getTools().messagesLoader.studiesWithNewMessagesList[study.id.get()] &&\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<span class=\"infoSticker highlight\">{Lang.get(\"newMessages\")}</span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.getTools().merlinLogsLoader.studiesWithNewMerlinLogsList[study.id.get()] &&\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t<span class=\"infoSticker highlight\">{Lang.get(\"new_merlin_logs\")}</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t}\n\t\t\t\t\t</span>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\t\n\t\t</div>\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tif(this.studies.length == 0) {\n\t\t\treturn <div class=\"center spacingTop\">{Lang.get(\"no_studies\")}</div>\n\t\t}\n\t\t\n\t\tconst hasNewMessages = !!this.getTools().messagesLoader.studiesWithNewMessagesCount.get()\n\t\tconst newMessagesList = this.getTools().messagesLoader.studiesWithNewMessagesList || {}\n\t\tconst hasNewMerlinLogs = !!this.getTools().merlinLogsLoader.studiesWithNewMerlinLogsCount.get()\n\t\tconst newMerlinLogsList = this.getTools().merlinLogsLoader.studiesWithNewMerlinLogsList || {}\n\t\treturn TabBar(this.selectedTab, [\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"all\"),\n\t\t\t\thighlight: true,\n\t\t\t\tview: () => this.getStudyListView(this.studies)\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: m.trust(messageSvg),\n\t\t\t\thighlight: hasNewMessages,\n\t\t\t\tview: () => this.getStudyListView(this.studies.filter((study) => {\n\t\t\t\t\treturn newMessagesList[study.id.get()]\n\t\t\t\t}))\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: m.trust(merlinLogsSvg),\n\t\t\t\thighlight: hasNewMerlinLogs,\n\t\t\t\tview: () => this.getStudyListView(this.studies.filter((study) => {\n\t\t\t\t\treturn newMerlinLogsList[study.id.get()]\n\t\t\t\t}))\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"public_studies\"),\n\t\t\t\tview: () => this.getStudyListView(this.studies.filter((study) => {\n\t\t\t\t\treturn study.published.get() && !study.accessKeys.get().length\n\t\t\t\t}))\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"hidden_studies\"),\n\t\t\t\tview: () => {\n\t\t\t\t\treturn TabBar(\n\t\t\t\t\t\tthis.selectedPublicAccessKeyTab,\n\t\t\t\t\t\tthis.publicAccessKeysTabs,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: Lang.get(\"disabled\"),\n\t\t\t\tview: () => {\n\t\t\t\t\treturn TabBar(\n\t\t\t\t\t\tthis.selectedDisabledAccessKeyTab,\n\t\t\t\t\t\tthis.disabledAccessKeysTabs,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t},\n\t\t\t// {\n\t\t\t// \ttitle: Lang.get(\"disabled\"),\n\t\t\t// \tview: () => this.getStudyListView(this.studies.filter((study) => {\n\t\t\t// \t\treturn !study.published.get()\n\t\t\t// \t}))\n\t\t\t// }\n\t\t])\n\t}\n\t\n\tpublic destroy(): void {\n\t\tsuper.destroy()\n\t\tthis.destroyImpl()\n\t}\n}","import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Study} from \"../data/study/Study\";\nimport {StudiesDataType} from \"../loader/StudyLoader\";\n\nexport class Content extends SectionContent {\n\tprotected targetPage: string\n\tprotected titleString: string\n\tprivate readonly accessKey: ObservablePrimitive<string>\n\t\n\tprotected studies: Study[] = []\n\t\n\tconstructor(section: Section) {\n\t\tsuper(section)\n\t\tthis.accessKey = this.getDynamic(\"accessKey\", \"\")\n\t\t\n\t\tswitch(section.sectionValue) {\n\t\t\tcase \"appInstall\":\n\t\t\t\tthis.targetPage = \"appInstall\"\n\t\t\t\tthis.titleString = Lang.get(\"select_a_study\")\n\t\t\t\tbreak\n\t\t\tcase \"statistics\":\n\t\t\t\tthis.targetPage = \"publicStatistics\"\n\t\t\t\tthis.titleString = Lang.get(\"statistics\")\n\t\t\t\tbreak\n\t\t\tcase \"attend\":\n\t\t\tdefault:\n\t\t\t\tthis.targetPage = \"studyOverview\"\n\t\t\t\tthis.titleString = Lang.get(\"select_a_study\")\n\t\t\t\tbreak\n\t\t}\n\t}\n\tpublic preInit(): Promise<any> {\n\t\treturn this.loadStudies(this.accessKey.get())\n\t}\n\t\n\tpublic title(): string {\n\t\tconst allSections = this.section.allSections\n\t\tconst depth = this.section.depth\n\t\tif(allSections.length > depth+1) {\n\t\t\tconst id = allSections[depth+1].getStaticInt(\"id\")\n\t\t\tif(id)\n\t\t\t\treturn this.getStudyOrNull(id)?.title.get() ?? this.titleString\n\t\t}\n\t\treturn this.titleString\n\t}\n\t\n\tprotected updateSortedStudies(unsortedStudies: Study[]): void {\n\t\tconst studies = this.section.siteData.studyLoader.getSortedStudyList(unsortedStudies)\n\t\tswitch(this.section.sectionValue) {\n\t\t\tcase \"statistics\":\n\t\t\t\tthis.studies = studies.filter((study) => study.publicStatistics.charts.get().length != 0)\n\t\t\t\tbreak\n\t\t\tcase \"attend\":\n\t\t\t\tthis.studies = studies.filter((study) => study.version.get() != 0 && study.published.get())\n\t\t\t\tbreak\n\t\t\tcase \"appInstall\":\n\t\t\tdefault:\n\t\t\t\tthis.studies = studies\n\t\t\t\tbreak\n\t\t}\n\t}\n\t\n\tprivate async reloadAccessKey(e: SubmitEvent): Promise<void> {\n\t\te.preventDefault()\n\t\tconst formData = new FormData(e.target as HTMLFormElement)\n\t\tconst accessKey = formData.get(\"accessKeyInput\")?.toString() ?? \"\"\n\t\treturn this.loadStudies(accessKey)\n\t}\n\tprivate async loadStudies(accessKey: string): Promise<void> {\n\t\tdocument.cookie = `accessKey=${accessKey}`\n\t\tthis.accessKey.set(accessKey)\n\t\ttry {\n\t\t\tconst studiesObs = await this.section.loader.showLoader(this.section.siteData.studyLoader.loadAvailableStudies(this.accessKey.get(), true))\n\t\t\tthis.section.loader.closeLoader() //this will not be run if there is an error\n\t\t\tthis.updateSortedStudies(Object.values(studiesObs.get()))\n\t\t}\n\t\tcatch(e) {\n\t\t\tthis.studies = []\n\t\t}\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div class=\"accessKeyBox\">{\n\t\t\t\t\t<form method=\"post\" action=\"\" onsubmit={this.reloadAccessKey.bind(this)}>\n\t\t\t\t\t\t<label class=\"noDesc\">\n\t\t\t\t\t\t\t<small>{Lang.get(\"accessKey\")}</small>\n\t\t\t\t\t\t\t<input name=\"accessKeyInput\" type=\"text\" value={this.accessKey.get()}/>\n\t\t\t\t\t\t\t<input type=\"submit\" value={Lang.get('send')}/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</form>\n\t\t\t\t}</div>\n\t\t\t\t\n\t\t\t\t<div class=\"stickerList\">{\n\t\t\t\t\tthis.studies.map((study) =>\n\t\t\t\t\t\t<div class=\"line\">\n\t\t\t\t\t\t\t<span class=\"title\">{this.getStudyLinkView(study)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}</div>\n\t\t\t</div>\n\t\t)\n\t}\n\t\n\tprotected getStudyLinkView(study: Study): Vnode<any, any> {\n\t\treturn <a href={this.getUrl(`${this.targetPage},id:${study.id.get()}`)}>{study.title.get()} <i>{this.getStudyTagInParentheses(study)}</i></a>\n\t}\n\n\tprotected getStudyTagInParentheses(study: Study): string {\n\t\tlet studyTag = study.studyTag.get()\n\t\treturn studyTag == \"\" ? \"\" : (\"(\" + studyTag + \")\")\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m from \"mithril\"\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {getMidnightMillis, timeStampToTimeString} from \"../constants/methods\";\n\nexport interface Transformer {\n\ttoAttribute(value: PrimitiveType): PrimitiveType\n\ttoObs(value: string, obs: BaseObservable<PrimitiveType>): PrimitiveType\n}\nconst OptimusPrimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value\n\t}\n}\nconst OptimusPrimeNumberTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn parseInt(value) || 0\n\t}\n}\n\nexport class OnBeforeChangeTransformer<T extends PrimitiveType> implements Transformer {\n\tprivate readonly onBeforeChange: (before: T, after: T) => T\n\tconstructor(onBeforeChange: (before: T, after: T) => T) {\n\t\tthis.onBeforeChange = onBeforeChange\n\t}\n\tpublic toAttribute(value: T): T {\n\t\treturn value\n\t}\n\tpublic toObs(value: string, obs: BaseObservable<T>): T {\n\t\treturn this.onBeforeChange(obs.get(), value as T) || value as T\n\t}\n}\nexport const BooleanTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value ? \"1\" : \"0\"\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value == \"1\"\n\t}\n}\nexport const DateTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == 0)\n\t\t\treturn \"\"\n\t\treturn (new Date(intValue)).toISOString().split(\"T\")[0]\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value === \"\")\n\t\t\treturn 0\n\t\telse\n\t\t\treturn (new Date(value)).getTime()\n\t}\n}\nexport const TimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == -1)\n\t\t\treturn \"\"\n\t\telse {\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\treturn timeStampToTimeString(midnight + intValue)\n\t\t}\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value == \"\")\n\t\t\treturn -1\n\t\telse {\n\t\t\tconst parts = value.split(\":\")\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\tconst date = new Date()\n\t\t\tdate.setHours(parseInt(parts[0]) || 0)\n\t\t\tdate.setMinutes(parseInt(parts[1]) || 0)\n\t\t\t\n\t\t\treturn date.getTime() - midnight\n\t\t}\n\t}\n}\n\nexport function BindObservable(obs: BaseObservable<PrimitiveType>, transformer?: Transformer, attr?: keyof HTMLInputElement, event: keyof HTMLInputElement = \"onchange\"): Record<string, any> {\n\tconst attrValue = obs.get()\n\tif(!transformer) {\n\t\tif(typeof attrValue == \"number\")\n\t\t\ttransformer = OptimusPrimeNumberTransformer\n\t\telse\n\t\t\ttransformer = OptimusPrimeTransformer\n\t}\n\tif(!attr) {\n\t\tif(typeof attrValue == \"boolean\")\n\t\t\tattr = \"checked\"\n\t\telse\n\t\t\tattr = \"value\"\n\t}\n\t\n\treturn {\n\t\t[attr]: transformer.toAttribute(attrValue),\n\t\t[event]: (e: InputEvent) => {\n\t\t\tconst element = e.target as HTMLInputElement\n\t\t\tobs.set(transformer!.toObs(element[attr!] as string, obs))\n\t\t}\n\t}\n}","import m, {Component, Vnode, VnodeDOM} from \"mithril\"\nimport addSvg from \"../../imgs/icons/dragHandle.svg?raw\"\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {ArrayInterface} from \"../observable/interfaces/ArrayInterface\";\n\nexport interface DragTools {\n\tgetDragTarget(index: number, targetList: ArrayType, content?: Vnode<any, any>): Vnode<any, any>\n\tgetDragStarter(index: number, dragTarget: ArrayType): Vnode<any, any>\n}\n\ntype ArrayType = ArrayInterface<any, BaseObservable<any>>\n\ninterface DragContainerImpOptions {\n\tcontent: (container: DragTools) => Vnode<any, any>\n}\nclass DragContainerImp implements DragTools, Component<DragContainerImpOptions, any> {\n\tprivate contentVNode?: VnodeDOM<any, any>\n\tprivate currentStartList?: ArrayType\n\tprivate currentTargetList?: ArrayType\n\tprivate currentStartIndex: number = 0\n\tprivate currentTargetIndex: number = 0\n\tprivate currentDragClone?: HTMLElement\n\tprivate currentStartElement?: HTMLElement\n\tprivate startIndex: number = 0\n\t\n\tpublic getDragTarget(index: number, targetList: ArrayType, content: Vnode<any, any> = <div></div>): Vnode<any, any> {\n\t\tcontent.attrs[\"className\"] = `dragTarget ${content.attrs[\"className\"] ?? \"\"}`\n\t\tcontent.attrs[\"ondragend\"] = this.ondragend.bind(this)\n\t\tcontent.attrs[\"ondragenter\"] = this.ondragenter.bind(this, index, targetList)\n\t\treturn content\n\t}\n\t\n\tpublic getDragStarter(index: number, targetList: ArrayType): Vnode<any, any> {\n\t\treturn <div class=\"btn clickable dragStarter\" draggable=\"true\" ondragstart={this.ondragstart.bind(this, index, targetList)}>\n\t\t\t{m.trust(addSvg)}\n\t\t</div>\n\t}\n\t\n\t\n\tprivate getIndexInContainer(searchEl: HTMLElement): number {\n\t\tconst htmlCollection = this.contentVNode?.dom.getElementsByClassName(\"dragTarget\")\n\t\tif(htmlCollection) {\n\t\t\tfor(let i = htmlCollection.length - 1; i >= 0; --i) {\n\t\t\t\tif(htmlCollection[i] === searchEl)\n\t\t\t\t\treturn i\n\t\t\t}\n\t\t}\n\t\treturn -1\n\t}\n\t\n\tprivate addDragSpacer(locationEl: HTMLElement): void {\n\t\tlet insertBefore: Element | null = locationEl //when insertBefore is null, currentDragClone will be placed at the end\n\t\tif(!this.currentDragClone)\n\t\t\treturn\n\t\tif(this.currentDragClone.parentNode) {\n\t\t\tconst locationIndex = this.getIndexInContainer(locationEl)\n\t\t\tconst spacerIndex = this.getIndexInContainer(this.currentDragClone)\n\t\t\t\n\t\t\tif(spacerIndex < this.startIndex) { //mouse moved up (/right) from starting point\n\t\t\t\tif(spacerIndex < locationIndex) { //mouse is moving down (/left) again\n\t\t\t\t\tinsertBefore = locationEl.nextElementSibling\n\t\t\t\t\t++this.currentTargetIndex\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { //mouse moved down (/left) from starting point\n\t\t\t\t\n\t\t\t\t//we need to add one to targetIndex.\n\t\t\t\t// But when we are in the same list, removing the item (before moving it) means that targetIndex points to the element afterwards anyway.\n\t\t\t\t// But when we are in another list, we need to correct manually:\n\t\t\t\tif(this.currentStartList != this.currentTargetList)\n\t\t\t\t\t++this.currentTargetIndex\n\t\t\t\t\n\t\t\t\tif(spacerIndex > locationIndex) //mouse is moving up (/right) again\n\t\t\t\t\t--this.currentTargetIndex\n\t\t\t\telse\n\t\t\t\t\tinsertBefore = locationEl.nextElementSibling\n\t\t\t}\n\t\t\tthis.currentDragClone.parentNode.removeChild(this.currentDragClone)\n\t\t}\n\t\tlocationEl.parentNode?.insertBefore(this.currentDragClone, insertBefore)\n\t}\n\t\n\tprivate ondragstart(index: number, targetList: ArrayType, e: DragEvent): boolean {\n\t\tlet targetElement = e.currentTarget as HTMLElement\n\t\twhile(targetElement && !targetElement.classList.contains(\"dragTarget\")) {\n\t\t\ttargetElement = targetElement.parentNode as HTMLElement\n\t\t}\n\t\tconst dragRoot = this.contentVNode?.dom\n\t\tif(!dragRoot)\n\t\t\treturn false\n\t\t\n\t\t\n\t\tthis.startIndex = this.getIndexInContainer(targetElement)\n\t\t\n\t\tthis.currentStartList = targetList\n\t\tthis.currentStartIndex = index\n\t\t\n\t\tthis.currentDragClone = targetElement.cloneNode(true) as HTMLElement\n\t\tthis.currentDragClone?.classList.add(\"drag_spacer\")\n\t\t\n\t\tthis.currentDragClone?.addEventListener(\"dragover\", this.ondragover.bind(this))\n\t\tthis.currentDragClone?.addEventListener(\"dragleave\", this.ondragleave.bind(this))\n\t\tthis.currentDragClone?.addEventListener(\"drop\", this.ondrop.bind(this))\n\t\t\n\t\ttargetElement.classList.add(\"dragStarted\")\n\t\te.dataTransfer?.setDragImage(targetElement, 0, 0)\n\t\t\n\t\t\n\t\tthis.currentStartElement = targetElement\n\t\t\n\t\twindow.setTimeout( () => {\n\t\t\t//in firefox: setDragImage() seems to stop working when the class of document.body is changed\n\t\t\t//in chrome: DOM changes seem to cancel dragging altogether\n\t\t\t//solution: doing this stuff in a different \"thread\" seems to do the trick\n\t\t\tthis.addDragSpacer(targetElement)\n\t\t\tdragRoot.classList.add(\"is_dragging\")\n\t\t}, 0)\n\t\treturn true\n\t}\n\tprivate ondragend(e: DragEvent): void {\n\t\tthis.ondragleave(e)\n\t\te.preventDefault()\n\t\t\n\t\tthis.contentVNode?.dom.classList.remove(\"is_dragging\")\n\t\tthis.currentStartElement?.classList.remove(\"dragStarted\")\n\t\tif(this.currentDragClone?.parentNode)\n\t\t\tthis.currentDragClone.parentNode.removeChild(this.currentDragClone)\n\t\t\n\t\tthis.currentDragClone = undefined\n\t}\n\tprivate ondragenter(index: number, targetList: ArrayType, e: DragEvent): false {\n\t\tconst targetElement = e.currentTarget as HTMLElement\n\t\tif(!this.contentVNode?.dom.contains(targetElement))\n\t\t\treturn false\n\t\t\n\t\tif(e.dataTransfer)\n\t\t\te.dataTransfer.dropEffect = \"none\"\n\t\te.preventDefault()\n\t\t\n\t\tthis.currentTargetList = targetList\n\t\tthis.currentTargetIndex = index\n\t\t\n\t\tthis.addDragSpacer(targetElement)\n\t\treturn false\n\t}\n\t\n\tprivate ondragover(e: DragEvent): void {\n\t\te.preventDefault()\n\t\tif(e.dataTransfer)\n\t\t\te.dataTransfer.dropEffect = \"move\"\n\t}\n\tprivate ondragleave(e: DragEvent): void {\n\t\te.preventDefault()\n\t}\n\tprivate ondrop(e: DragEvent): void {\n\t\te.preventDefault()\n\t\t\n\t\tif(this.currentStartList == null || this.currentTargetList == null)\n\t\t\treturn\n\t\t\n\t\tif(this.currentTargetList == this.currentStartList)\n\t\t\tthis.currentTargetList.move(this.currentStartIndex, this.currentTargetIndex)\n\t\telse\n\t\t\tthis.currentTargetList.moveFromOtherList(this.currentStartList, this.currentStartIndex, this.currentTargetIndex)\n\t\t\n\t\tthis.currentStartList = this.currentTargetList = undefined\n\t\tthis.ondragend(e)\n\t}\n\t\n\tpublic onupdate(vNode: VnodeDOM<DragContainerImpOptions, any>): void {\n\t\tthis.contentVNode = vNode\n\t}\n\t\n\tpublic view(vNode: Vnode<DragContainerImpOptions, any>): Vnode<any, any> {\n\t\treturn vNode.attrs.content(this)\n\t}\n}\n\n\nexport function DragContainer(\n\tcontent: (container: DragTools) => Vnode<any, any>\n): Vnode<any, any> {\n\treturn m(DragContainerImp, { content: content })\n}","import m, {Vnode} from \"mithril\"\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {DragContainer} from \"./DragContainer\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {ArrayInterface} from \"../observable/interfaces/ArrayInterface\";\n\nexport interface TabContent {\n\ttitle: string | Vnode<any, any>\n\tdraggableList?: ArrayInterface<any, BaseObservable<any>>\n\thighlight?: boolean\n\tview: () => Vnode<any, any>\n}\n\nexport function TabBar(selectedIndex: ObservablePrimitive<number>, tabs: (TabContent | undefined | false)[], smallBar: boolean = false, addBtnCallback?: (e: MouseEvent) => void): Vnode<any, any> {\n\tif(!tabs.length)\n\t\treturn (<div></div>)\n\t\n\tif(selectedIndex.get() >= tabs.length)\n\t\tselectedIndex.set(0)\n\treturn (\n\t\tDragContainer((dragTools) => {\n\t\t\tconst selectedTab = tabs[selectedIndex.get()]\n\t\t\treturn <div>\n\t\t\t\t<div>\n\t\t\t\t\t<div class={smallBar ? \"tabBar smallBar\" : \"tabBar\"}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttabs.map((tab, index) => {\n\t\t\t\t\t\t\t\tif(!tab)\n\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\tconst className = `tab ${(selectedIndex.get() == index) ? \"selected\" : \"\"} ${tab.highlight ? \"highlight\" : \"\"}`\n\t\t\t\t\t\t\t\tconst content = <div class={className} onclick={() => {selectedIndex.set(index)}}>\n\t\t\t\t\t\t\t\t\t<div class=\"left\">\n\t\t\t\t\t\t\t\t\t\t{tab.draggableList && dragTools.getDragStarter(index, tab.draggableList)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<span class=\"middle\">{tab.title}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\treturn tab.draggableList\n\t\t\t\t\t\t\t\t\t? dragTools.getDragTarget(index, tab.draggableList, content)\n\t\t\t\t\t\t\t\t\t: content\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{addBtnCallback &&\n\t\t\t\t\t\t\t<div class=\"tab addBtn\" onclick={addBtnCallback}>\n\t\t\t\t\t\t\t\t<span class=\"middle\">+</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"tabContent\">\n\t\t\t\t\t{selectedTab && selectedTab.view()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t})\n\t)\n}"],"names":["section","studiesObs","publicAccessKeysTabs","disabledAccessKeysTabs","studies","ownerRegister","siteData","studyLoader","selectedOwner","dynamicValues","getOrCreateObs","selectedPublicAccessKeyTab","selectedDisabledAccessKeyTab","selectedTab","sectionValue","targetPage","getTools","merlinLogsLoader","studiesWithNewMerlinLogsCount","get","set","titleString","Lang","messagesLoader","studiesWithNewMessagesCount","updateSortedStudies","getStudiesFromObservable","createAccessKeyTabLists","addObserver","messagesObserverId","studyObserverId","_origin","bubbled","destroyImpl","removeObserver","preLoad","getStrippedStudyListPromise","preInit","Promise","resolve","titleExtra","ownerList","Object","keys","this","length","class","BindObservable","value","map","name","hasAlternatives","getAlternatives","allSections","depth","id","getStaticInt","study","currentId","title","target","getUrl","unsortedStudies","getSortedStudyList","filter","hasPermission","values","studyId","push","getStudiesPerAccessKey","published","accessKeyIndex","studyAccessKeys","accessKeys","i","accessKey","hasOwnProperty","getAccessKeyTab","highlight","view","getStudyListView","getAccessKeyTitle","indexedAccessKeys","sort","getStudyBundleKey","list","a","b","join","getAccessKeyTabList","accessKeyTabs","studiesPerAccessKey","exclusiveAccessKeyAndStudyCombinations","indexedStudies","key","getStudyLinkView","isDifferent","studiesWithNewMessagesList","studiesWithNewMerlinLogsList","getView","hasNewMessages","newMessagesList","hasNewMerlinLogs","newMerlinLogsList","TabBar","destroy","getDynamic","loadStudies","getStudyOrNull","publicStatistics","charts","version","reloadAccessKey","e","preventDefault","formData","FormData","toString","document","cookie","loader","showLoader","loadAvailableStudies","closeLoader","method","action","onsubmit","bind","type","href","getStudyTagInParentheses","studyTag","_section","defaultValue","setDynamic","newValue","setChild","getStaticString","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getAdmin","isLoggedIn","getHash","goTo","window","location","hash","newSection","OptimusPrimeTransformer","toAttribute","toObs","OptimusPrimeNumberTransformer","parseInt","onBeforeChange","obs","BooleanTransformer","DateTransformer","intValue","Date","toISOString","split","getTime","TimeTransformer","midnight","parts","date","setHours","setMinutes","transformer","attr","event","attrValue","element","currentStartIndex","currentTargetIndex","startIndex","getDragTarget","index","targetList","content","attrs","ondragend","ondragenter","getDragStarter","draggable","ondragstart","getIndexInContainer","searchEl","htmlCollection","contentVNode","dom","getElementsByClassName","addDragSpacer","locationEl","insertBefore","currentDragClone","parentNode","locationIndex","spacerIndex","nextElementSibling","currentStartList","currentTargetList","removeChild","targetElement","currentTarget","classList","contains","dragRoot","cloneNode","add","addEventListener","ondragover","ondragleave","ondrop","dataTransfer","setDragImage","currentStartElement","setTimeout","remove","undefined","dropEffect","move","moveFromOtherList","onupdate","vNode","DragContainer","DragContainerImp","selectedIndex","tabs","smallBar","addBtnCallback","dragTools","tab","className","onclick","draggableList"],"sourceRoot":""}