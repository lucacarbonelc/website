{"version":3,"file":"7005.8680e4e5dd43fc1270e2.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/errorView.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Component, Vnode, VnodeDOM} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {Requests} from \"../singletons/Requests\";\nimport {FILE_ADMIN} from \"../constants/urls\";\nimport {ErrorReportInfo} from \"../data/errorReports/ErrorReportInfo\";\n\ninterface ErrorReportComponentOptions {\n\treport: string\n}\nclass ErrorReportComponent implements Component<ErrorReportComponentOptions, any> {\n\tprivate rootViewOffset: number = 0\n\tprivate errorLines: HTMLElement[] = []\n\tprivate warningLines: HTMLElement[] = []\n\tprivate logLines: HTMLElement[] = []\n\tprivate stickyLines: Record<number, HTMLElement> = {}\n\t\n\tprivate addLineContent(view: HTMLElement, innerText: string, cssText: string): void {\n\t\tconst span = document.createElement(\"span\")\n\t\tspan.style.cssText = cssText\n\t\tspan.innerText = innerText\n\t\tview.appendChild(span)\n\t}\n\t\n\tprivate clickLine(line: HTMLElement, index: number): void {\n\t\tif(line.classList.contains(\"sticky\")) {\n\t\t\tline.classList.remove(\"sticky\");\n\t\t\tline.style.top = \"0\"\n\t\t\tline.style.bottom = \"0\"\n\t\t\t\n\t\t\tdelete this.stickyLines[index]\n\t\t}\n\t\telse {\n\t\t\tthis.stickyLines[index] = line\n\t\t\tline.classList.add(\"sticky\")\n\t\t}\n\t\tthis.updateStickyPositions()\n\t}\n\t\n\tprivate updateStickyPositions(): void {\n\t\tlet height = -10;\n\t\t\n\t\tfor(let index in this.stickyLines) {\n\t\t\tconst view = this.stickyLines[index]\n\t\t\t\n\t\t\tview.style.top = `${height}px`\n\t\t\theight += view.clientHeight\n\t\t}\n\t\t\n\t\tlet heightBottom = 0;\n\t\tfor(let index in this.stickyLines) {\n\t\t\tconst view = this.stickyLines[index]\n\t\t\t\n\t\t\theightBottom += view.clientHeight;\n\t\t\tview.style.bottom = `${height-heightBottom}px`\n\t\t}\n\t}\n\t\n\t\n\t\n\tprivate clickLineCategory(lines: HTMLElement[]): void {\n\t\tfor(let line of lines) {\n\t\t\tconst rect = line.getBoundingClientRect()\n\t\t\tif(rect.top - this.rootViewOffset > 0) {\n\t\t\t\tline.scrollIntoView({behavior: 'smooth'})\n\t\t\t\treturn\n\t\t\t}\n\t\t\t\n\t\t\tlines[0].scrollIntoView({behavior: 'smooth'})\n\t\t}\n\t\tconsole.log(this.warningLines[1].getBoundingClientRect())\n\t}\n\t\n\tpublic oncreate(vNode: VnodeDOM<ErrorReportComponentOptions, any>): void {\n\t\tconst infoView = vNode.dom.getElementsByClassName(\"errorReportHeader\")[0] as HTMLElement\n\t\tconst rootView = vNode.dom.getElementsByClassName(\"errorReportList\")[0] as HTMLElement\n\t\t\n\t\tconst lines = vNode.attrs.report.split(\"\\n\\n\")\n\t\tthis.rootViewOffset = rootView.getBoundingClientRect().top\n\t\t\n\t\tconst firstLine = lines[0].split(\"\\n\")\n\t\tfor(const element of firstLine) {\n\t\t\tconst view = document.createElement(\"div\")\n\t\t\tview.classList.add(\"line\")\n\t\t\tview.innerText = element\n\t\t\tinfoView.appendChild(view)\n\t\t}\n\t\t\n\t\tfor(let i = 1; i < lines.length; i++) {\n\t\t\tconst line = lines[i]\n\t\t\tlet content = line.trim()\n\t\t\tconst view = document.createElement(\"div\")\n\t\t\tview.classList.add(\"line\")\n\t\t\t\n\t\t\tconst pre = document.createElement(\"pre\")\n\t\t\tview.appendChild(pre)\n\t\t\t\n\t\t\tif(content.startsWith(\"Error:\")) {\n\t\t\t\tthis.errorLines.push(view)\n\t\t\t\tthis.addLineContent(pre, \"Error:\", \"color: red; font-weight: bold;\")\n\t\t\t\tcontent = content.substring(6)\n\t\t\t}\n\t\t\telse if(content.startsWith(\"Warning:\")) {\n\t\t\t\tthis.warningLines.push(view)\n\t\t\t\tthis.addLineContent(pre, \"Warning:\", \"color: orange;\")\n\t\t\t\tcontent = content.substring(8)\n\t\t\t}\n\t\t\telse if(content.startsWith(\"Log:\")) {\n\t\t\t\tthis.logLines.push(view)\n\t\t\t\tthis.addLineContent(pre, \"Log:\", \"font-weight: bold;\")\n\t\t\t\tcontent = content.substring(4)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.logLines.push(view)\n\t\t\t}\n\t\t\t\n\t\t\tif(content.indexOf(\"Cold starting app\") != -1) {\n\t\t\t\tview.classList.add(\"divider\");\n\t\t\t}\n\t\t\tconst span = document.createElement(\"span\")\n\t\t\tspan.innerText = content\n\t\t\tpre.appendChild(span)\n\t\t\tpre.addEventListener(\"click\", this.clickLine.bind(this, view, i))\n\t\t\t\n\t\t\trootView.appendChild(view);\n\t\t}\n\t}\n\t\n\tpublic view(): Vnode<any, any> {\n\t\treturn <div>\n\t\t\t{(this.warningLines.length != 0 || this.errorLines.length != 0) &&\n\t\t\t\t<div class=\"errorReportInfo smallText\">\n\t\t\t\t\t<div class=\"clickable\" onclick={this.clickLineCategory.bind(this, this.logLines)}>\n\t\t\t\t\t\t<span>Logs:&nbsp;</span>\n\t\t\t\t\t\t<span>{this.logLines.length}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"clickable\" onclick={this.clickLineCategory.bind(this, this.warningLines)}>\n\t\t\t\t\t\t<span>Warnings:&nbsp;</span>\n\t\t\t\t\t\t<span style=\"color: orange\">{this.warningLines.length}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"clickable\" onclick={this.clickLineCategory.bind(this, this.errorLines)}>\n\t\t\t\t\t\t<span>Errors:&nbsp;</span>\n\t\t\t\t\t\t<span style=\"color: red\">{this.errorLines.length}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t<div class=\"errorReportHeader\"></div>\n\t\t\t<div class=\"errorReportList\"></div>\n\t\t</div>\n\t}\n}\n\nexport class Content extends SectionContent {\n\tprivate readonly report: string\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tRequests.loadRaw(`${FILE_ADMIN}?type=GetError&timestamp=${section.getStaticInt(\"timestamp\")}`)\n\t\t]\n\t}\n\tconstructor(section: Section, report: string) {\n\t\tsuper(section)\n\t\tthis.report = report\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"errorReports\")\n\t}\n\t\n\tprivate getName(report: ErrorReportInfo): string {\n\t\tconst date = new Date(report.timestamp).toLocaleString()\n\t\treturn report.note ? `${report.note} (${date})` : date\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn m(ErrorReportComponent, {report: this.report})\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}"],"names":["rootViewOffset","errorLines","warningLines","logLines","stickyLines","addLineContent","view","innerText","cssText","span","document","createElement","style","appendChild","clickLine","line","index","classList","contains","remove","top","bottom","this","add","updateStickyPositions","height","clientHeight","heightBottom","clickLineCategory","lines","getBoundingClientRect","scrollIntoView","behavior","console","log","oncreate","vNode","infoView","dom","getElementsByClassName","rootView","attrs","report","split","element","i","length","content","trim","pre","startsWith","push","substring","indexOf","addEventListener","bind","class","onclick","section","preLoad","loadRaw","getStaticInt","title","get","getName","date","Date","timestamp","toLocaleString","note","getView","ErrorReportComponent","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","getUrl","depth","getHash","goTo","target","window","location","hash","newSection","destroy"],"sourceRoot":""}