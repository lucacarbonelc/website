{"version":3,"file":"8779.815cc2e1e0e6a4e20b18.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/loader/csv/CsvLoaderCollectionFromCharts.ts","webpack://ESMira/./src/frontend/ts/observable/ObservablePromise.ts","webpack://ESMira/./src/frontend/ts/pages/statsParticipants.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/ChartView.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashElement.tsx","webpack://ESMira/./src/frontend/ts/widgets/DashRow.tsx","webpack://ESMira/./src/frontend/ts/widgets/NotCompatibleIcon.tsx","webpack://ESMira/./src/frontend/ts/widgets/SearchBox.tsx","webpack://ESMira/./src/frontend/ts/widgets/SearchWidget.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {Study} from \"../../data/study/Study\";\nimport {FILE_RESPONSES, FILE_STATISTICS} from \"../../constants/urls\";\nimport {StudyDataValues} from \"../../helpers/StudyDataValues\";\nimport {CsvLoader} from \"./CsvLoader\";\nimport {AxisContainer} from \"../../data/study/AxisContainer\";\nimport {LoaderState} from \"../../site/LoaderState\";\nimport {ChartData} from \"../../data/study/ChartData\";\nimport {StatisticsCollection} from \"../../data/statistics/StatisticsCollection\";\nimport {Requests} from \"../../singletons/Requests\";\n\n\nexport interface LoadedStatistics {\n\t/**\n\t * This represents, in most cases, personal statistics. Main exception is the publicStatistics section.\n\t */\n\tmainStatistics: StatisticsCollection\n\t/**\n\t * This represents, in most cases, public statistics. Main exception is the publicStatistics section.\n\t */\n\tadditionalStatistics?: StatisticsCollection\n}\n\nexport class CsvLoaderCollectionFromCharts {\n\tprivate readonly loaderState: LoaderState\n\tprivate readonly study: Study\n\tprivate readonly variableGroupIndex: Record<string, number> = {}\n\tprivate readonly urlTemplate: string\n\tprivate readonly personalStatistics: StatisticsCollection = {}\n\t\n\tprivate readonly csvLoaders: Record<number, CsvLoader> = {}\n\tprivate publicStatistics?: StatisticsCollection\n\t\n\tprivate charts: ChartData[] = []\n\tprivate needsPublicStatistics: boolean = false\n\t\n\tconstructor(loaderState: LoaderState, study: Study) {\n\t\tthis.loaderState = loaderState\n\t\tthis.study = study\n\t\tthis.urlTemplate = FILE_RESPONSES.replace('%1', study.id.get().toString())\n\t}\n\t\n\t/**\n\t *\n\t * @param charts\n\t */\n\tpublic async setupLoadersForCharts(charts: ChartData[]): Promise<void> {\n\t\tthis.charts = charts\n\t\tconst questionnaires = this.study.questionnaires.get()\n\t\tfor(let i=questionnaires.length-1; i>=0; --i) {\n\t\t\tconst questionnaire = questionnaires[i]\n\t\t\tconst variables = StudyDataValues.getQuestionnaireVariables(questionnaire)\n\t\t\tvariables.forEach((variable) => {\n\t\t\t\tthis.variableGroupIndex[variable] = i;\n\t\t\t})\n\t\t}\n\t\t\n\t\tfor(const chart of this.charts) {\n\t\t\tawait this.checkAxis(chart.axisContainer.get())\n\t\t\tif(chart.displayPublicVariable.get())\n\t\t\t\tawait this.checkAxis(chart.publicVariables.get())\n\t\t}\n\t}\n\tprivate async checkAxis(axisContainerArray: AxisContainer[]) {\n\t\tfor(const axisContainer of axisContainerArray) {\n\t\t\tconst xAxis = axisContainer.xAxis\n\t\t\tconst yAxis = axisContainer.yAxis\n\t\t\t\n\t\t\tawait this.addLoader(xAxis.variableName.get())\n\t\t\tawait this.addLoader(yAxis.variableName.get())\n\t\t}\n\t}\n\tprivate async addLoader(variableName: string): Promise<void> {\n\t\tif(!variableName)\n\t\t\treturn\n\t\tconst questionnaireI = this.variableGroupIndex[variableName]\n\t\tif(!this.csvLoaders[questionnaireI]) {\n\t\t\tconst url = this.urlTemplate.replace('%2', this.study.questionnaires.get()[questionnaireI].internalId.get().toString())\n\t\t\tthis.csvLoaders[questionnaireI] = await CsvLoader.fromUrl(this.loaderState, url)\n\t\t}\n\t}\n\t\n\t\n\tprivate combineStatistics(newStatistics: StatisticsCollection): void {\n\t\tfor(const variableName in newStatistics) {\n\t\t\tconst newVariable = newStatistics[variableName]\n\t\t\t\n\t\t\tif(!this.personalStatistics.hasOwnProperty(variableName))\n\t\t\t\tthis.personalStatistics[variableName] = newVariable\n\t\t\telse {\n\t\t\t\tconst currentVariable = this.personalStatistics[variableName]\n\t\t\t\tnewVariable.forEach((newEntry, index) => {\n\t\t\t\t\tif(!currentVariable[index] || newEntry.entryCount != 0) //this could is probably a dry run and the target variable is loaded from another csvLoader\n\t\t\t\t\t\tcurrentVariable[index] = newEntry\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\tprivate async addStatistics(csvLoader: CsvLoader): Promise<void> {\n\t\tfor(const chart of this.charts) {\n\t\t\tconst newStatistics = await csvLoader.getStatistics(\n\t\t\t\tchart.axisContainer.get(),\n\t\t\t\tchart.dataType.get()\n\t\t\t)\n\t\t\tthis.combineStatistics(newStatistics)\n\t\t\tif(chart.displayPublicVariable.get())\n\t\t\t\tthis.needsPublicStatistics = true\n\t\t}\n\t}\n\t\n\tpublic async loadStatisticsFromFiles(userName?: string, dontLoadPublicStatistics: boolean = false): Promise<LoadedStatistics> {\n\t\tfor(const i in this.csvLoaders) {\n\t\t\t//Note: This runs through all csvLoaders with every chart and their variables. Even when a chart (or variable) does not need the csvLoader\n\t\t\tconst csvLoader = this.csvLoaders[i]\n\t\t\tif(userName) {\n\t\t\t\tawait csvLoader.filterEntireColumn(false, \"userId\")\n\t\t\t\tawait csvLoader.filterByValue(true, \"userId\", userName)\n\t\t\t}\n\t\t\tawait this.addStatistics(csvLoader)\n\t\t}\n\t\t\n\t\tif(this.needsPublicStatistics && !dontLoadPublicStatistics) {\n\t\t\tif(!this.publicStatistics) {\n\t\t\t\tconst accessKeys = this.study.accessKeys.get()\n\t\t\t\tconst accessKey = accessKeys.length ? accessKeys[0].get() : \"\"\n\t\t\t\tthis.publicStatistics = await Requests.loadJson(FILE_STATISTICS.replace(\"%d\", this.study.id.get().toString()).replace(\"%s\", accessKey))\n\t\t\t}\n\t\t\t\n\t\t\treturn {\n\t\t\t\tmainStatistics: this.personalStatistics,\n\t\t\t\tadditionalStatistics: this.publicStatistics\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\treturn {mainStatistics: this.personalStatistics}\n\t}\n}","import {ObservableTypes} from \"./types/ObservableTypes\";\nimport {BaseObservable} from \"./BaseObservable\";\nimport { JsonTypes } from \"./types/JsonTypes\";\n\n/**\n * A observable Wrapper that can hold a Promise\n */\nexport class ObservablePromise<T> extends BaseObservable<Promise<T>> {\n\tprotected backingField: Promise<T>\n\t\n\tconstructor(value: Promise<T>, parent: BaseObservable<ObservableTypes> | null, key: string) {\n\t\tsuper(parent, key)\n\t\tthis.keyName = key\n\t\tthis.backingField = value\n\t}\n\t\n\tpublic reCalcIsDifferent(_: boolean = false): void {\n\t\t//do nothing\n\t}\n\t\n\tpublic createJson(): JsonTypes {\n        return \"\"\n    }\n\t\n\tpublic isDifferent(): boolean {\n\t\treturn false\n\t}\n\t\n\tpublic get(): Promise<any> {\n\t\treturn this.backingField\n\t}\n\tpublic set(value: Promise<T>, silently: boolean = false): void {\n\t\tthis.backingField = value\n\t\tif(!silently)\n\t\t\tthis.hasMutated(true, true)\n\t}\n\tpublic setValue(value: T, silently: boolean = false) {\n\t\tthis.set(Promise.resolve(value), silently)\n\t}\n}","import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {DashRow} from \"../widgets/DashRow\";\nimport {DashElement} from \"../widgets/DashElement\";\nimport {FILE_RESPONSES} from \"../constants/urls\";\nimport {CsvLoader} from \"../loader/csv/CsvLoader\";\nimport {ChartData} from \"../data/study/ChartData\";\nimport {CsvLoaderCollectionFromCharts, LoadedStatistics} from \"../loader/csv/CsvLoaderCollectionFromCharts\";\nimport {ObservablePromise} from \"../observable/ObservablePromise\";\nimport {ChartView} from \"../widgets/ChartView\";\nimport {SearchBox} from \"../widgets/SearchBox\";\nimport {ValueListInfo} from \"../loader/csv/ValueListInfo\";\nimport {StatisticsCollection} from \"../data/statistics/StatisticsCollection\";\nimport {Study} from \"../data/study/Study\";\nimport {AxisContainer} from \"../data/study/AxisContainer\";\nimport {BtnReload} from \"../widgets/BtnWidgets\";\n\nexport class Content extends SectionContent {\n\tprivate readonly csvLoader: CsvLoader\n\tprivate readonly personalStatisticsCsvLoaderCollection: CsvLoaderCollectionFromCharts\n\tprivate readonly enableGroupStatistics: boolean\n\tprivate publicStatistics?: StatisticsCollection\n\t\n\tprivate participantList: { name: string, count: number }[] = []\n\tprivate groupList: ValueListInfo[] = []\n\tprivate timezoneList: ValueListInfo[] = []\n\tprivate appTypeList: ValueListInfo[] = []\n\tprivate modelList: ValueListInfo[] = []\n\tprivate joinedTimeList: ValueListInfo[] = []\n\tprivate quitTimeList: ValueListInfo[] = []\n\tprivate currentParticipant = \"\"\n\tprivate isLoading: boolean = false\n\t\n\tprivate readonly joinedPerDayChart: ChartData\n\t\n\tprivate readonly joinedPerDayPromise: ObservablePromise<LoadedStatistics>\n\tprivate readonly personalChartPromises: ObservablePromise<LoadedStatistics>[]\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\tconst url = FILE_RESPONSES.replace('%1', (section.getStaticInt(\"id\") ?? 0).toString()).replace('%2', 'events');\n\t\treturn [\n\t\t\tCsvLoader.fromUrl(section.loader, url),\n\t\t\tsection.getStudyPromise()\n\t\t]\n\t}\n\t\n\tconstructor(section: Section, csvLoader: CsvLoader, study: Study) {\n\t\tsuper(section)\n\t\tthis.csvLoader = csvLoader\n\t\tthis.personalStatisticsCsvLoaderCollection = new CsvLoaderCollectionFromCharts(section.loader, this.getStudyOrThrow())\n\t\t\n\t\tthis.enableGroupStatistics = csvLoader.hasColumn(\"group\")\n\t\t\n\t\tconst tempPromise = Promise.resolve({mainStatistics: {}})\n\t\tthis.joinedPerDayChart = ChartData.createPerDayChartData(Lang.get(\"questionnaires\"))\n\t\tthis.joinedPerDayPromise = new ObservablePromise<LoadedStatistics>(tempPromise, null, \"questionnairePerDayPromise\")\n\t\t\n\t\tthis.personalChartPromises = study.personalStatistics.charts.get().map(\n\t\t\t(_chart, index) => new ObservablePromise<LoadedStatistics>(tempPromise, null, `personalChart${index}`)\n\t\t)\n\t}\n\t\n\tpublic async preInit(): Promise<void> {\n\t\tawait this.personalStatisticsCsvLoaderCollection.setupLoadersForCharts(this.getStudyOrThrow().personalStatistics.charts.get())\n\t\tawait this.loadParticipants()\n\t\tconst userId = this.getStaticString(\"userId\")\n\t\tif(userId)\n\t\t\tawait this.selectParticipant(atob(userId))\n\t\t\n\t\twindow.setTimeout(() => {\n\t\t\tconst line = document.getElementsByClassName(\"currentParticipant\")\n\t\t\tif(line[0])\n\t\t\t\tline[0].scrollIntoView({behavior: \"smooth\", block: \"nearest\"})\n\t\t}, 500)\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"participants\")\n\t}\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn BtnReload(this.section.reload.bind(this.section), Lang.get(\"reload\"))\n\t}\n\t\n\tprivate async loadParticipants(): Promise<void> {\n\t\tawait this.csvLoader.filterEntireColumn(false, \"eventType\")\n\t\tawait this.csvLoader.filterByValue(true, \"eventType\", \"questionnaire\")\n\t\tconst fullList = await this.csvLoader.getValueCellList(\"userId\")\n\t\t\n\t\tfor(const value in fullList) {\n\t\t\tthis.participantList.push({\n\t\t\t\tname: value,\n\t\t\t\tcount: await this.csvLoader.getVisibleCount(\"userId\", value)\n\t\t\t})\n\t\t}\n\t\tthis.participantList.sort((a, b) => {\n\t\t\tif(a.count == b.count) {\n\t\t\t\tif(a.name < b.name)\n\t\t\t\t\treturn -1\n\t\t\t\telse if(a.name > b.name)\n\t\t\t\t\treturn 1\n\t\t\t\telse\n\t\t\t\t\treturn 0\n\t\t\t}\n\t\t\tif(a.count < b.count)\n\t\t\t\treturn 1\n\t\t\telse\n\t\t\t\treturn -1\n\t\t})\n\t}\n\t\n\tprivate async selectParticipant(userId: string): Promise<void> {\n\t\tthis.isLoading = true\n\t\tawait this.csvLoader.reset()\n\t\t\n\t\tawait this.csvLoader.filterEntireColumn(false, \"userId\")\n\t\tawait this.csvLoader.filterByValue(true, \"userId\", userId)\n\t\t\n\t\tthis.timezoneList = await this.csvLoader.getValueListInfo(\"timezone\")\n\t\tthis.appTypeList = await this.csvLoader.getValueListInfo(\"appType\")\n\t\tthis.modelList = await this.csvLoader.getValueListInfo(\"model\")\n\t\tif(this.enableGroupStatistics)\n\t\t\tthis.groupList = await this.csvLoader.getValueListInfo(\"group\")\n\t\t\n\t\tawait this.csvLoader.filterEntireColumn(false, \"eventType\")\n\t\tawait this.csvLoader.filterByValue(true, \"eventType\", \"questionnaire\")\n\t\t\n\t\tthis.joinedPerDayChart.axisContainer.replace(await AxisContainer.getPerDayAxisCodeFromValueList(this.csvLoader, \"questionnaireName\"))\n\t\tthis.joinedPerDayPromise.setValue(await this.csvLoader.getPersonalStatisticsFromChart(this.joinedPerDayChart))\n\t\t\n\t\t\n\t\tawait this.csvLoader.filterByValue(false, \"eventType\", \"questionnaire\")\n\t\tawait this.csvLoader.filterByValue(true, \"eventType\", \"joined\")\n\t\tthis.joinedTimeList = await this.csvLoader.getValueListInfo(\"responseTime\")\n\t\tawait this.csvLoader.filterByValue(false, \"eventType\", \"joined\")\n\t\t\n\t\tawait this.csvLoader.filterByValue(true, \"eventType\", \"quit\")\n\t\tthis.quitTimeList = await this.csvLoader.getValueListInfo(\"responseTime\")\n\t\t\n\t\tthis.section.loader.update(Lang.get(\"state_loading_file\", Lang.get(\"statistics\")))\n\t\t\n\t\t\n\t\tconst loadedStatisticsData = await this.personalStatisticsCsvLoaderCollection.loadStatisticsFromFiles(userId, !!this.publicStatistics)\n\t\t\n\t\t\n\t\t//we only load public statistics when loading it the first time. For all the other times, we reuse the cached version:\n\t\tif(loadedStatisticsData.additionalStatistics)\n\t\t\tthis.publicStatistics = loadedStatisticsData.additionalStatistics\n\t\tconst statisticsData = {\n\t\t\tmainStatistics: loadedStatisticsData.mainStatistics,\n\t\t\tadditionalStatistics: this.publicStatistics\n\t\t}\n\t\t\n\t\tthis.personalChartPromises.forEach((promise) => {\n\t\t\tpromise.set(Promise.resolve(statisticsData))\n\t\t})\n\t\t\n\t\tthis.currentParticipant = userId\n\t\tthis.isLoading = false\n\t\t\n\t\tm.redraw()\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst study = this.getStudyOrThrow()\n\t\tconst participantList = DashElement(null, {\n\t\t\tcontent: SearchBox(Lang.get(\"participants_with_count\", this.participantList.length), this.participantList.map((valueListInfo) => {\n\t\t\t\treturn {\n\t\t\t\t\tkey: valueListInfo.name,\n\t\t\t\t\tview:\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass={`clickable verticalPadding searchTarget smallText ${this.currentParticipant == valueListInfo.name ? \"highlight currentParticipant\" : \"\"}`}\n\t\t\t\t\t\t\tonclick={this.selectParticipant.bind(this, valueListInfo.name)}\n\t\t\t\t\t\t>{Lang.get(\"text_with_questionnaireCount\", valueListInfo.name, valueListInfo.count)}</div>\n\t\t\t\t}\n\t\t\t}))\n\t\t})\n\t\tif(this.currentParticipant) {\n\t\t\treturn <div class={this.isLoading ? \"fadeOut\" : \"fadeIn\"}>\n\t\t\t\t{DashRow(\n\t\t\t\t\tparticipantList,\n\t\t\t\t\tDashElement(\"vertical\",\n\t\t\t\t\t\tthis.enableGroupStatistics && {content: this.getListEntryView(Lang.getWithColon(\"group\"), this.groupList)},\n\t\t\t\t\t\t{content: this.getListEntryView(Lang.getWithColon(\"timezone\"), this.timezoneList)},\n\t\t\t\t\t\t{content: this.getListEntryView(Lang.getWithColon(\"app_type\"), this.appTypeList)},\n\t\t\t\t\t\t{content: this.getListEntryView(Lang.getWithColon(\"model\"), this.modelList)}\n\t\t\t\t\t),\n\t\t\t\t\tDashElement(null, {content: this.getListEntryView(Lang.getWithColon(\"joined_study\"), this.joinedTimeList)}),\n\t\t\t\t\tDashElement(null, {content: this.getListEntryView(Lang.getWithColon(\"quit_study\"), this.quitTimeList)}),\n\t\t\t\t\tDashElement(\"stretched\", {\n\t\t\t\t\t\tcontent: ChartView(this.joinedPerDayChart, this.joinedPerDayPromise)\n\t\t\t\t\t})\n\t\t\t\t)}\n\t\t\t\t\n\t\t\t\t{TitleRow(Lang.getWithColon(\"personal_charts_for_x\", this.currentParticipant))}\n\t\t\t\t{\n\t\t\t\t\tstudy.personalStatistics.charts.get().map((chartData, index) => {\n\t\t\t\t\t\treturn ChartView(chartData, this.personalChartPromises[index])\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t}\n\t\telse {\n\t\t\treturn DashRow(\n\t\t\t\tparticipantList\n\t\t\t)\n\t\t}\n\t}\n\t\n\tprivate getListEntryView(header: string, list: ValueListInfo[]): Vnode<any, any> {\n\t\treturn <div>\n\t\t\t<h2 class=\"spacingLeft\">{header}</h2>\n\t\t\t<div class=\"horizontalPadding center\">\n\t\t\t\t{list.map((info) =>\n\t\t\t\t\t<div class=\"verticalPadding\">{info.name}</div>)\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Component, Vnode, VnodeDOM} from \"mithril\";\nimport {LoadedStatistics} from \"../loader/csv/CsvLoaderCollectionFromCharts\";\nimport {ChartJsBox} from \"../helpers/ChartJsBox\";\nimport {ObserverId} from \"../observable/BaseObservable\";\nimport {ChartData} from \"../data/study/ChartData\";\nimport {LoadingSpinner} from \"./LoadingSpinner\";\nimport {ObservablePromise} from \"../observable/ObservablePromise\";\n\ninterface ChartComponentOptions {\n\tpromise: ObservablePromise<LoadedStatistics>\n\tchart: ChartData\n\tclassName?: string //in case the parent has added a className that we need to include\n\tnoSort: boolean\n}\n\nclass ChartComponent implements Component<ChartComponentOptions, any> {\n\tprivate enabled: boolean = false\n\tprivate chart?: ChartData\n\tprivate chartView?: HTMLElement\n\tprivate chartViewBox?: ChartJsBox\n\tprivate promiseObserverId?: ObserverId\n\t\n\t\n\tprivate async drawGraph(chart: ChartData, promise: Promise<LoadedStatistics>, noSort: boolean): Promise<void> {\n\t\tthis.enabled = false\n\t\tm.redraw()\n\t\t\n\t\tconst data = await promise\n\t\tconst view = this.chartView\n\t\t\n\t\tif(!view)\n\t\t\treturn\n\t\twhile(view?.hasChildNodes()) {\n\t\t\tview.removeChild(view.lastChild!)\n\t\t}\n\t\t\n\t\tthis.chartViewBox = new ChartJsBox(view, data.mainStatistics, data.additionalStatistics ?? {}, chart, noSort)\n\t\tthis.enabled = true\n\t\tm.redraw()\n\t}\n\t\n\tpublic oncreate(vNode: VnodeDOM<ChartComponentOptions, any>): void {\n\t\tconst promise = vNode.attrs.promise\n\t\tconst chart = vNode.attrs.chart\n\t\tconst noSort = vNode.attrs.noSort\n\t\tthis.chart = chart\n\t\tthis.chartView = vNode.dom.getElementsByClassName(\"chartViewWindow\")[0] as HTMLElement\n\t\t\n\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\tthis.promiseObserverId = promise.addObserver(() => {\n\t\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\t})\n\t}\n\t\n\tpublic onupdate(vNode: VnodeDOM<ChartComponentOptions, any>): void {\n\t\t//when a section is replaced with another section with the same content (but from a different study), mithril js will not reload this ChartView but call onupdate instead\n\t\tconst promise = vNode.attrs.promise\n\t\tconst chart = vNode.attrs.chart\n\t\tconst noSort = vNode.attrs.noSort\n\t\t\n\t\tif(chart != this.chart) {\n\t\t\tthis.chart = chart\n\t\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\t\tthis.promiseObserverId?.removeObserver()\n\t\t\t\n\t\t\tthis.promiseObserverId = promise.addObserver(() => {\n\t\t\t\tthis.drawGraph(chart, promise.get(), noSort)\n\t\t\t})\n\t\t}\n\t}\n\t\n\tpublic onremove(): void {\n\t\tthis.promiseObserverId?.removeObserver()\n\t}\n\t\n\tpublic view(vNode: VnodeDOM<ChartComponentOptions, any>): Vnode<any, any> {\n\t\treturn <div class={`chartView center ${vNode.attrs.className ?? \"\"}`}>\n\t\t\t<div class={`chartViewWindow ${this.enabled ? \"fadeIn\" : \"\"}`}></div>\n\t\t\t{!this.enabled &&\n\t\t\t\tLoadingSpinner()\n\t\t\t}\n\t\t</div>\n\t}\n}\n\nexport function ChartView(chart: ChartData, promise: ObservablePromise<LoadedStatistics>, noSort: boolean = false) {\n\treturn m(ChartComponent, {\n\t\tchart: chart,\n\t\tpromise: promise,\n\t\tnoSort: noSort\n\t})\n}","import m, {Vnode} from \"mithril\"\nimport {NotCompatibleIcon, PossibleDevices} from \"./NotCompatibleIcon\";\n\ntype DashTemplateOptions = {\n\ttitle: string\n\ticon?: Vnode<any, any>\n\tnoCompatibilityIcon?: PossibleDevices[]\n\tmsg?: string | Vnode<any, any>\n\tinnerLinkTitle?: string\n\tinnerLinkHref?: string\n}\n\ntype DashContainerOptions = \"stretched\" | \"cramped\" | \"vertical\" | \"horizontal\" | null\nexport type DashViewOptions = {\n\tdisabled?: boolean\n\tonclick?: (e: MouseEvent) => void\n\thref?: string\n\tshowAsClickable?: boolean\n\tfloating?: boolean\n\tfloatingRight?: boolean\n\thighlight?: boolean\n\tsmall?: boolean\n\ttemplate?: DashTemplateOptions\n\tcontent?: Vnode<any, any>\n}\n\nfunction DashTemplateView(options: DashTemplateOptions): Vnode<any, any> {\n\treturn (\n\t\t<div>\n\t\t\t{(options.icon || options.noCompatibilityIcon) &&\n\t\t\t\t<div class=\"dashIcon\">\n\t\t\t\t\t{options.icon}\n\t\t\t\t\t{options.noCompatibilityIcon && NotCompatibleIcon(... options.noCompatibilityIcon)}\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t<div class=\"dashTitle\">{options.title}</div>\n\t\t\t{options.msg && <p class=\"dashMsg\">{options.msg}</p>}\n\t\t\t{options.innerLinkTitle && options.innerLinkHref && <a class=\"link\" href={options.innerLinkHref}>{options.innerLinkTitle}</a>}\n\t\t</div>\n\t)\n}\n\nfunction DashElementView(options: DashViewOptions): Vnode<any, any> {\n\tlet classString = \"dashEl\"\n\tif(options.floatingRight)\n\t\tclassString += \" floating right\"\n\telse if(options.floating)\n\t\tclassString += \" floating\"\n\t\n\tif(options.small)\n\t\tclassString += \" small\"\n\tif(options.highlight)\n\t\tclassString += \" highlight\"\n\tif(options.disabled)\n\t\tclassString += \" disabled\"\n\t\n\tlet view: Vnode<any, any>\n\tif(options.content)\n\t\tview = options.content\n\telse if(options.template)\n\t\tview = DashTemplateView(options.template)\n\telse\n\t\tview = <div class=\"highlight\">Missing Dash Information</div>\n\t\n\tif(options.href) {\n\t\treturn <a target={options.href.startsWith(\"http\") ? \"_blank\" : \"\"} class={`${classString} dashLink`} href={options.href}>{view}</a>\n\t}\n\telse if(options.onclick)\n\t\treturn <a class={`${classString} dashLink`} onclick={options.onclick}>{view}</a>\n\telse if(options.showAsClickable)\n\t\treturn <a class={`${classString} dashLink`}>{view}</a>\n\telse {\n\t\tview.attrs[\"className\"] = `${classString} ${view.attrs.hasOwnProperty(\"className\") ? view.attrs[\"className\"] : \"\"}`\n\t\treturn view\n\t}\n}\n\nfunction getNewClassString(size: DashContainerOptions, oldClassString: string): string {\n\tif(size)\n\t\toldClassString += \" \" + size\n\treturn oldClassString\n}\n\nexport function DashElement(\n\tsize: DashContainerOptions,\n\t... options: (DashViewOptions | false)[]\n): Vnode<any, any> {\n\tif(options.length == 1) {\n\t\tif(!options[0])\n\t\t\treturn <div></div>\n\t\t\n\t\tconst view =  DashElementView(options[0])\n\t\tview.attrs[\"className\"] = getNewClassString(size, view.attrs[\"className\"])\n\t\treturn view\n\t}\n\telse {\n\t\tconst classString = getNewClassString(size, \"multipleChildren\")\n\t\treturn <div class={classString}>\n\t\t\t{options.map((option) => option && DashElementView(option))}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\"\nexport function DashRow(... content: Array<Vnode<any, any> | undefined | false>): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"dashRow\">{content}</div>\n\t)\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport androidSvg from \"../../imgs/devices/android.svg?raw\"\nimport iosSvg from \"../../imgs/devices/ios.svg?raw\"\nimport webSvg from \"../../imgs/devices/web.svg?raw\"\nimport {closeDropdown, openDropdown} from \"./DropdownMenu\";\n\n\nexport type PossibleDevices = \"Android\" | \"iOS\" | \"Web\"\n\nconst imageRecord: Record<PossibleDevices, string> = {\n\tAndroid: androidSvg,\n\tiOS: iosSvg,\n\tWeb: webSvg\n}\n\nfunction onPointerEnter(title: string, e: MouseEvent) {\n\topenDropdown(\"notCompatible\", e.target as HTMLElement,\n\t\t() => <div class=\"smallText center\">{title}</div>\n\t)\n}\nfunction onPointerLeave() {\n\tcloseDropdown(\"notCompatible\")\n}\n\nexport function NotCompatibleIcon(... devices: PossibleDevices[]): Vnode<any, any> {\n\tconst translationRecord: Record<PossibleDevices, string> = {\n\t\tAndroid: Lang.get(\"Android\"),\n\t\tiOS: Lang.get(\"iOS\"),\n\t\tWeb: Lang.get(\"web_questionnaire\")\n\t}\n\tconst title = Lang.get(\"not_compatible_with\", devices.map((device) => translationRecord[device]).join(\", \"))\n\treturn <div class=\"notCompatibleIcon\" onpointerenter={onPointerEnter.bind(null, title)} onpointerleave={onPointerLeave.bind(null)}>\n\t\t{devices.map((device) =>\n\t\t\t<div class=\"deviceIcon\">{m.trust(imageRecord[device])}</div>)}\n\t</div>\n\n}\n","import m, {Vnode} from \"mithril\"\nimport {SearchWidget} from \"./SearchWidget\";\nimport {Lang} from \"../singletons/Lang\";\n\nexport interface SearchBoxEntry {\n\tkey: string\n\tview: Vnode<any, any>\n}\nexport function SearchBox(title: string, viewList: SearchBoxEntry[]): Vnode<any, any> {\n\treturn SearchWidget((tools) =>\n\t\t<div class=\"searchBox\">\n\t\t\t<h2>{title}</h2>\n\t\t\t<input placeholder={Lang.get(\"search\")} class=\"search small vertical\" type=\"text\" onkeyup={tools.updateSearchFromEvent.bind(tools)}/>\n\t\t\t<div class=\"scrollBox noBorder\">\n\t\t\t\t{viewList.map((entry) => tools.searchView(entry.key, entry.view))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import m, {Component, Vnode} from \"mithril\"\n\nexport interface SearchTools {\n\tsearchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null\n\tupdateSearchFromEvent(e: InputEvent): void\n\tupdateSearch(s: string): void\n}\ninterface SearchBarComponentOptions {\n\tcontent: (tools: SearchTools) => Vnode<any, any>\n\tclassName?: string //in case the parent has added a className that we need to include\n}\nclass SearchBarComponent implements SearchTools, Component<SearchBarComponentOptions, any> {\n\tprivate currentSearchValue: string = \"\"\n\t\n\tpublic updateSearch(s: string): void {\n\t\tthis.currentSearchValue = s\n\t}\n\tpublic updateSearchFromEvent(e: InputEvent): void {\n\t\tthis.updateSearch((e.target as HTMLInputElement).value)\n\t}\n\tpublic searchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null {\n\t\treturn key.search(this.currentSearchValue) != -1 ? content : null\n\t}\n\t\n\tpublic view(vNode: Vnode<SearchBarComponentOptions, any>): Vnode<any, any> {\n\t\tconst view = vNode.attrs.content(this)\n\t\tview.attrs.className = `${vNode.attrs.className ?? \"\"} ${view.attrs.className ?? \"\"}`\n\t\treturn view\n\t}\n}\n\nexport function SearchWidget(content: (tools: SearchTools) => Vnode<any, any>): Vnode<any, any> {\n\treturn m(SearchBarComponent, { content: content })\n}","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["loaderState","study","variableGroupIndex","personalStatistics","csvLoaders","charts","needsPublicStatistics","this","urlTemplate","replace","id","get","toString","setupLoadersForCharts","questionnaires","i","questionnaire","getQuestionnaireVariables","forEach","variable","length","chart","checkAxis","axisContainer","displayPublicVariable","publicVariables","axisContainerArray","xAxis","yAxis","addLoader","variableName","questionnaireI","url","internalId","fromUrl","combineStatistics","newStatistics","newVariable","hasOwnProperty","newEntry","index","entryCount","addStatistics","csvLoader","getStatistics","dataType","loadStatisticsFromFiles","userName","dontLoadPublicStatistics","filterEntireColumn","filterByValue","publicStatistics","accessKeys","accessKey","loadJson","mainStatistics","additionalStatistics","value","parent","key","keyName","backingField","reCalcIsDifferent","_","createJson","isDifferent","set","silently","hasMutated","setValue","Promise","resolve","section","participantList","groupList","timezoneList","appTypeList","modelList","joinedTimeList","quitTimeList","currentParticipant","isLoading","personalStatisticsCsvLoaderCollection","loader","getStudyOrThrow","enableGroupStatistics","hasColumn","tempPromise","joinedPerDayChart","createPerDayChartData","joinedPerDayPromise","personalChartPromises","map","_chart","preLoad","getStaticInt","getStudyPromise","preInit","loadParticipants","userId","getStaticString","selectParticipant","atob","window","setTimeout","line","document","getElementsByClassName","scrollIntoView","behavior","block","title","titleExtra","reload","bind","getValueCellList","fullList","push","name","getVisibleCount","count","sort","a","b","reset","getValueListInfo","getPerDayAxisCodeFromValueList","getPersonalStatisticsFromChart","update","loadedStatisticsData","statisticsData","promise","getView","content","valueListInfo","view","class","onclick","getListEntryView","getWithColon","chartData","header","list","info","_section","hasAlternatives","getAlternatives","getDynamic","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStudyOrNull","studies","studyLoader","getStudies","getCount","getFirst","getEntry","Error","getQuestionnaireOrNull","qId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","studyId","isLoggedIn","getUrl","depth","getHash","goTo","target","location","hash","newSection","destroy","enabled","drawGraph","noSort","data","chartView","hasChildNodes","removeChild","lastChild","chartViewBox","oncreate","vNode","attrs","dom","promiseObserverId","addObserver","onupdate","removeObserver","onremove","className","ChartView","ChartComponent","DashElementView","options","classString","floatingRight","floating","small","highlight","disabled","template","icon","noCompatibilityIcon","msg","innerLinkTitle","innerLinkHref","href","DashTemplateView","startsWith","showAsClickable","getNewClassString","size","oldClassString","DashElement","option","DashRow","imageRecord","Android","iOS","Web","onPointerEnter","e","onPointerLeave","NotCompatibleIcon","translationRecord","Lang","devices","device","join","onpointerenter","onpointerleave","SearchBox","viewList","tools","placeholder","type","onkeyup","updateSearchFromEvent","entry","searchView","currentSearchValue","updateSearch","s","search","SearchWidget","SearchBarComponent","TitleRow"],"sourceRoot":""}