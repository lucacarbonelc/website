{"version":3,"file":"165.3f4d847f3f9a149e58c5.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/helpers/JsonSourceComponent.tsx","webpack://ESMira/./src/frontend/ts/pages/source.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx"],"sourcesContent":["import {Study} from \"../data/study/Study\";\nimport {ObservableStructureDataType} from \"../observable/ObservableStructure\";\nimport m, {Component, Vnode, VnodeDOM} from \"mithril\";\nimport {JSONContent, JSONEditor, MenuButton, MenuItem, Mode, TextContent} from \"vanilla-jsoneditor\";\nimport {ObserverId} from \"../observable/BaseObservable\";\nimport {JsonTypes} from \"../observable/types/JsonTypes\";\nimport {Lang} from \"../singletons/Lang\";\n\ninterface JsonSourceComponentOptions {\n\tgetStudy?: () => Study\n\tsetJson: (json: ObservableStructureDataType) => void\n\tshowMainMenuBar?: boolean\n\tmode?: Mode\n\tsaveBtnLabel?: string\n}\nexport class JsonSourceComponent implements Component<JsonSourceComponentOptions, any> {\n\tprivate hasChanged: boolean = false\n\tprivate editor?: JSONEditor\n\tprivate setJson?: (json: ObservableStructureDataType) => void\n\tprivate getStudy?: () => Study\n\tprivate studyObserveId?: ObserverId\n\tprivate saveBtnLabel?: string\n\t\n\tprivate getJson(): JsonTypes {\n\t\tif(!this.getStudy)\n\t\t\treturn {}\n\t\treturn this.getStudy().createJson()\n\t}\n\tprivate getJsonContent(): JSONContent | TextContent {\n\t\tif(this.getStudy)\n\t\t\treturn {json: this.getStudy().createJson()}\n\t\treturn {text: \"\"}\n\t}\n\t\n\tpublic oncreate(vNode: VnodeDOM<JsonSourceComponentOptions, any>): void {\n\t\tthis.setJson = vNode.attrs.setJson\n\t\tthis.getStudy = vNode.attrs.getStudy\n\t\tthis.saveBtnLabel = vNode.attrs.saveBtnLabel\n\t\t\n\t\tthis.editor = new JSONEditor(\n\t\t\t{\n\t\t\t\ttarget: vNode.dom,\n\t\t\t\tprops: {\n\t\t\t\t\tcontent: this.getJsonContent(),\n\t\t\t\t\tmode: vNode.attrs.mode ?? Mode.tree,\n\t\t\t\t\tmainMenuBar: vNode.attrs.showMainMenuBar ?? true,\n\t\t\t\t\tonChange: () => {\n\t\t\t\t\t\tthis.hasChanged = true\n\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t},\n\t\t\t\t\tonRenderMenu: (items: MenuItem[], _context: { mode: 'tree' | 'text' | 'table', modal: boolean }) => {\n\t\t\t\t\t\tconst index = items.findIndex((item) => {return (item as MenuButton)?.text == \"table\"})\n\t\t\t\t\t\titems.splice(index, 1)\n\t\t\t\t\t\treturn items\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t})\n\t\t\n\t\tif(this.getStudy) {\n\t\t\tthis.studyObserveId = this.getStudy().addObserver(() => {\n\t\t\t\tthis.editor?.set(this.getJsonContent())\n\t\t\t})\n\t\t}\n\t}\n\t\n\tpublic onremove(): void {\n\t\tthis.studyObserveId?.removeObserver()\n\t}\n\t\n\tprivate clickApply(): void {\n\t\tif(!this.setJson)\n\t\t\treturn\n\t\tlet json\n\t\ttry {\n\t\t\tjson = (this.editor?.get() as JSONContent).json ?? JSON.parse((this.editor?.get() as TextContent).text)\n\t\t}\n\t\tcatch(e) {\n\t\t\tconsole.error(e)\n\t\t\treturn\n\t\t}\n\t\tif(this.getStudy)\n\t\t\tjson.id = this.getStudy().id.get()\n\t\tthis.setJson(json)\n\t\tthis.hasChanged = false\n\t}\n\t\n\tpublic view(): Vnode<any, any> {\n\t\treturn <div class=\"source\">\n\t\t\t{this.hasChanged &&\n\t\t\t\t<div class=\"applyBtn\" onclick={this.clickApply.bind(this)}>{this.saveBtnLabel ?? Lang.get(\"apply_changes\")}</div>\n\t\t\t}\n\t\t\t</div>\n\t}\n}","import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport downloadSvg from \"../../imgs/icons/download.svg?raw\"\nimport {ObservableStructureDataType} from \"../observable/ObservableStructure\";\nimport {Section} from \"../site/Section\";\nimport {BtnCustom} from \"../widgets/BtnWidgets\";\nimport {JsonSourceComponent} from \"../helpers/JsonSourceComponent\";\n\nexport class Content extends SectionContent {\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [section.getStudyPromise()]\n\t}\n\tpublic title(): string {\n\t\treturn Lang.get(\"study_source\")\n\t}\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\tconst study = this.getStudyOrThrow()\n\t\treturn <a href={window.URL.createObjectURL(new Blob([JSON.stringify(study.createJson())], {type: 'text/json'}))} download={`${study.title.get()}.json`}>\n\t\t\t{BtnCustom(m.trust(downloadSvg), undefined, Lang.get(\"download\"))}\n\t\t</a>\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn m(JsonSourceComponent, {\n\t\t\tgetStudy: () => this.getStudyOrThrow(),\n\t\t\tsetJson: (json: ObservableStructureDataType) => {\n\t\t\t\tconst study = this.getStudyOrThrow()\n\t\t\t\tif(JSON.stringify(json) == JSON.stringify(study.createJson()))\n\t\t\t\t\treturn\n\t\t\t\t\n\t\t\t\tconst newStudy = this.section.siteData.studyLoader.updateStudyJson(study, json)\n\t\t\t\tnewStudy.setDifferent(true)\n\t\t\t}\n\t\t})\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n"],"names":["hasChanged","getJson","this","getStudy","createJson","getJsonContent","json","text","oncreate","vNode","setJson","attrs","saveBtnLabel","editor","target","dom","props","content","mode","tree","mainMenuBar","showMainMenuBar","onChange","onRenderMenu","items","_context","index","findIndex","item","splice","studyObserveId","addObserver","set","onremove","removeObserver","clickApply","get","JSON","parse","e","console","error","id","view","class","onclick","bind","preLoad","section","getStudyPromise","title","titleExtra","study","getStudyOrThrow","href","window","URL","createObjectURL","Blob","stringify","type","download","undefined","getView","siteData","studyLoader","updateStudyJson","setDifferent","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","getDynamic","key","defaultValue","setDynamic","newValue","dynamicValues","setChild","getStaticInt","getStaticString","getStudyOrNull","studies","getStudies","getCount","getFirst","getEntry","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","getUrl","depth","getHash","goTo","location","hash","newSection","destroy","BtnCustom","icon","hoverTitle","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer"],"sourceRoot":""}