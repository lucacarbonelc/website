{"version":3,"file":"2529.01e381d368c999f79be8.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/constants/csv.ts","webpack://ESMira/./src/frontend/ts/loader/csv/CsvLoader.ts","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx"],"sourcesContent":["export const CSV_DELIMITER = \";\"\nexport const DATAVIEWER_SKIPPED_COLUMNS = [\"responseTime_formatted\", \"lastInvitation_formatted\", \"actionScheduledTo_formatted\"]\nexport const DATAVIEWER_TIMESTAMP_COLUMNS = [\"uploaded\", \"responseTime\", \"lastInvitation\", \"actionScheduledTo\"]","import {LoaderState} from \"../../site/LoaderState\";\nimport {Lang, LangKey} from \"../../singletons/Lang\";\nimport {WorkerResponseData} from \"./WorkerResponseData\";\nimport {WorkerSendData} from \"./WorkerSendData\";\nimport {InputMediaTypes} from \"../../data/study/Input\";\nimport {CsvRow} from \"./CsvRow\";\nimport {CsvCellsWithMeta} from \"./CsvCell\";\nimport {ValueListInfo} from \"./ValueListInfo\";\nimport {AxisContainer} from \"../../data/study/AxisContainer\";\nimport {StatisticsCollection} from \"../../data/statistics/StatisticsCollection\";\nimport {DATAVIEWER_TIMESTAMP_COLUMNS} from \"../../constants/csv\";\nimport {ChartData} from \"../../data/study/ChartData\";\nimport {LoadedStatistics} from \"./CsvLoaderCollectionFromCharts\";\n\ninterface ResolveData {\n\tsuccess: (value: any) => void\n\terror: (msg: string) => void\n}\n\n\nexport class CsvLoader {\n\tstatic async fromUrl(loader: LoaderState, url: string, specialColumns?: Record<InputMediaTypes, string[]>): Promise<CsvLoader> {\n\t\tconst csvLoader = new CsvLoader(loader)\n\t\tawait csvLoader.loadUrl(url, specialColumns)\n\t\treturn csvLoader\n\t}\n\tstatic async fromCsv(loader: LoaderState, csv: string[][], specialColumns?: Record<InputMediaTypes, string[]>): Promise<CsvLoader> {\n\t\tconst csvLoader = new CsvLoader(loader)\n\t\tawait csvLoader.loadCsv(csv, specialColumns)\n\t\treturn csvLoader\n\t}\n\t\n\tprivate readonly timeSpanColumnList: Record<string, boolean> = {}\n\tprivate readonly resolveQueue: Record<number, ResolveData> = {}\n\tprivate queueCount: number = 0\n\tprivate promiseChain: Promise<any> = Promise.resolve()\n\t\n\tprivate readonly csvWorker: Worker\n\tprivate readonly loader: LoaderState\n\t\n\tpublic headerNames: string[] = []\n\tpublic visibleRowsCount: number = 0\n\t\n\tprivate constructor(loader: LoaderState) {\n\t\tthis.loader = loader\n\t\tthis.csvWorker = new Worker(new URL(\"CsvWorker\", import.meta.url))\n\t\tthis.csvWorker.onmessage = this.onWorkerMessage.bind(this)\n\t\t\n\t\tDATAVIEWER_TIMESTAMP_COLUMNS.forEach((name) => {\n\t\t\tthis.timeSpanColumnList[name] = true\n\t\t})\n\t}\n\tprivate onWorkerMessage(e: MessageEvent): void {\n\t\tconst response = e.data as WorkerResponseData\n\t\t\n\t\tif(response.loadingState)\n\t\t\tthis.loader.update(Lang.get(\"state_loading_entryNum\", response.loadingState))\n\t\tif(response.indexingState)\n\t\t\tthis.loader.update(Lang.get(\"state_creatingIndex_entryNum\", response.indexingState))\n\t\telse if(response.id) {\n\t\t\tconst id = response.id\n\t\t\tif(this.resolveQueue.hasOwnProperty(id)) {\n\t\t\t\tif(response.error)\n\t\t\t\t\tthis.resolveQueue[id].error(response.error)\n\t\t\t\telse\n\t\t\t\t\tthis.resolveQueue[id].success(response)\n\t\t\t\tdelete this.resolveQueue[id]\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\tprivate addPromise(sendData: WorkerSendData, state: LangKey = \"state_loading\"): Promise<WorkerResponseData> {\n\t\tthis.promiseChain = this.promiseChain\n\t\t\t.then(() => this.loader.showLoader(\n\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\tthis.resolveQueue[++this.queueCount] = {success: resolve, error: reject}\n\t\t\t\t\tsendData = sendData || {}\n\t\t\t\t\tsendData.id = this.queueCount\n\t\t\t\t\tthis.csvWorker.postMessage(sendData)\n\t\t\t\t}),\n\t\t\t\tLang.get(state)\n\t\t\t))\n\t\t\n\t\treturn this.promiseChain\n\t}\n\t\n\tprivate async load(sendData: WorkerSendData): Promise<any> {\n\t\tconst response = await this.addPromise(sendData, \"state_downloading\")\n\t\tthis.headerNames = response.headerNames ?? []\n\t\tthis.visibleRowsCount = response.visibleRowsCount ?? 0\n\t}\n\t\n\tprivate async loadUrl(url: string, specialColumns?: Record<InputMediaTypes, string[]>): Promise<any> {\n\t\tawait this.load({\n\t\t\ttype: \"load\",\n\t\t\turl: location.origin + location.pathname + url,\n\t\t\tspecialColumns: specialColumns\n\t\t})\n\t}\n\tprivate async loadCsv(csv: string[][], specialColumns?: Record<InputMediaTypes, string[]>): Promise<any> {\n\t\tawait this.load({\n\t\t\ttype: \"fromCsv\",\n\t\t\tcsv: csv,\n\t\t\tspecialColumns: specialColumns\n\t\t})\n\t}\n\tpublic waitUntilReady(): Promise<any> {\n\t\treturn this.promiseChain\n\t}\n\tpublic reset(): Promise<any> {\n\t\treturn this.addPromise({type: \"reset\"})\n\t}\n\t\n\tpublic close(): void {\n\t\tthis.csvWorker.terminate()\n\t}\n\t\n\t\n\t//\n\t// convenience methods\n\t//\n\t\n\tpublic hasColumn(column: string): boolean {\n\t\treturn this.headerNames.includes(column)\n\t}\n\tpublic getColumnNum(column: string): number {\n\t\tconst r = this.headerNames.indexOf(column)\n\t\tif(r == -1)\n\t\t\tconsole.trace(`${column} does not exist in get_columnNum()`, this.headerNames)\n\t\treturn r\n\t}\n\t\n\t\n\t//\n\t// data methods\n\t//\n\t\n\tpublic async getVisibleRows(from: number, to: number): Promise<CsvRow[]> {\n\t\tconst response = await this.addPromise({type: \"getVisibleRows\", from: from, to: to})\n\t\treturn response.rows ?? []\n\t}\n\t\n\tpublic async getVisibleCount(columnName: string, value: string): Promise<number> {\n\t\tconst response = await this.addPromise({type: \"getVisibleCount\", columnNum: this.getColumnNum(columnName), value: value})\n\t\treturn response.visibleRowsCount ?? 0\n\t}\n\t\n\tpublic async getValueListInfo(columnName: string, sortByAmount: boolean = false, includeHiddenValues: boolean = false): Promise<ValueListInfo[]> {\n\t\tconst response = await this.addPromise(\n\t\t\t{type: \"valueListInfo\", columnNum: this.getColumnNum(columnName), sortByAmount: sortByAmount, includeHiddenValues: includeHiddenValues},\n\t\t\t\"state_creatingIndex\"\n\t\t)\n\t\treturn response.valueListInfo ?? []\n\t}\n\tpublic async getValueCellList(columnName: string): Promise<Record<string, CsvCellsWithMeta>> {\n\t\tconst response = await this.addPromise(\n\t\t\t{type: \"valueCellList\", columnNum: this.getColumnNum(columnName)},\n\t\t\t\"state_creatingIndex\"\n\t\t)\n\t\treturn response.valueCellList ?? {}\n\t}\n\tpublic async getStatistics(axisContainerArray: AxisContainer[], dataType: number): Promise<StatisticsCollection> {\n\t\tconst response = await this.addPromise(\n\t\t\t{type: \"getStatistics\", axisContainerArrayJson: axisContainerArray.map((axisContainer) => JSON.stringify(axisContainer.createJson())), dataType: dataType},\n\t\t\t\"state_creatingStatistics\"\n\t\t)\n\t\treturn response.statistics ?? {}\n\t}\n\tpublic async getPersonalStatisticsFromChart(chart: ChartData): Promise<LoadedStatistics> {\n\t\treturn {\n\t\t\tmainStatistics: await this.getStatistics(chart.axisContainer.get(), chart.dataType.get())\n\t\t}\n\t}\n\tpublic async getValueCount(columnName: string, values: string[]): Promise<Record<string, number>> {\n\t\tconst response = await this.addPromise({type: \"getValueCount\", columnNum: this.getColumnNum(columnName), values: values})\n\t\treturn response.valueCount ?? {}\n\t}\n\t\n\t\n\t//\n\t// change functions\n\t//\n\t\n\tpublic async filterByValue(enable: boolean, column: string | number, value: string): Promise<void> {\n\t\tconst columnNum = typeof column == \"number\" ? column : this.getColumnNum(column)\n\t\tif(columnNum === -1) {\n\t\t\tconsole.error(`${column} does not exist. Aborting`)\n\t\t\treturn\n\t\t}\n\t\tconst response = await this.addPromise({type: \"filterByValue\", columnNum: columnNum, value: value, enable: enable}, \"state_applyingFilter\")\n\t\tthis.visibleRowsCount = response.visibleRowsCount ?? 0\n\t}\n\tpublic async filterEntireColumn(enable: boolean, column: string | number): Promise<void> {\n\t\tconst columnNum = typeof column == \"number\" ? column : this.getColumnNum(column)\n\t\tif(columnNum === -1) {\n\t\t\tconsole.error(`${column} does not exist. Aborting`)\n\t\t\treturn\n\t\t}\n\t\tconst response = await this.addPromise({type: \"filterEntireColumn\", columnNum: columnNum, enable: enable}, \"state_applyingFilter\")\n\t\tthis.visibleRowsCount = response.visibleRowsCount ?? 0\n\t}\n\tpublic async filterRowsByResponseTime(enable: boolean, newestTimestamp: number): Promise<void> {\n\t\tconst response = await this.addPromise({type: \"filterRowsByResponseTime\", newestTimestamp: newestTimestamp, enable: enable}, \"state_applyingFilter\")\n\t\tthis.visibleRowsCount = response.visibleRowsCount ?? 0\n\t}\n\tpublic async mark(enable: boolean, rowPos: number): Promise<void> {\n\t\tawait this.addPromise({type: \"mark\", enable: enable, rowPos: rowPos}, \"state_loading\")\n\t}\n\t\n\t//\n\t// data functions\n\t//\n\tpublic isTimestampColumn(columnValue: string): boolean {\n\t\treturn this.timeSpanColumnList[columnValue]\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n"],"names":["DATAVIEWER_SKIPPED_COLUMNS","DATAVIEWER_TIMESTAMP_COLUMNS","loader","timeSpanColumnList","resolveQueue","queueCount","promiseChain","Promise","resolve","headerNames","visibleRowsCount","this","csvWorker","Worker","URL","onmessage","onWorkerMessage","bind","forEach","name","fromUrl","url","specialColumns","csvLoader","CsvLoader","loadUrl","fromCsv","csv","loadCsv","e","response","data","loadingState","update","get","indexingState","id","hasOwnProperty","error","success","addPromise","sendData","state","then","showLoader","reject","postMessage","load","type","location","origin","pathname","waitUntilReady","reset","close","terminate","hasColumn","column","includes","getColumnNum","r","indexOf","console","trace","getVisibleRows","from","to","rows","getVisibleCount","columnName","value","columnNum","getValueListInfo","sortByAmount","includeHiddenValues","valueListInfo","getValueCellList","valueCellList","getStatistics","axisContainerArray","dataType","axisContainerArrayJson","map","axisContainer","JSON","stringify","createJson","statistics","getPersonalStatisticsFromChart","chart","mainStatistics","getValueCount","values","valueCount","filterByValue","enable","filterEntireColumn","filterRowsByResponseTime","newestTimestamp","mark","rowPos","isTimestampColumn","columnValue","BtnCustom","icon","onclick","title","hoverTitle","class","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer"],"sourceRoot":""}