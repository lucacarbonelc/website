import { Vnode } from "mithril";
import { LoaderState } from "./LoaderState";
import { SiteData } from "./SiteData";
import { SectionContent } from "./SectionContent";
import { StaticValues } from "./StaticValues";
import { Study } from "../data/study/Study";
import { StudiesDataType } from "../loader/StudyLoader";
import { PrimitiveType } from "../observable/types/PrimitiveType";
import { DynamicValues } from "./DynamicValues";
import { ObservablePrimitive } from "../observable/ObservablePrimitive";
import { AdminToolsInterface } from "../admin/AdminToolsInterface";
import { Admin } from "../admin/Admin";
export declare class Section {
    readonly depth: number;
    readonly dataCode: string;
    private readonly staticValues;
    readonly allSections: Array<Section>;
    readonly sectionName: string;
    readonly sectionValue: string;
    readonly loader: LoaderState;
    readonly siteData: SiteData;
    sectionContent: SectionContent | null;
    readonly initPromise: Promise<Section>;
    private setInitDone;
    isMarked: boolean;
    constructor(dataCode: string, siteData: SiteData, allSections: Array<Section>, depth?: number);
    load(): Promise<void>;
    reload(): Promise<void>;
    private getStudyPromiseFromQuestionnaire;
    getStudyPromiseFromAccessKey(id: number): Promise<Study>;
    getStudyPromise(id?: number): Promise<Study>;
    getAvailableStudiesPromise(accessKey: string): Promise<StudiesDataType>;
    getStrippedStudyListPromise(): Promise<StudiesDataType>;
    getTools(): AdminToolsInterface;
    getAdmin(): Admin;
    getStaticInt<T extends StaticValues>(key: T): number | null;
    getStaticString<T extends StaticValues>(key: T): string;
    setStatic(key: string, value: number | string): void;
    getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T>;
    private getSectionContentView;
    getSectionTitle(): string;
    private getSectionExtras;
    getView(): Vnode<any, any>;
    private getBookmark;
    private toggleBookmark;
    getHash(depth?: number): string;
    backHash(): string;
    private eventClick;
    destroy(): void;
}
