import { InputMediaTypes } from "../../data/study/Input";
import { CsvRow } from "./CsvRow";
import { CsvCellsWithMeta } from "./CsvCell";
import { StatisticsCollection } from "../../data/statistics/StatisticsCollection";
import { AxisContainer } from "../../data/study/AxisContainer";
import { ValueListInfo } from "./ValueListInfo";
export declare class CsvData {
    private loadingPromise?;
    private rawData;
    private importingComplete;
    private readonly specialColumnsIndex;
    private readonly columnDataList;
    private readonly rowsIndex;
    visibleRowsList: CsvRow[];
    private filteredRowsIndex;
    private needsHeader;
    private needsIndexing;
    visibleRowsCount: number;
    constructor(specialInputColumns: Record<InputMediaTypes, string[]>);
    private loadCsvRow;
    loadData(url: string): Promise<any>;
    loadCsv(csvRows: string[][]): void;
    private createCell;
    private indexRowData;
    private indexNewData;
    indexing(until?: number): void;
    private completeReset;
    reset(): void;
    getColumnNum(columnName: string): number;
    getVisibleCount(columnNum: number, value: string): number;
    getVisibleRows(from: number, to: number): CsvRow[];
    getValueCellList(columnNum: number): Record<string, CsvCellsWithMeta>;
    getValueListInfos(columnNum: number, sortByAmount: boolean, includeHiddenValues: boolean): ValueListInfo[];
    getStatisticsCollection(axisContainerArray: AxisContainer[], dataType: number): StatisticsCollection;
    getValueCount(columnNum: number, values: string[]): Record<string, number>;
    private setRowVisibility;
    private resetVisibleFilter;
    mark(enable: boolean, rowPos: number): void;
    filterByValue(visible: boolean, columnNum: number, value: string): void;
    filterEntireColumn(visible: boolean, columnNum: number): void;
    filterRowsByResponseTime(visible: boolean, newestTimestamp: number): void;
    getHeaderNames(): string[];
}
