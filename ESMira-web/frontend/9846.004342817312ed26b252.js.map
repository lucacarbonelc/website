{"version":3,"file":"9846.004342817312ed26b252.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/errorList.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {Requests} from \"../singletons/Requests\";\nimport {FILE_ADMIN} from \"../constants/urls\";\nimport {ErrorReportInfo} from \"../data/errorReports/ErrorReportInfo\";\nimport commentSvg from \"../../imgs/icons/comment.svg?raw\"\nimport {BtnOk, BtnTrash} from \"../widgets/BtnWidgets\";\n\nexport class Content extends SectionContent {\n\tprivate knownReports: ErrorReportInfo[] = []\n\tprivate newReports: ErrorReportInfo[] = []\n\t\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tRequests.loadJson(`${FILE_ADMIN}?type=ListErrors`)\n\t\t]\n\t}\n\tconstructor(section: Section, reports: ErrorReportInfo[]) {\n\t\tsuper(section)\n\t\t\n\t\tthis.sortErrorReports(reports)\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"errorReports\")\n\t}\n\t\n\tprivate async reloadErrorReports(): Promise<void> {\n\t\tconst reports = await this.section.loader.loadJson(`${FILE_ADMIN}?type=ListErrors`)\n\t\tthis.sortErrorReports(reports)\n\t}\n\t\n\tprivate sortErrorReports(reports: ErrorReportInfo[]) {\n\t\tthis.knownReports = []\n\t\tthis.newReports = []\n\t\t\n\t\treports = reports.sort((a, b) => {\n\t\t\treturn b.timestamp - a.timestamp\n\t\t})\n\t\t\n\t\tfor(const report of reports) {\n\t\t\treport.printName = this.getName(report)\n\t\t\t\n\t\t\tif(report.seen)\n\t\t\t\tthis.knownReports.push(report)\n\t\t\telse\n\t\t\t\tthis.newReports.push(report)\n\t\t}\n\t\tthis.getTools().hasErrors = !!this.newReports.length\n\t}\n\t\n\tprivate getName(report: ErrorReportInfo): string {\n\t\tconst date = new Date(report.timestamp).toLocaleString()\n\t\treturn report.note ? `${report.note} (${date})` : date\n\t}\n\t\n\tprivate async deleteReport(report: ErrorReportInfo): Promise<void> {\n\t\tif(!confirm(Lang.get(\"confirm_delete_error\", this.getName(report))))\n\t\t\treturn\n\t\t\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=DeleteError`,\n\t\t\t\"post\",\n\t\t\t`timestamp=${report.timestamp}&note=${report.note}&seen=${report.seen ? 1 : 0}`\n\t\t)\n\t\tawait this.reloadErrorReports()\n\t}\n\tprivate async markReportAsSeen(report: ErrorReportInfo): Promise<void> {\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=ChangeError`,\n\t\t\t\"post\",\n\t\t\t`timestamp=${report.timestamp}&note=${report.note}&seen=1`\n\t\t)\n\t\tawait this.reloadErrorReports()\n\t}\n\tprivate async addNote(report: ErrorReportInfo): Promise<void> {\n\t\tconst newNote = prompt(Lang.get(\"prompt_comment\"), report.note)\n\t\tif(!newNote)\n\t\t\treturn\n\t\t\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=ChangeError`,\n\t\t\t\"post\",\n\t\t\t`timestamp=${report.timestamp}&note=${newNote}&seen=${report.seen ? 1 : 0}`\n\t\t)\n\t\tawait this.reloadErrorReports()\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn <div>\n\t\t\t{this.getErrorReportList(this.newReports)}\n\t\t\t{this.knownReports.length != 0 && this.newReports.length != 0 &&\n\t\t\t\t<hr/>\n\t\t\t}\n\t\t\t{this.getErrorReportList(this.knownReports)}\n\t\t</div>\n\t}\n\t\n\tprivate getErrorReportList(reports: ErrorReportInfo[]): Vnode<any, any> {\n\t\treturn <div class=\"listParent\">\n\t\t\t<div class=\"listChild error_list\">\n\t\t\t\t{reports.map((report) =>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{BtnTrash(this.deleteReport.bind(this, report))}\n\t\t\t\t\t\t{!report.seen &&\n\t\t\t\t\t\t\tBtnOk(this.markReportAsSeen.bind(this, report))\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<a onclick={this.addNote.bind(this, report)}>\n\t\t\t\t\t\t\t{m.trust(commentSvg)}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={this.getUrl(`errorView,timestamp:${report.timestamp},note:${btoa(report.note)}`)}>{report.printName}</a>\n\t\t\t\t\t\t{report.seen &&\n\t\t\t\t\t\t\t<span class=\"extraNote\">{Lang.get(\"seen\")}</span>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n"],"names":["section","reports","knownReports","newReports","sortErrorReports","preLoad","_section","loadJson","title","get","reloadErrorReports","this","loader","sort","a","b","timestamp","report","printName","getName","seen","push","getTools","hasErrors","length","date","Date","toLocaleString","note","deleteReport","confirm","markReportAsSeen","addNote","newNote","prompt","getView","getErrorReportList","class","map","bind","onclick","href","getUrl","btoa","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticInt","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getAdmin","hasPermission","name","studyId","isLoggedIn","depth","getHash","goTo","target","window","location","hash","newSection","destroy","BtnCustom","icon","hoverTitle","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer"],"sourceRoot":""}