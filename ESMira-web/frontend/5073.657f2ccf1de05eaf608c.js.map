{"version":3,"file":"5073.657f2ccf1de05eaf608c.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/helpers/AddDropdownMenus.tsx","webpack://ESMira/./src/frontend/ts/helpers/JsonSourceComponent.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx"],"sourcesContent":["import {DropdownMenu, openDropdown} from \"../widgets/DropdownMenu\";\nimport {ObservableStructureDataType} from \"../observable/ObservableStructure\";\nimport m, {Vnode} from \"mithril\";\nimport {DashRow} from \"../widgets/DashRow\";\nimport {DashElement} from \"../widgets/DashElement\";\nimport {Lang} from \"../singletons/Lang\";\nimport editSvg from \"../../imgs/icons/change.svg?raw\"\nimport copySvg from \"../../imgs/icons/copy.svg?raw\"\nimport {SectionContent} from \"../site/SectionContent\";\nimport {Study} from \"../data/study/Study\";\nimport {BtnOk} from \"../widgets/BtnWidgets\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {JsonSourceComponent} from \"./JsonSourceComponent\";\nimport {Mode} from \"vanilla-jsoneditor\";\n\nexport class AddDropdownMenus {\n\tprivate sectionContent: SectionContent\n\t\n\tconstructor(sectionContent: SectionContent) {\n\t\tthis.sectionContent = sectionContent\n\t}\n\t\n\tpublic async addStudy(target: Element): Promise<void> {\n\t\tconst loaderState = this.sectionContent.section.loader\n\t\tconst studyLoader = this.sectionContent.section.siteData.studyLoader\n\t\tawait this.sectionContent.section.getStrippedStudyListPromise()\n\t\tawait loaderState.showLoader(studyLoader.loadStrippedStudyList())\n\t\t\n\t\topenDropdown(\n\t\t\t\"newDialog\",\n\t\t\ttarget,\n\t\t\t(close) =>\n\t\t\t\tthis.addStudyView(async (studyData) => {\n\t\t\t\t\tclose()\n\t\t\t\t\tconst id = await loaderState.showLoader(studyLoader.addStudy(studyData))\n\t\t\t\t\tif(id)\n\t\t\t\t\t\tthis.sectionContent.newSection(`allStudies:edit/studyEdit,id:${id}`)\n\t\t\t\t}),\n\t\t\t{\n\t\t\t\tconnectedDropdowns: [\"studyList\", \"newSource\"]\n\t\t\t}\n\t\t)\n\t}\n\t\n\tprivate addStudyView(addStudy: (studyData: ObservableStructureDataType) => any): Vnode<any, any> {\n\t\tconst loaderState = this.sectionContent.section.loader\n\t\tconst studyLoader = this.sectionContent.section.siteData.studyLoader\n\t\t\n\t\treturn <div class=\"content\">\n\t\t\t{DashRow(\n\t\t\t\tthis.newButton(Lang.get(\"empty_study\"), Lang.get(\"prompt_studyName\"),\n\t\t\t\t\t(title) => addStudy({ title: title })\n\t\t\t\t),\n\t\t\t\tthis.duplicateButton(Lang.get(\"duplicate_study\"), (study, close) =>\n\t\t\t\t\t<li class={`clickable ${study.published.get() ? \"\" : \"unPublishedStudy\"}`} onclick={\n\t\t\t\t\t\tasync () => {\n\t\t\t\t\t\t\tclose()\n\t\t\t\t\t\t\tconst fullStudy = await loaderState.showLoader(studyLoader.loadFullStudy(study.id.get()))\n\t\t\t\t\t\t\taddStudy(fullStudy.createJson())\n\t\t\t\t\t\t}\n\t\t\t\t\t}>{study.title.get()}</li>\n\t\t\t\t),\n\t\t\t\tDropdownMenu(\"newSource\",\n\t\t\t\t\tDashElement(\"stretched\", {\n\t\t\t\t\t\ttemplate: { title: Lang.get(\"from_study_source\") },\n\t\t\t\t\t\tshowAsClickable: true\n\t\t\t\t\t}),\n\t\t\t\t\t(close) => {\n\t\t\t\t\t\treturn <div class=\"content\">\n\t\t\t\t\t\t\t{m(JsonSourceComponent, {\n\t\t\t\t\t\t\t\tsetJson: (json: ObservableStructureDataType) => {\n\t\t\t\t\t\t\t\t\taddStudy(json)\n\t\t\t\t\t\t\t\t\tclose()\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tshowMainMenuBar: false,\n\t\t\t\t\t\t\t\tmode: Mode.text,\n\t\t\t\t\t\t\t\tsaveBtnLabel: Lang.get(\"create\")\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t)}\n\t\t</div>\n\t}\n\t\n\tpublic async addQuestionnaire(study: Study, target: Element): Promise<void> {\n\t\tconst loaderState = this.sectionContent.section.loader\n\t\tconst studyLoader = this.sectionContent.section.siteData.studyLoader\n\t\tawait loaderState.showLoader(studyLoader.loadStrippedStudyList())\n\t\t\n\t\topenDropdown(\n\t\t\t\"newDialog\",\n\t\t\ttarget,\n\t\t\t(close) =>\n\t\t\t\tthis.addQuestionnaireView(async (studyData) => {\n\t\t\t\t\tclose()\n\t\t\t\t\tconst questionnaire = await loaderState.showLoader(studyLoader.addQuestionnaire(study, studyData))\n\t\t\t\t\t\n\t\t\t\t\tif(this.sectionContent.section.sectionName == \"qEdit\")\n\t\t\t\t\t\tthis.sectionContent.newSection(`qEdit,q:${questionnaire.internalId.get()}`, this.sectionContent.section.depth - 1)\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.sectionContent.newSection(`qEdit,q:${questionnaire.internalId.get()}`)\n\t\t\t\t\tthis.sectionContent.setDynamic(\"questionnaireIndex\", study.questionnaires.get().length - 1)\n\t\t\t\t}),\n\t\t\t{\n\t\t\t\tconnectedDropdowns: [\"studyList\"]\n\t\t\t}\n\t\t)\n\t}\n\tprivate addQuestionnaireView(addSQuestionnaire: (questionnaireData: ObservableStructureDataType) => any): Vnode<any, any> {\n\t\tconst loaderState = this.sectionContent.section.loader\n\t\tconst studyLoader = this.sectionContent.section.siteData.studyLoader\n\t\tconst openedStudies: Record<number, boolean> = {}\n\t\t\n\t\treturn <div class=\"content\">\n\t\t\t{DashRow(\n\t\t\t\tthis.newButton(Lang.get(\"empty_questionnaire\"), Lang.get(\"prompt_newQuestionnaire\"),\n\t\t\t\t\t(title) => addSQuestionnaire({ title: title, pages: [{}]})\n\t\t\t\t),\n\t\t\t\tthis.duplicateButton(Lang.get(\"duplicate_questionnaire\"), (study, close) => {\n\t\t\t\t\tif(study.questionnaires.get().length == 0)\n\t\t\t\t\t\treturn\n\t\t\t\t\tconst id = study.id.get()\n\t\t\t\t\treturn <li class={`clickable ${study.published.get() ? \"\" : \"unPublishedStudy\"}`} onclick={ async () => {\n\t\t\t\t\t\tawait loaderState.showLoader(studyLoader.loadFullStudy(id)) //making sure, questionnaire titles have been loaded\n\t\t\t\t\t\topenedStudies[id] = !openedStudies[id]\n\t\t\t\t\t}}>\n\t\t\t\t\t\t{study.title.get()}\n\t\t\t\t\t\t{openedStudies[id] &&\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t{study.questionnaires.get().map((questionnaire, index) =>\n\t\t\t\t\t\t\t\t\t<li class=\"clickable\" onclick={\n\t\t\t\t\t\t\t\t\t\tasync () => {\n\t\t\t\t\t\t\t\t\t\t\tclose()\n\t\t\t\t\t\t\t\t\t\t\tconst fullStudy = await loaderState.showLoader(studyLoader.loadFullStudy(id))\n\t\t\t\t\t\t\t\t\t\t\tconst fullQuestionnaire = fullStudy.questionnaires.get()[index]\n\t\t\t\t\t\t\t\t\t\t\taddSQuestionnaire({\n\t\t\t\t\t\t\t\t\t\t\t\ttitle: fullQuestionnaire.getTitle(),\n\t\t\t\t\t\t\t\t\t\t\t\tpages: fullQuestionnaire.pages.createJson()\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}>{questionnaire.getTitle()}</li>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t}\n\t\t\t\t\t</li>\n\t\t\t\t})\n\t\t\t)}\n\t\t</div>\n\t}\n\t\n\tprivate newButton(btnTitle: string, promptString: string, add: (title: string) => void): Vnode<any, any> {\n\t\treturn DashElement(null, {\n\t\t\ttemplate: { title: btnTitle, icon: m.trust(editSvg) },\n\t\t\tonclick: () => {\n\t\t\t\tconst title = prompt(promptString)\n\t\t\t\tif(!title || title.length < 3)\n\t\t\t\t\treturn null\n\t\t\t\tadd(title)\n\t\t\t}\n\t\t})\n\t}\n\t\n\tprivate duplicateButton(title: string, drawContent: (study: Study, close: () => void) => Vnode<any, any> | void): Vnode<any, any> {\n\t\tconst tools = this.sectionContent.getTools()\n\t\treturn DropdownMenu(\"studyList\",\n\t\t\tDashElement(null, {\n\t\t\t\ttemplate: { title: title, icon: m.trust(copySvg) },\n\t\t\t\tshowAsClickable: true\n\t\t\t}),\n\t\t\t(close) => <ul class=\"content\">\n\t\t\t\t<h2>{Lang.get(\"select_a_study\")}</h2>\n\t\t\t\t{ this.sectionContent.section.siteData.studyLoader.getSortedStudyList()\n\t\t\t\t\t.filter((study) =>\n\t\t\t\t\t\ttools.isAdmin || tools.permissions.write.indexOf(study.id.get()) != -1\n\t\t\t\t\t)\n\t\t\t\t\t.map((study) =>\n\t\t\t\t\t\tdrawContent(study, close)\n\t\t\t\t\t)}\n\t\t\t</ul>\n\t\t)\n\t}\n}","import {Study} from \"../data/study/Study\";\nimport {ObservableStructureDataType} from \"../observable/ObservableStructure\";\nimport m, {Component, Vnode, VnodeDOM} from \"mithril\";\nimport {JSONContent, JSONEditor, MenuButton, MenuItem, Mode, TextContent} from \"vanilla-jsoneditor\";\nimport {ObserverId} from \"../observable/BaseObservable\";\nimport {JsonTypes} from \"../observable/types/JsonTypes\";\nimport {Lang} from \"../singletons/Lang\";\n\ninterface JsonSourceComponentOptions {\n\tgetStudy?: () => Study\n\tsetJson: (json: ObservableStructureDataType) => void\n\tshowMainMenuBar?: boolean\n\tmode?: Mode\n\tsaveBtnLabel?: string\n}\nexport class JsonSourceComponent implements Component<JsonSourceComponentOptions, any> {\n\tprivate hasChanged: boolean = false\n\tprivate editor?: JSONEditor\n\tprivate setJson?: (json: ObservableStructureDataType) => void\n\tprivate getStudy?: () => Study\n\tprivate studyObserveId?: ObserverId\n\tprivate saveBtnLabel?: string\n\t\n\tprivate getJson(): JsonTypes {\n\t\tif(!this.getStudy)\n\t\t\treturn {}\n\t\treturn this.getStudy().createJson()\n\t}\n\tprivate getJsonContent(): JSONContent | TextContent {\n\t\tif(this.getStudy)\n\t\t\treturn {json: this.getStudy().createJson()}\n\t\treturn {text: \"\"}\n\t}\n\t\n\tpublic oncreate(vNode: VnodeDOM<JsonSourceComponentOptions, any>): void {\n\t\tthis.setJson = vNode.attrs.setJson\n\t\tthis.getStudy = vNode.attrs.getStudy\n\t\tthis.saveBtnLabel = vNode.attrs.saveBtnLabel\n\t\t\n\t\tthis.editor = new JSONEditor(\n\t\t\t{\n\t\t\t\ttarget: vNode.dom,\n\t\t\t\tprops: {\n\t\t\t\t\tcontent: this.getJsonContent(),\n\t\t\t\t\tmode: vNode.attrs.mode ?? Mode.tree,\n\t\t\t\t\tmainMenuBar: vNode.attrs.showMainMenuBar ?? true,\n\t\t\t\t\tonChange: () => {\n\t\t\t\t\t\tthis.hasChanged = true\n\t\t\t\t\t\tm.redraw()\n\t\t\t\t\t},\n\t\t\t\t\tonRenderMenu: (items: MenuItem[], _context: { mode: 'tree' | 'text' | 'table', modal: boolean }) => {\n\t\t\t\t\t\tconst index = items.findIndex((item) => {return (item as MenuButton)?.text == \"table\"})\n\t\t\t\t\t\titems.splice(index, 1)\n\t\t\t\t\t\treturn items\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t})\n\t\t\n\t\tif(this.getStudy) {\n\t\t\tthis.studyObserveId = this.getStudy().addObserver(() => {\n\t\t\t\tthis.editor?.set(this.getJsonContent())\n\t\t\t})\n\t\t}\n\t}\n\t\n\tpublic onremove(): void {\n\t\tthis.studyObserveId?.removeObserver()\n\t}\n\t\n\tprivate clickApply(): void {\n\t\tif(!this.setJson)\n\t\t\treturn\n\t\tlet json\n\t\ttry {\n\t\t\tjson = (this.editor?.get() as JSONContent).json ?? JSON.parse((this.editor?.get() as TextContent).text)\n\t\t}\n\t\tcatch(e) {\n\t\t\tconsole.error(e)\n\t\t\treturn\n\t\t}\n\t\tif(this.getStudy)\n\t\t\tjson.id = this.getStudy().id.get()\n\t\tthis.setJson(json)\n\t\tthis.hasChanged = false\n\t}\n\t\n\tpublic view(): Vnode<any, any> {\n\t\treturn <div class=\"source\">\n\t\t\t{this.hasChanged &&\n\t\t\t\t<div class=\"applyBtn\" onclick={this.clickApply.bind(this)}>{this.saveBtnLabel ?? Lang.get(\"apply_changes\")}</div>\n\t\t\t}\n\t\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}"],"names":["sectionContent","this","addStudy","target","loaderState","section","loader","studyLoader","siteData","getStrippedStudyListPromise","showLoader","loadStrippedStudyList","close","addStudyView","studyData","id","newSection","connectedDropdowns","class","newButton","get","title","duplicateButton","study","published","onclick","loadFullStudy","fullStudy","createJson","template","showAsClickable","setJson","json","showMainMenuBar","mode","text","saveBtnLabel","addQuestionnaire","addQuestionnaireView","questionnaire","sectionName","internalId","depth","setDynamic","questionnaires","length","addSQuestionnaire","openedStudies","pages","map","index","fullQuestionnaire","getTitle","btnTitle","promptString","add","icon","prompt","drawContent","tools","getTools","getSortedStudyList","filter","isAdmin","permissions","write","indexOf","hasChanged","getJson","getStudy","getJsonContent","oncreate","vNode","attrs","editor","dom","props","content","tree","mainMenuBar","onChange","onRenderMenu","items","_context","findIndex","item","splice","studyObserveId","addObserver","set","onremove","removeObserver","clickApply","JSON","parse","e","console","error","view","bind","preLoad","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","newValue","dynamicValues","setChild","getStaticInt","getStaticString","getStudyOrNull","studies","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","Error","getQuestionnaireOrNull","qId","getQuestionnaireOrThrow","getAdmin","hasPermission","name","studyId","isLoggedIn","getUrl","getHash","goTo","window","location","hash","destroy"],"sourceRoot":""}