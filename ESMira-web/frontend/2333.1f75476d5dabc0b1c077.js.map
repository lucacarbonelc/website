{"version":3,"file":"2333.1f75476d5dabc0b1c077.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/merlinLogList.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx"],"sourcesContent":["import {FILE_ADMIN} from \"../constants/urls\";\nimport m, {Vnode} from \"mithril\";\nimport {MerlinLogInfo} from \"../data/merlinLogs/MerlinLogInfo\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Requests} from \"../singletons/Requests\";\nimport {Section} from \"../site/Section\";\nimport {SectionContent} from \"../site/SectionContent\";\nimport commentSvg from \"../../imgs/icons/comment.svg?raw\"\nimport {BtnOk, BtnTrash} from \"../widgets/BtnWidgets\";\n\n\nexport class Content extends SectionContent {\n\tprivate readLogs: MerlinLogInfo[] = []\n\tprivate unreadLogs: MerlinLogInfo[] = []\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tRequests.loadJson(`${FILE_ADMIN}?type=ListMerlinLogs&study_id=${section.getStaticInt(\"id\") ?? 0}`)\n\t\t]\n\t}\n\t\n\tconstructor(section: Section, merlinLogs: MerlinLogInfo[]) {\n\t\tsuper(section)\n\t\t\n\t\tthis.sortMerlinLogs(merlinLogs)\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"merlin_logs\")\n\t}\n\t\n\tprivate async reloadMerlinLogs(): Promise<void> {\n\t\tconst logs = await this.section.loader.loadJson(`${FILE_ADMIN}?type=ListMerlinLogs&study_id=${this.section.getStaticInt(\"id\") ?? 0}`)\n\t\tthis.sortMerlinLogs(logs)\n\t\tthis.getTools().merlinLogsLoader.setStudyNewLogsRemaining(this.section.getStaticInt(\"id\") ?? 0, this.unreadLogs.length > 0)\n\t}\n\t\n\tprivate sortMerlinLogs(merlinLogs: MerlinLogInfo[]) {\n\t\tthis.readLogs = []\n\t\tthis.unreadLogs = []\n\t\t\n\t\tmerlinLogs = merlinLogs.sort(function(a, b) {\n\t\t\treturn b.timestamp - a.timestamp\n\t\t})\n\t\t\n\t\tfor(const merlinLog of merlinLogs) {\n\t\t\tmerlinLog.printName = this.getName(merlinLog)\n\t\t\t\n\t\t\tif(merlinLog.seen)\n\t\t\t\tthis.readLogs.push(merlinLog)\n\t\t\telse\n\t\t\t\tthis.unreadLogs.push(merlinLog)\n\t\t}\n\t}\n\t\n\tprivate getName(merlinLog: MerlinLogInfo): string {\n\t\tconst date = new Date(merlinLog.timestamp).toLocaleString()\n\t\treturn merlinLog.note ? `${merlinLog.note} (${date})` : date\n\t}\n\t\n\tprivate async deleteMerlinLog(merlinLog: MerlinLogInfo): Promise<void> {\n\t\tif(!confirm(Lang.get(\"confirm_delete_merlin_log\", this.getName(merlinLog))))\n\t\t\treturn\n\t\t\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=DeleteMerlinLog&study_id=${this.section.getStaticInt(\"id\") ?? 0}`,\n\t\t\t\"post\",\n\t\t\t`timestamp=${merlinLog.timestamp}`\n\t\t)\n\t\tawait this.reloadMerlinLogs()\n\t\twindow.location.hash = `${this.section.getHash(this.section.depth)}`\n\t}\n\t\n\tprivate async markMerlinLogAsSeen(merlinLog: MerlinLogInfo): Promise<void> {\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=ChangeMerlinLog&study_id=${this.section.getStaticInt(\"id\") ?? 0}`,\n\t\t\t\"post\",\n\t\t\t`timestamp=${merlinLog.timestamp}&note=${merlinLog.note}&seen=1`\n\t\t)\n\t\tawait this.reloadMerlinLogs()\n\t}\n\t\n\tprivate async addNoteToMerlinLog(merlinLog: MerlinLogInfo): Promise<void> {\n\t\tconst newNote = prompt(Lang.get(\"prompt_comment\"), merlinLog.note)\n\t\tif(!newNote)\n\t\t\treturn\n\t\t\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=ChangeMerlinLog&study_id=${this.section.getStaticInt(\"id\") ?? 0}`,\n\t\t\t\"post\",\n\t\t\t`timestamp=${merlinLog.timestamp}&note=${newNote}&seen=${merlinLog.seen ? 1 : 0}`\n\t\t)\n\t\tawait this.reloadMerlinLogs()\n\t}\n\t\n\tprivate getMerlinLogList(merlinLogs: MerlinLogInfo[]): Vnode<any, any> {\n\t\treturn <div class=\"listParent\">\n\t\t\t<div class=\"listChild error_list\">\n\t\t\t\t{merlinLogs.map((merlinLog) =>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{BtnTrash(this.deleteMerlinLog.bind(this, merlinLog))}\n\t\t\t\t\t\t{!merlinLog.seen &&\n\t\t\t\t\t\t\tBtnOk(this.markMerlinLogAsSeen.bind(this, merlinLog))\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<a onclick={this.addNoteToMerlinLog.bind(this, merlinLog)}>\n\t\t\t\t\t\t\t{m.trust(commentSvg)}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={this.getUrl(`merlinLogView,timestamp:${merlinLog.timestamp},note:${btoa(merlinLog.note)}`)}>{merlinLog.printName}</a>\n\t\t\t\t\t\t{merlinLog.seen &&\n\t\t\t\t\t\t\t<span class=\"extraNote\">{Lang.get(\"seen\")}</span>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn <div>\n\t\t\t{this.readLogs.length == 0 && this.unreadLogs.length == 0 &&\n\t\t\t\t<div><span>{Lang.get(\"no_merlin_logs\")}</span></div>\n\t\t\t}\n\t\t\t{this.getMerlinLogList(this.unreadLogs)}\n\t\t\t{this.readLogs.length != 0 && this.unreadLogs.length != 0 &&\n\t\t\t\t<hr/>\n\t\t\t}\n\t\t\t{this.getMerlinLogList(this.readLogs)}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n"],"names":["section","merlinLogs","readLogs","unreadLogs","sortMerlinLogs","preLoad","loadJson","getStaticInt","title","get","reloadMerlinLogs","this","loader","logs","getTools","merlinLogsLoader","setStudyNewLogsRemaining","length","sort","a","b","timestamp","merlinLog","printName","getName","seen","push","date","Date","toLocaleString","note","deleteMerlinLog","confirm","window","location","hash","getHash","depth","markMerlinLogAsSeen","addNoteToMerlinLog","newNote","prompt","getMerlinLogList","class","map","bind","onclick","href","getUrl","btoa","getView","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getAdmin","hasPermission","name","studyId","isLoggedIn","goTo","target","newSection","destroy","BtnCustom","icon","hoverTitle","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer"],"sourceRoot":""}