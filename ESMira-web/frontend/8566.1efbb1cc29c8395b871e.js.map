{"version":3,"file":"8566.1efbb1cc29c8395b871e.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/langGroups.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BindObservable.tsx","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx","webpack://ESMira/./src/frontend/ts/widgets/ChangeLanguageList.tsx","webpack://ESMira/./src/frontend/ts/widgets/NotCompatibleIcon.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx","webpack://ESMira/./src/frontend/langCodes/ lazy ^\\.\\/.*\\.json$ namespace object"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {BindObservable} from \"../widgets/BindObservable\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {NotCompatibleIcon} from \"../widgets/NotCompatibleIcon\";\nimport {Section} from \"../site/Section\";\nimport {ChangeLanguageList} from \"../widgets/ChangeLanguageList\";\n\nexport class Content extends SectionContent {\n\tprivate changeLanguageList: ChangeLanguageList\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [section.getStudyPromise()]\n\t}\n\t\n\tconstructor(sitePage: Section) {\n\t\tsuper(sitePage)\n\t\tthis.changeLanguageList = new ChangeLanguageList(() => {\n\t\t\treturn this.getStudyOrThrow()\n\t\t})\n\t}\n\t\n\tpublic preInit(): Promise<void> {\n\t\treturn this.changeLanguageList.promise\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"study_description\")\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst study = this.getStudyOrThrow()\n\t\treturn <div>\n\t\t\t{TitleRow(\n\t\t\t\t<div>\n\t\t\t\t\t<span class=\"spacingRight\">{Lang.get(\"randomGroups\")}</span>\n\t\t\t\t\t{NotCompatibleIcon(\"Web\")}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div class=\"smallText\">{Lang.get(\"info_randomGroups\")}</div>\n\t\t\t\n\t\t\t<label class=\"spacingTop\">\n\t\t\t\t<small>{Lang.get(\"group_count\")}</small>\n\t\t\t\t<input type=\"number\" {... BindObservable(study.randomGroups)}/>\n\t\t\t</label>\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"additional_languages\"))}\n\t\t\t<div class=\"smallText spacingBottom\">{Lang.get(\"info_languages\")}</div>\n\t\t\t{this.changeLanguageList.getView()}\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m from \"mithril\"\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {getMidnightMillis, timeStampToTimeString} from \"../constants/methods\";\n\nexport interface Transformer {\n\ttoAttribute(value: PrimitiveType): PrimitiveType\n\ttoObs(value: string, obs: BaseObservable<PrimitiveType>): PrimitiveType\n}\nconst OptimusPrimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value\n\t}\n}\nconst OptimusPrimeNumberTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn parseInt(value) || 0\n\t}\n}\n\nexport class OnBeforeChangeTransformer<T extends PrimitiveType> implements Transformer {\n\tprivate readonly onBeforeChange: (before: T, after: T) => T\n\tconstructor(onBeforeChange: (before: T, after: T) => T) {\n\t\tthis.onBeforeChange = onBeforeChange\n\t}\n\tpublic toAttribute(value: T): T {\n\t\treturn value\n\t}\n\tpublic toObs(value: string, obs: BaseObservable<T>): T {\n\t\treturn this.onBeforeChange(obs.get(), value as T) || value as T\n\t}\n}\nexport const BooleanTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value ? \"1\" : \"0\"\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value == \"1\"\n\t}\n}\nexport const DateTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == 0)\n\t\t\treturn \"\"\n\t\treturn (new Date(intValue)).toISOString().split(\"T\")[0]\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value === \"\")\n\t\t\treturn 0\n\t\telse\n\t\t\treturn (new Date(value)).getTime()\n\t}\n}\nexport const TimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == -1)\n\t\t\treturn \"\"\n\t\telse {\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\treturn timeStampToTimeString(midnight + intValue)\n\t\t}\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value == \"\")\n\t\t\treturn -1\n\t\telse {\n\t\t\tconst parts = value.split(\":\")\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\tconst date = new Date()\n\t\t\tdate.setHours(parseInt(parts[0]) || 0)\n\t\t\tdate.setMinutes(parseInt(parts[1]) || 0)\n\t\t\t\n\t\t\treturn date.getTime() - midnight\n\t\t}\n\t}\n}\n\nexport function BindObservable(obs: BaseObservable<PrimitiveType>, transformer?: Transformer, attr?: keyof HTMLInputElement, event: keyof HTMLInputElement = \"onchange\"): Record<string, any> {\n\tconst attrValue = obs.get()\n\tif(!transformer) {\n\t\tif(typeof attrValue == \"number\")\n\t\t\ttransformer = OptimusPrimeNumberTransformer\n\t\telse\n\t\t\ttransformer = OptimusPrimeTransformer\n\t}\n\tif(!attr) {\n\t\tif(typeof attrValue == \"boolean\")\n\t\t\tattr = \"checked\"\n\t\telse\n\t\t\tattr = \"value\"\n\t}\n\t\n\treturn {\n\t\t[attr]: transformer.toAttribute(attrValue),\n\t\t[event]: (e: InputEvent) => {\n\t\t\tconst element = e.target as HTMLInputElement\n\t\t\tobs.set(transformer!.toObs(element[attr!] as string, obs))\n\t\t}\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n","import m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {BindObservable, OnBeforeChangeTransformer} from \"./BindObservable\";\nimport {TranslationRootInterface} from \"../observable/interfaces/TranslationRootInterface\";\nimport {BtnTrash} from \"./BtnWidgets\";\n\nexport class ChangeLanguageList {\n\tpublic readonly promise: Promise<void>\n\tprivate readonly langCodeNames: { langName: string, langCode: string }[] = []\n\tprivate readonly getTranslationRoot: () => TranslationRootInterface\n\t\n\tconstructor(getTranslationRoot: () => TranslationRootInterface) {\n\t\tthis.getTranslationRoot = getTranslationRoot\n\t\tthis.promise = import(`../../langCodes/${Lang.code}.json`)\n\t\t\t.then(({default: data}) => data)\n\t\t\t.then((langCollection: Record<string, string>) => {\n\t\t\t\tfor(let code in langCollection) {\n\t\t\t\t\tthis.langCodeNames.push({langName: langCollection[code], langCode: code})\n\t\t\t\t}\n\t\t\t})\n\t}\n\t\n\tprivate addLang(translationRoot: TranslationRootInterface, e: InputEvent): void {\n\t\tconst element = e.target as HTMLSelectElement\n\t\tconst langCode = element.value\n\t\t\n\t\ttranslationRoot.langCodes.push(langCode)\n\t\ttranslationRoot.addLanguage(langCode)\n\t\telement.selectedIndex = 0\n\t\tconsole.log(translationRoot, langCode)\n\t}\n\t\n\tprivate removeLang(translationRoot: TranslationRootInterface, langCode: string): void {\n\t\tconst index = translationRoot.langCodes.indexOf(langCode)\n\t\ttranslationRoot.langCodes.remove(index)\n\t\ttranslationRoot.removeLanguage(langCode)\n\t\t\n\t\tif(langCode === translationRoot.defaultLang.get())\n\t\t\ttranslationRoot.defaultLang.set(translationRoot.langCodes.get()[0].get() ?? \"unknown\")\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst translationRoot = this.getTranslationRoot()\n\t\tconst langCodes = translationRoot.langCodes.get()\n\t\treturn <div class=\"listParent\">\n\t\t\t<div class=\"listChild\">\n\t\t\t\t{langCodes.map((langCode) =>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{ langCodes.length > 1 &&\n\t\t\t\t\t\t\tBtnTrash(this.removeLang.bind(this, translationRoot, langCode.get()))\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t<label class=\"middle\">\n\t\t\t\t\t\t\t<small>{Lang.get(\"language\")}</small>\n\t\t\t\t\t\t\t<select {... BindObservable(langCode, new OnBeforeChangeTransformer<string>((before, after) => {\n\t\t\t\t\t\t\t\ttranslationRoot.renameLanguage(before, after)\n\t\t\t\t\t\t\t\tif(translationRoot.defaultLang.get() == before)\n\t\t\t\t\t\t\t\t\ttranslationRoot.defaultLang.set(after)\n\t\t\t\t\t\t\t\treturn after\n\t\t\t\t\t\t\t}))}>\n\t\t\t\t\t\t\t\t<option>unnamed</option>\n\t\t\t\t\t\t\t\t{this.langCodeNames.map((entry) => <option value={entry.langCode}>{entry.langName}</option>)}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"default_language\" checked={translationRoot.defaultLang.get() == langCode.get()} onchange={function(this:HTMLInputElement) {\n\t\t\t\t\t\t\t\tif(this.checked)\n\t\t\t\t\t\t\t\t\ttranslationRoot.defaultLang.set(langCode.get())\n\t\t\t\t\t\t\t}}/>\n\t\t\t\t\t\t\t<span>{Lang.get(\"default_language\")}</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div class=\"spacingTop\">\n\t\t\t\t\t<label class=\"middle spacingLeft\">\n\t\t\t\t\t\t<small>{Lang.get(\"language\")}</small>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<select class=\"smallText\" onchange={this.addLang.bind(this, translationRoot)}>\n\t\t\t\t\t\t\t<option>{Lang.get(\"select_to_add\")}</option>\n\t\t\t\t\t\t\t{this.langCodeNames.map((entry) => <option value={entry.langCode}>{entry.langName}</option>)}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport androidSvg from \"../../imgs/devices/android.svg?raw\"\nimport iosSvg from \"../../imgs/devices/ios.svg?raw\"\nimport webSvg from \"../../imgs/devices/web.svg?raw\"\nimport {closeDropdown, openDropdown} from \"./DropdownMenu\";\n\n\nexport type PossibleDevices = \"Android\" | \"iOS\" | \"Web\"\n\nconst imageRecord: Record<PossibleDevices, string> = {\n\tAndroid: androidSvg,\n\tiOS: iosSvg,\n\tWeb: webSvg\n}\n\nfunction onPointerEnter(title: string, e: MouseEvent) {\n\topenDropdown(\"notCompatible\", e.target as HTMLElement,\n\t\t() => <div class=\"smallText center\">{title}</div>\n\t)\n}\nfunction onPointerLeave() {\n\tcloseDropdown(\"notCompatible\")\n}\n\nexport function NotCompatibleIcon(... devices: PossibleDevices[]): Vnode<any, any> {\n\tconst translationRecord: Record<PossibleDevices, string> = {\n\t\tAndroid: Lang.get(\"Android\"),\n\t\tiOS: Lang.get(\"iOS\"),\n\t\tWeb: Lang.get(\"web_questionnaire\")\n\t}\n\tconst title = Lang.get(\"not_compatible_with\", devices.map((device) => translationRecord[device]).join(\", \"))\n\treturn <div class=\"notCompatibleIcon\" onpointerenter={onPointerEnter.bind(null, title)} onpointerleave={onPointerLeave.bind(null)}>\n\t\t{devices.map((device) =>\n\t\t\t<div class=\"deviceIcon\">{m.trust(imageRecord[device])}</div>)}\n\t</div>\n\n}\n","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}","var map = {\n\t\"./de.json\": [\n\t\t5142,\n\t\t5142\n\t],\n\t\"./en.json\": [\n\t\t1294,\n\t\t1294\n\t],\n\t\"./it.json\": [\n\t\t7416,\n\t\t7416\n\t],\n\t\"./tl.json\": [\n\t\t601,\n\t\t601\n\t],\n\t\"./uk.json\": [\n\t\t6541,\n\t\t6541\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 6480;\nmodule.exports = webpackAsyncContext;"],"names":["sitePage","changeLanguageList","getStudyOrThrow","preLoad","section","getStudyPromise","preInit","this","promise","title","get","getView","study","class","type","randomGroups","getWithColon","_section","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticInt","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","getUrl","depth","getHash","goTo","target","window","location","hash","newSection","destroy","OptimusPrimeTransformer","toAttribute","value","toObs","OptimusPrimeNumberTransformer","parseInt","onBeforeChange","obs","BooleanTransformer","DateTransformer","intValue","toString","Date","toISOString","split","getTime","TimeTransformer","midnight","parts","date","setHours","setMinutes","BindObservable","transformer","attr","event","attrValue","e","element","set","BtnCustom","icon","onclick","hoverTitle","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer","getTranslationRoot","langCodeNames","code","then","langCollection","push","langName","langCode","addLang","translationRoot","langCodes","addLanguage","selectedIndex","console","log","removeLang","index","indexOf","remove","removeLanguage","defaultLang","map","length","bind","before","after","renameLanguage","entry","checked","onchange","imageRecord","Android","iOS","Web","onPointerEnter","onPointerLeave","NotCompatibleIcon","translationRecord","Lang","devices","device","join","onpointerenter","onpointerleave","TitleRow","attrs","webpackAsyncContext","req","__webpack_require__","o","ids","t","keys","Object","module","exports"],"sourceRoot":""}