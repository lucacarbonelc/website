{"version":3,"file":"8369.38e8611f763f6fafedc2.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/pages/initESMira.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BindObservable.tsx","webpack://ESMira/./src/frontend/ts/widgets/ChangeAccount.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {Requests} from \"../singletons/Requests\";\nimport {FILE_ADMIN, FILE_CHECK_HTACCESS} from \"../constants/urls\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {ChangeAccount} from \"../widgets/ChangeAccount\";\n\ninterface FolderData {\n\tdirBase: string\n\tdataFolderExists: boolean\n}\n\nexport class Content extends SectionContent {\n\tprivate readonly htaccessEnabled: boolean\n\tprivate readonly modRewriteEnabled: boolean\n\tprivate folderData: FolderData\n\tprivate reuseFolder: boolean = false\n\t\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tRequests.loadJson(`${FILE_ADMIN}?type=InitESMiraPrep`),\n\t\t\tRequests.loadJson(FILE_CHECK_HTACCESS,)\n\t\t]\n\t}\n\t\n\tconstructor(section: Section, folderData: FolderData, serverData: {htaccess: boolean, modRewrite: boolean}) {\n\t\tsuper(section)\n\t\tthis.folderData = folderData\n\t\tthis.htaccessEnabled = serverData.htaccess\n\t\tthis.modRewriteEnabled = serverData.modRewrite\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"init_esmira\")\n\t}\n\t\n\tprivate async changeDataLocation(e: InputEvent): Promise<void> {\n\t\tconst value = (e.target as HTMLInputElement).value\n\t\tthis.folderData.dirBase = value\n\t\t\n\t\tconst folderData = await this.section.loader.loadJson(`${FILE_ADMIN}?type=DataFolderExists`, \"post\", `data_location=${value}`)\n\t\tthis.folderData.dataFolderExists = folderData.dataFolderExists\n\t\tm.redraw()\n\t}\n\tprivate async createESMira(accountName: string, password: string): Promise<boolean> {\n\t\tawait this.section.loader.loadJson(\n\t\t\t`${FILE_ADMIN}?type=InitESMira`,\n\t\t\t\"post\",\n\t\t\t`new_account=${accountName}&pass=${password}&data_location=${this.folderData.dirBase}&reuseFolder=${this.reuseFolder ? \"1\" : \"0\"}`\n\t\t)\n\t\tthis.goTo(\"admin\")\n\t\twindow.location.reload()\n\t\treturn true\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn <div>\n\t\t\t{(!this.htaccessEnabled || !this.modRewriteEnabled) &&\n\t\t\t\t<div>\n\t\t\t\t\t{TitleRow(Lang.getWithColon(\"additional_server_settings\"))}\n\t\t\t\t\t<div class=\"spacingBottom\">{m.trust(Lang.get(\"info_init_additional_steps\"))}</div>\n\t\t\t\t\t<table class=\"spacingBottom\">\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>.htaccess:</td>\n\t\t\t\t\t\t\t<td style={`color:${this.htaccessEnabled ? 'lightgreen' : 'red'}`}>{this.htaccessEnabled ? Lang.get(\"enabled\") : Lang.get(\"disabled\")}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>mod rewrite:</td>\n\t\t\t\t\t\t\t<td style={`color:${this.modRewriteEnabled ? 'lightgreen' : 'red'}`}>{this.modRewriteEnabled ? Lang.get(\"enabled\") : Lang.get(\"disabled\")}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"installation_settings\"))}\n\t\t\t<div class=\"spacingBottom\">{Lang.get(\"info_path_to_data_directory\")}</div>\n\t\t\t<label class=\"line spacingBottom\">\n\t\t\t\t<small>{Lang.get(\"path_to_data_directory\")}</small>\n\t\t\t\t<input class=\"big\" type=\"text\" value={this.folderData.dirBase} onchange={this.changeDataLocation.bind(this)}/>\n\t\t\t</label>\n\t\t\t\n\t\t\t{this.folderData.dataFolderExists &&\n\t\t\t\t<div>\n\t\t\t\t\t<div class=\"spacingBottom\">{Lang.get(\"info_dataFolder_already_exists\")}</div>\n\t\t\t\t\t<div class=\"center\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<small>{Lang.get(\"no\")}</small>\n\t\t\t\t\t\t\t<input type=\"radio\" checked={!this.reuseFolder} onchange={() => {this.reuseFolder = false}}/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<label class=\"spacingLeft\">\n\t\t\t\t\t\t\t<small>{Lang.get(\"yes\")}</small>\n\t\t\t\t\t\t\t<input type=\"radio\" checked={this.reuseFolder} onchange={() => {this.reuseFolder = true}}/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"admin_account\"))}\n\t\t\t<div>{Lang.get(\"info_no_password_forget\")}</div>\n\t\t\t<br/>\n\t\t\t<br/>\n\t\t\t<br/>\n\t\t\t\n\t\t\t<div class=\"center\">\n\t\t\t\t{ChangeAccount(\n\t\t\t\t\tthis.createESMira.bind(this),\n\t\t\t\t\tthis.section.loader.error.bind(this.section.loader)\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m from \"mithril\"\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {getMidnightMillis, timeStampToTimeString} from \"../constants/methods\";\n\nexport interface Transformer {\n\ttoAttribute(value: PrimitiveType): PrimitiveType\n\ttoObs(value: string, obs: BaseObservable<PrimitiveType>): PrimitiveType\n}\nconst OptimusPrimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value\n\t}\n}\nconst OptimusPrimeNumberTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn parseInt(value) || 0\n\t}\n}\n\nexport class OnBeforeChangeTransformer<T extends PrimitiveType> implements Transformer {\n\tprivate readonly onBeforeChange: (before: T, after: T) => T\n\tconstructor(onBeforeChange: (before: T, after: T) => T) {\n\t\tthis.onBeforeChange = onBeforeChange\n\t}\n\tpublic toAttribute(value: T): T {\n\t\treturn value\n\t}\n\tpublic toObs(value: string, obs: BaseObservable<T>): T {\n\t\treturn this.onBeforeChange(obs.get(), value as T) || value as T\n\t}\n}\nexport const BooleanTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value ? \"1\" : \"0\"\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value == \"1\"\n\t}\n}\nexport const DateTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == 0)\n\t\t\treturn \"\"\n\t\treturn (new Date(intValue)).toISOString().split(\"T\")[0]\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value === \"\")\n\t\t\treturn 0\n\t\telse\n\t\t\treturn (new Date(value)).getTime()\n\t}\n}\nexport const TimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == -1)\n\t\t\treturn \"\"\n\t\telse {\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\treturn timeStampToTimeString(midnight + intValue)\n\t\t}\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value == \"\")\n\t\t\treturn -1\n\t\telse {\n\t\t\tconst parts = value.split(\":\")\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\tconst date = new Date()\n\t\t\tdate.setHours(parseInt(parts[0]) || 0)\n\t\t\tdate.setMinutes(parseInt(parts[1]) || 0)\n\t\t\t\n\t\t\treturn date.getTime() - midnight\n\t\t}\n\t}\n}\n\nexport function BindObservable(obs: BaseObservable<PrimitiveType>, transformer?: Transformer, attr?: keyof HTMLInputElement, event: keyof HTMLInputElement = \"onchange\"): Record<string, any> {\n\tconst attrValue = obs.get()\n\tif(!transformer) {\n\t\tif(typeof attrValue == \"number\")\n\t\t\ttransformer = OptimusPrimeNumberTransformer\n\t\telse\n\t\t\ttransformer = OptimusPrimeTransformer\n\t}\n\tif(!attr) {\n\t\tif(typeof attrValue == \"boolean\")\n\t\t\tattr = \"checked\"\n\t\telse\n\t\t\tattr = \"value\"\n\t}\n\t\n\treturn {\n\t\t[attr]: transformer.toAttribute(attrValue),\n\t\t[event]: (e: InputEvent) => {\n\t\t\tconst element = e.target as HTMLInputElement\n\t\t\tobs.set(transformer!.toObs(element[attr!] as string, obs))\n\t\t}\n\t}\n}","import m, {Component, Vnode, VnodeDOM} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {BindObservable} from \"./BindObservable\";\n\nconst ACCOUNTNAME_MIN_LENGTH = 3;\nconst PASSWORD_MIN_LENGTH = 12;\n\nconst neutralStyle = \"background-color: transparent\"\nconst failStyle = \"background-color: #ffe1d5\"\nconst successStyle = \"background-color: #dfd\"\n\nclass InputStyleData {\n\tmsg: string = \"\"\n\tstyle: typeof neutralStyle | typeof failStyle | typeof successStyle = neutralStyle\n}\n\ninterface AccountChangerComponentOptions {\n\tonFinish: (accountName: string, password: string) => Promise<boolean>\n\tonError: (msg: string) => void\n\taccountName?: string\n\tbtnLabel: string\n}\nclass AccountChangerComponent implements Component<AccountChangerComponentOptions, any> {\n\tprivate needsAccountName: boolean = false\n\tprivate readonly accountName: ObservablePrimitive<string> = new ObservablePrimitive(\"\", null, \"accountName\")\n\tprivate readonly password: ObservablePrimitive<string> = new ObservablePrimitive(\"\", null, \"password\")\n\tprivate readonly passwordRepeat: ObservablePrimitive<string> = new ObservablePrimitive(\"\", null, \"passwordRepeat\")\n\tprivate accountNameStyle = new InputStyleData()\n\tprivate passStyle = new InputStyleData()\n\tprivate passRepeatStyle = new InputStyleData()\n\tprivate formEnabled: boolean = false\n\t\n\tpublic oncreate(vNode: VnodeDOM<AccountChangerComponentOptions, any>): void {\n\t\tconst accountName = vNode.attrs.accountName\n\t\tthis.needsAccountName = !accountName\n\t\t\n\t\tif(accountName)\n\t\t\tthis.accountName.set(accountName)\n\t\t\n\t\tthis.accountName.addObserver(() => {\n\t\t\tthis.accountNameStyle = this.lengthCheck(this.accountName.get(), ACCOUNTNAME_MIN_LENGTH)\n\t\t\tthis.tryEnableForm()\n\t\t})\n\t\tthis.password.addObserver(() => {\n\t\t\tthis.passStyle = this.lengthCheck(this.password.get(), PASSWORD_MIN_LENGTH)\n\t\t\tthis.tryEnableForm()\n\t\t})\n\t\tthis.passwordRepeat.addObserver(() => {\n\t\t\tthis.passRepeatStyle = this.password.get() != this.passwordRepeat.get()\n\t\t\t\t? { msg: \"\", style: failStyle }\n\t\t\t\t: this.lengthCheck(this.passwordRepeat.get(), PASSWORD_MIN_LENGTH)\n\t\t\tthis.tryEnableForm()\n\t\t})\n\t}\n\t\n\tprivate lengthCheck(value: string, minLength: number): InputStyleData {\n\t\tif(!value.length)\n\t\t\treturn { msg: \"\", style: neutralStyle }\n\t\telse if(value.length < minLength)\n\t\t\treturn { msg: Lang.get(\"minimal_length\", minLength), style: failStyle }\n\t\telse\n\t\t\treturn { msg: \"\", style: successStyle }\n\t}\n\t\n\tprivate tryEnableForm(): void {\n\t\tthis.formEnabled = (!this.needsAccountName || this.accountNameStyle.style == successStyle) && this.passStyle.style == successStyle && this.passRepeatStyle.style == successStyle\n\t}\n\t\n\tprivate async submitForm(onFinish: (accountName: string, password: string) => Promise<boolean>, onError: (msg: string) => void, e: InputEvent): Promise<any> {\n\t\te.preventDefault()\n\t\tif(this.accountName.get().length < 3)\n\t\t\tonError(Lang.get('error_short_username'))\n\t\telse if(this.password.get().length < PASSWORD_MIN_LENGTH)\n\t\t\tonError(Lang.get('error_bad_password'))\n\t\telse {\n\t\t\tconst response = await onFinish(this.accountName.get(), this.password.get())\n\t\t\tif(response) {\n\t\t\t\tif(this.needsAccountName)\n\t\t\t\t\tthis.accountName.set(\"\")\n\t\t\t\tthis.password.set(\"\")\n\t\t\t\tthis.passwordRepeat.set(\"\")\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic view(vNode: Vnode<AccountChangerComponentOptions, any>): Vnode<any, any> {\n\t\treturn <div>\n\t\t\t<form method=\"post\" action=\"\" class=\"nowrap\" onsubmit={this.submitForm.bind(this, vNode.attrs.onFinish, vNode.attrs.onError)}>\n\t\t\t\t<div class=\"element\">\n\t\t\t\t\t{this.needsAccountName &&\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<small>{Lang.get(\"username\")}</small>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tautocomplete=\"username\"\n\t\t\t\t\t\t\t\ttype=\"text\" {... BindObservable(this.accountName)}\n\t\t\t\t\t\t\t\tstyle={this.accountNameStyle.style}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<small>{this.accountNameStyle.msg}</small>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"element\">\n\t\t\t\t\t<label class=\"noDesc\">\n\t\t\t\t\t\t<small>{Lang.get(\"password\")}</small>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tautocomplete=\"new-password\"\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tstyle={this.passStyle.style}\n\t\t\t\t\t\t\t{... BindObservable(this.password, undefined, undefined, \"onkeyup\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<small>{this.passStyle.msg}</small>\n\t\t\t\t\t</label>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<small>{Lang.get(\"repeat_password\")}</small>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tautocomplete=\"new-password\"\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tstyle={this.passRepeatStyle.style}\n\t\t\t\t\t\t\t{... BindObservable(this.passwordRepeat, undefined, undefined, \"onkeyup\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<small>{this.passRepeatStyle.msg}</small>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"element\">\n\t\t\t\t\t<input type=\"submit\" value={vNode.attrs.btnLabel} disabled={!this.formEnabled}/>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t}\n}\n\nexport function ChangeAccount(\n\tonFinish: (accountName: string, password: string) => Promise<boolean>,\n\tonError: (msg: string) => void,\n\taccountName?: string,\n\tbtnLabel: string = Lang.get(\"save\")\n): Vnode<any, any> {\n\treturn m(AccountChangerComponent, {\n\t\tonFinish: onFinish,\n\t\tonError: onError,\n\t\taccountName: accountName,\n\t\tbtnLabel: btnLabel\n\t})\n}","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["section","folderData","serverData","reuseFolder","htaccessEnabled","htaccess","modRewriteEnabled","modRewrite","preLoad","_section","loadJson","title","get","changeDataLocation","e","value","target","this","dirBase","loader","dataFolderExists","createESMira","accountName","password","goTo","window","location","reload","getView","getWithColon","class","style","type","onchange","bind","checked","error","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticInt","getStaticString","getStudyOrNull","id","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getTools","getAdmin","hasPermission","name","studyId","isLoggedIn","getUrl","depth","getHash","hash","newSection","destroy","OptimusPrimeTransformer","toAttribute","toObs","OptimusPrimeNumberTransformer","parseInt","onBeforeChange","obs","BooleanTransformer","DateTransformer","intValue","toString","Date","toISOString","split","getTime","TimeTransformer","midnight","parts","date","setHours","setMinutes","BindObservable","transformer","attr","event","attrValue","element","set","neutralStyle","failStyle","successStyle","msg","needsAccountName","passwordRepeat","accountNameStyle","InputStyleData","passStyle","passRepeatStyle","formEnabled","oncreate","vNode","attrs","addObserver","lengthCheck","tryEnableForm","minLength","length","submitForm","onFinish","onError","preventDefault","view","method","action","onsubmit","autocomplete","undefined","btnLabel","disabled","ChangeAccount","AccountChangerComponent","TitleRow"],"sourceRoot":""}