{"version":3,"file":"8778.02097fc111c29c2e1478.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/data/serverDataTypes/SiteTranslations.ts","webpack://ESMira/./src/frontend/ts/data/serverDataTypes/ServerData.ts","webpack://ESMira/./src/frontend/ts/loader/ServerSettingsLoader.ts","webpack://ESMira/./src/frontend/ts/data/accounts/Account.ts","webpack://ESMira/./src/frontend/ts/loader/AccountsLoader.ts","webpack://ESMira/./src/frontend/ts/data/messages/MessageParticipantInfo.ts","webpack://ESMira/./src/frontend/ts/loader/MessagesLoader.ts","webpack://ESMira/./src/frontend/ts/loader/MerlinLogsLoader.ts","webpack://ESMira/./src/frontend/ts/loader/BookmarkLoader.ts","webpack://ESMira/./src/frontend/ts/admin/AdminTools.ts"],"sourcesContent":["import {ObservableStructure, ObservableStructureDataType} from \"../../observable/ObservableStructure\";\nimport {BaseObservable} from \"../../observable/BaseObservable\";\nimport {ObservableTypes} from \"../../observable/types/ObservableTypes\";\n\nexport class SiteTranslations extends ObservableStructure {\n\tpublic serverName = this.translatable(\"serverName\", \"\")\n\tpublic impressum = this.translatable(\"impressum\", \"\")\n\tpublic privacyPolicy = this.translatable(\"privacyPolicy\", \"\")\n\tpublic homeMessage = this.translatable(\"homeMessage\", \"\")\n\t\n\tconstructor(data: ObservableStructureDataType, parent: BaseObservable<ObservableTypes> | null, key: string, newLang?: string) {\n\t\tconst defaultLang = newLang ?? (parent as ObservableStructure)?.currentLangCode.get() ?? \"en\"\n\t\tconst translationData = data as  Record<string, Record<string, string>>\n\t\tsuper(translationData[defaultLang], parent, key, newLang)\n\t\t\n\t\tfor(const langCode in translationData) {\n\t\t\tif(langCode != defaultLang)\n\t\t\t\tthis.addLanguage(langCode, translationData[langCode])\n\t\t}\n\t}\n}","import {ObservableStructure} from \"../../observable/ObservableStructure\";\nimport {JsonTypes} from \"../../observable/types/JsonTypes\";\nimport {SiteTranslations} from \"./SiteTranslations\";\nimport {TranslationRootInterface} from \"../../observable/interfaces/TranslationRootInterface\";\n\nexport class ServerData extends ObservableStructure implements TranslationRootInterface {\n\tpublic defaultLang = this.primitive<string>(\"defaultLang\", \"en\")\n\tpublic langCodes = this.primitiveArray<string>(\"langCodes\", [])\n\tpublic siteTranslations = this.object(\"translationData\", SiteTranslations)\n\t\n\tconstructor(data: Record<string, JsonTypes>, newLang = data[\"defaultLang\"] as string) {\n\t\tsuper(data, null, \"serverSettings\", newLang)\n\t}\n}","import {FILE_ADMIN} from \"../constants/urls\";\nimport {PromiseCache} from \"../singletons/PromiseCache\";\nimport {Requests} from \"../singletons/Requests\";\nimport {ServerData} from \"../data/serverDataTypes/ServerData\";\nimport {JsonTypes} from \"../observable/types/JsonTypes\";\n\n\nexport class ServerSettingsLoader {\n\tprivate settings?: ServerData\n\t\n\tpublic async init(): Promise<ServerSettingsLoader> {\n\t\tawait PromiseCache.get(`serverConfigs`, async () => {\n\t\t\tconst json = await Requests.loadJson(`${FILE_ADMIN}?type=GetServerConfig`)\n\t\t\tthis.settings = new ServerData(json)\n\t\t})\n\t\treturn this\n\t}\n\t\n\tpublic getSettings(): ServerData {\n\t\treturn this.settings!\n\t}\n\t\n\tpublic async saveSettings(): Promise<void> {\n\t\tconst settings = this.settings\n\t\tif(settings == null)\n\t\t\treturn Promise.resolve()\n\t\t\n\t\tconst translationData: Record<string, JsonTypes> = {}\n\t\tconst langCodes = settings.langCodes.get()\n\t\t\n\t\tconst currentLang = settings.currentLangCode.get()\n\t\tfor(const langCode of langCodes) {\n\t\t\tsettings.currentLangCode.set(langCode.get())\n\t\t\ttranslationData[langCode.get()] = settings.siteTranslations.createJson({ dontFilterDefaults: true, dontIncludeAllLanguages: true })\n\t\t}\n\t\tsettings.currentLangCode.set(currentLang)\n\t\t\n\t\tconst exportData = settings.createJson({ dontFilterDefaults: true })\n\t\texportData[\"translationData\"] = translationData\n\t\t\n\t\tconst json = await Requests.loadJson(\n\t\t\tFILE_ADMIN + \"?type=SaveServerConfigs\",\n\t\t\t\"post\",\n\t\t\tJSON.stringify(exportData)\n\t\t)\n\t\t\n\t\t\n\t\tthis.settings = new ServerData(json, settings.defaultLang.get())\n\t\tthis.settings.importObserverData(settings)\n\t\tthis.settings.currentLangCode.set(settings.currentLangCode.get())\n\t\tthis.settings.hasMutated()\n\t\tdocument.getElementById(\"headerServerName\")!.innerText = this.settings.siteTranslations.serverName.get()\n\t}\n}","import {ObservableStructure, ObservableStructureDataType} from \"../../observable/ObservableStructure\";\nimport {BaseObservable} from \"../../observable/BaseObservable\";\nimport {ObservableTypes} from \"../../observable/types/ObservableTypes\";\n\nexport class Account extends ObservableStructure {\n\tpublic accountName = this.primitive<string>(\"accountName\", \"\")\n\t\n\tpublic admin = this.primitive<boolean>(\"admin\", false)\n\tpublic create = this.primitive<boolean>(\"create\", false)\n\t\n\tpublic read = this.primitiveArray<number>(\"read\", [])\n\tpublic write = this.primitiveArray<number>(\"write\", [])\n\tpublic msg = this.primitiveArray<number>(\"msg\", [])\n\tpublic publish = this.primitiveArray<number>(\"publish\", [])\n\t\n\tconstructor(data: ObservableStructureDataType, parent: BaseObservable<ObservableTypes> | null = null, _key?: string, newLang?: string) {\n\t\tsuper(data, parent, data[\"accountName\"] as string, newLang)\n\t}\n\tpublic updateKeyName(_keyName: string, parent?: BaseObservable<ObservableTypes>) {\n\t\tsuper.updateKeyName(this.accountName.get(), parent)\n\t}\n}","import {FILE_ADMIN} from \"../constants/urls\";\nimport {PromiseCache} from \"../singletons/PromiseCache\";\nimport {Requests} from \"../singletons/Requests\";\nimport {ObservableArray} from \"../observable/ObservableArray\";\nimport {ObservableStructureDataType} from \"../observable/ObservableStructure\";\nimport {Account} from \"../data/accounts/Account\";\nimport {safeConfirm} from \"../constants/methods\";\nimport {Lang} from \"../singletons/Lang\";\n\nexport type AccountList = ObservableArray<ObservableStructureDataType, Account>\n\nexport class AccountsLoader {\n\tprivate accounts?: AccountList\n\tpublic async init(): Promise<AccountsLoader> {\n\t\treturn PromiseCache.get(\"accountsList\", async () => {\n\t\t\tconst accountsJson = await Requests.loadJson(`${FILE_ADMIN}?type=ListAccounts`)\n\t\t\tthis.accounts = new ObservableArray<ObservableStructureDataType, Account>(\n\t\t\t\taccountsJson,\n\t\t\t\tnull,\n\t\t\t\t\"accountList\",\n\t\t\t\t(data, parent, key) => {\n\t\t\t\t\treturn new Account(data, parent, key)\n\t\t\t\t})\n\t\t\treturn this\n\t\t})\n\t}\n\tpublic getAccounts(): Account[] {\n\t\treturn this.accounts!.get()\n\t}\n\t\n\tpublic async addAccount(accountName: string, password: string): Promise<number> {\n\t\tconst accounts = this.accounts!\n\t\tconst accountJson = await Requests.loadJson(`${FILE_ADMIN}?type=CreateAccount`, \"post\", `new_account=${accountName}&pass=${password}`)\n\t\taccounts.push(accountJson)\n\t\treturn accounts.get().length - 1\n\t}\n\tpublic async deleteAccount(account: Account, index: number): Promise<boolean> {\n\t\tconst accountName = account.accountName.get()\n\t\tif(!safeConfirm(Lang.get(\"confirm_delete_account\", accountName)))\n\t\t\treturn false\n\t\tconst accounts = this.accounts!\n\t\tawait Requests.loadJson(`${FILE_ADMIN}?type=DeleteAccount`, \"post\", `accountName=${accountName}`)\n\t\taccounts.remove(index)\n\t\treturn true\n\t}\n}","import {ObservableStructure} from \"../../observable/ObservableStructure\";\n\nexport class MessageParticipantInfo extends ObservableStructure {\n\tpublic name = this.primitive<string>(\"name\", \"\")\n\tpublic lastMsg = this.primitive<number>(\"lastMsg\", 0)\n\tpublic archived = this.primitive<boolean>(\"archived\", false)\n\tpublic pending = this.primitive<boolean>(\"pending\", false)\n\tpublic unread = this.primitive<boolean>(\"unread\", false)\n}","import {FILE_ADMIN} from \"../constants/urls\";\nimport {PromiseCache} from \"../singletons/PromiseCache\";\nimport {Requests} from \"../singletons/Requests\";\nimport {ObservableArray} from \"../observable/ObservableArray\";\nimport {ObservableStructureDataType} from \"../observable/ObservableStructure\";\nimport {MessageParticipantInfo} from \"../data/messages/MessageParticipantInfo\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {LoginDataInterface} from \"../admin/LoginDataInterface\";\nimport {ParticipantMessagesContainer} from \"../data/messages/ParticipantMessagesContainer\";\n\nexport type MessageParticipantInfoList = ObservableArray<ObservableStructureDataType, MessageParticipantInfo>\n\nexport class MessagesLoader {\n\tprivate messageParticipantInfoLists: Record<number, MessageParticipantInfoList> = {}\n\tpublic readonly studiesWithNewMessagesCount = new ObservablePrimitive<number>(0, null, \"studiesWithNewMessagesCount\")\n\tpublic readonly studiesWithNewMessagesList: Record<number, boolean> = {}\n\t\n\tconstructor(data: LoginDataInterface) {\n\t\tif(data.newMessages) {\n\t\t\tfor(let id of data.newMessages) {\n\t\t\t\tthis.studiesWithNewMessagesList[id] = true\n\t\t\t}\n\t\t\tthis.studiesWithNewMessagesCount.set(data.newMessages.length)\n\t\t}\n\t}\n\t\n\tprivate async hasUnread(list: MessageParticipantInfoList): Promise<boolean> {\n\t\tfor(let info of list.get()) {\n\t\t\tif(info.unread.get())\n\t\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\t\n\tpublic async getMessageParticipantInfoList(studyId: number): Promise<MessageParticipantInfoList> {\n\t\treturn PromiseCache.get(`messageParticipantEntryList-${studyId}`, async () => {\n\t\t\tconst jsonList = await this.loadMessageParticipantInfoList(studyId)\n\t\t\t\n\t\t\tif(this.messageParticipantInfoLists.hasOwnProperty(studyId)) {\n\t\t\t\tconst wasUnread = await this.hasUnread(this.messageParticipantInfoLists[studyId])\n\t\t\t\tthis.messageParticipantInfoLists[studyId].replace(jsonList)\n\t\t\t\tconst isUnread = await this.hasUnread(this.messageParticipantInfoLists[studyId])\n\t\t\t\t\n\t\t\t\tif(wasUnread && !isUnread) {\n\t\t\t\t\tthis.studiesWithNewMessagesCount.set(this.studiesWithNewMessagesCount.get() - 1)\n\t\t\t\t\tdelete this.studiesWithNewMessagesList[studyId]\n\t\t\t\t}\n\t\t\t\telse if(!wasUnread && isUnread) {\n\t\t\t\t\tthis.studiesWithNewMessagesCount.set(this.studiesWithNewMessagesCount.get() + 1)\n\t\t\t\t\tthis.studiesWithNewMessagesList[studyId] = true\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst list = new ObservableArray<ObservableStructureDataType, MessageParticipantInfo>(\n\t\t\t\t\tjsonList,\n\t\t\t\t\tnull,\n\t\t\t\t\t`messageParticipantEntryList-${studyId}`,\n\t\t\t\t\t(data, parent, key) => {\n\t\t\t\t\t\treturn new MessageParticipantInfo(data, parent, key)\n\t\t\t\t\t})\n\t\t\t\tthis.messageParticipantInfoLists[studyId] = list\n\t\t\t\t\n\t\t\t\tif(await this.hasUnread(list)) {\n\t\t\t\t\tthis.studiesWithNewMessagesCount.set(this.studiesWithNewMessagesCount.get() + 1)\n\t\t\t\t\tthis.studiesWithNewMessagesList[studyId] = true\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn this.messageParticipantInfoLists[studyId]\n\t\t})\n\t}\n\tpublic getReloadedMessageParticipantInfoList(studyId: number): Promise<MessageParticipantInfoList> {\n\t\tPromiseCache.remove(`messageParticipantEntryList-${studyId}`)\n\t\treturn this.getMessageParticipantInfoList(studyId)\n\t}\n\tpublic getMessageParticipantInfoListOrThrow(studyId: number): MessageParticipantInfoList {\n\t\tif(!this.messageParticipantInfoLists.hasOwnProperty(studyId))\n\t\t\tthrow new Error(`No messages for ${studyId}. Were they loaded?`)\n\t\treturn this.messageParticipantInfoLists[studyId]\n\t}\n\t\n\tprivate async loadMessageParticipantInfoList (studyId: number): Promise<ObservableStructureDataType[]> {\n\t\tconst listJson: ObservableStructureDataType[] = await Requests.loadJson(`${FILE_ADMIN}?type=ListUserWithMessages&study_id=${studyId}`)\n\t\t\n\t\tlistJson.sort((a,b) => {\n\t\t\tif(a[\"lastMsg\"] == b[\"lastMsg\"])\n\t\t\t\treturn 0\n\t\t\telse\n\t\t\t\treturn a[\"lastMsg\"] < b[\"lastMsg\"] ? 1 : -1\n\t\t})\n\t\treturn listJson\n\t}\n\t\n\tpublic async loadMessages(studyId: number, userId: string): Promise<ParticipantMessagesContainer> {\n\t\treturn Requests.loadJson(`${FILE_ADMIN}?type=ListMessages&study_id=${studyId}&user=${userId}`)\n\t}\n}","import {LoginDataInterface} from \"../admin/LoginDataInterface\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\n\nexport class MerlinLogsLoader {\n\tpublic readonly studiesWithNewMerlinLogsCount = new ObservablePrimitive<number>(0, null, \"studiesWithNewMerlinLogsCount\")\n\tpublic readonly studiesWithNewMerlinLogsList: Record<number, boolean> = {}\n\t\n\tconstructor(data: LoginDataInterface) {\n\t\tif(data.newMerlinLogs) {\n\t\t\tfor(let id of data.newMerlinLogs) {\n\t\t\t\tthis.studiesWithNewMerlinLogsList[id] = true\n\t\t\t}\n\t\t\tthis.studiesWithNewMerlinLogsCount.set(data.newMerlinLogs.length)\n\t\t}\n\t}\n\t\n\tpublic setStudyNewLogsRemaining(studyId: number, logsRemaining: boolean) {\n\t\tthis.studiesWithNewMerlinLogsList[studyId] = logsRemaining\n\t\tthis.studiesWithNewMerlinLogsCount.set(\n\t\t\tObject.values(this.studiesWithNewMerlinLogsList).filter((value) => value).length\n\t\t)\n\t}\n}","import m from \"mithril\";\nimport {PromiseCache} from \"../singletons/PromiseCache\";\nimport {FILE_ADMIN} from \"../constants/urls\";\nimport {Requests} from \"../singletons/Requests\";\nimport {Lang} from \"../singletons/Lang\";\nimport {ObservableStructure, ObservableStructureDataType} from \"../observable/ObservableStructure\";\nimport {ObservableArray} from \"../observable/ObservableArray\";\n\n\nexport class Bookmark extends ObservableStructure {\n\tpublic url = this.primitive<string>(\"url\", \"\")\n\tpublic alias = this.primitive<string>(\"alias\", \"\")\n}\n\nexport class BookmarkLoader {\n\tprivate bookmarks?: ObservableArray<ObservableStructureDataType, Bookmark>\n\t\n\tpublic async init(): Promise<BookmarkLoader> {\n\t\treturn PromiseCache.get(\"bookmarsList\", async() => {\n\t\t\tconst bookmarksJson = await Requests.loadJson(`${FILE_ADMIN}?type=GetBookmarks`)\n\t\t\tthis.bookmarks = new ObservableArray<ObservableStructureDataType, Bookmark>(\n\t\t\t\tbookmarksJson,\n\t\t\t\tnull,\n\t\t\t\t\"bookmarksList\",\n\t\t\t\t(data, parent, key) => {\n\t\t\t\t\treturn new Bookmark(data, parent, key)\n\t\t\t\t}\n\t\t\t)\n\t\t\tthis.bookmarks.addObserver((_origin, _) => {\n\t\t\t\tm.redraw()\n\t\t\t})\n\t\t\treturn this\n\t\t})\n\t}\n\t\n\tprivate getBookmarkIndex(url: string): number {\n\t\treturn this.getBookmarkList().map((bookmark) => {\n\t\t\treturn bookmark.url.get()\n\t\t}).indexOf(url)\n\t}\n\t\n\tpublic isBookmarkListEmpty(): boolean {\n\t\treturn this.bookmarks!.get().length == 0\n\t}\n\t\n\tpublic hasBookmark(url: string): boolean {\n\t\treturn this.getBookmarkIndex(url) >= 0\n\t}\n\t\n\tpublic getBookmarkList(): Bookmark[] {\n\t\treturn this.bookmarks?.get() ?? []\n\t}\n\t\n\tpublic async deleteBookmark(url: string): Promise<void> {\n\t\tlet response = url\n\t\tresponse = await Requests.loadJson(`${FILE_ADMIN}?type=DeleteBookmark`, \"post\", `url=${url}`)\n\t\tif(response != url)\n\t\t\tthrow new Error(Lang.get(\"error_unknown\"))\n\t\tthis.bookmarks!.remove(this.getBookmarkIndex(url))\n\t}\n\t\n\tpublic async setBookmark(url: string, alias: string): Promise<void> {\n\t\tconst bookmarks = this.bookmarks!\n\t\tlet bookmarkJson = await Requests.loadJson(`${FILE_ADMIN}?type=SetBookmark`, \"post\", `url=${url}&alias=${alias}`)\n\t\tconst index = this.getBookmarkIndex(url)\n\t\tif(index >= 0)\n\t\t\tbookmarks.get()[index].alias.set(alias)\n\t\telse\n\t\t\tbookmarks.push(bookmarkJson)\n\t}\n}","import {AdminToolsInterface} from \"./AdminToolsInterface\";\nimport {LoginDataInterface} from \"./LoginDataInterface\";\nimport {AccountPermissions} from \"./AccountPermissions\";\nimport \"../../css/styleAdmin.css\";\nimport {ServerSettingsLoader} from \"../loader/ServerSettingsLoader\";\nimport {AccountsLoader} from \"../loader/AccountsLoader\";\nimport {MessagesLoader} from \"../loader/MessagesLoader\";\nimport { MerlinLogsLoader } from \"../loader/MerlinLogsLoader\";\nimport { BookmarkLoader } from \"../loader/BookmarkLoader\";\n\n/**\n * See description of {@link Admin}\n */\nexport class AdminTools implements AdminToolsInterface {\n\tpublic readonly settingsLoader = new ServerSettingsLoader()\n\tpublic readonly accountsLoader = new AccountsLoader()\n\tpublic readonly messagesLoader: MessagesLoader\n\tpublic readonly merlinLogsLoader: MerlinLogsLoader\n\tpublic readonly bookmarksLoader: BookmarkLoader\n\tpublic hasErrors: boolean = false\n\t\n\tpublic readonly isAdmin: boolean = false\n\tpublic readonly canCreate: boolean = false\n\tpublic readonly permissions: AccountPermissions\n\tpublic accountName: string = \"\"\n\tpublic readonly freeDiskSpace: number\n\tpublic readonly totalDiskSpace: number\n\t\n\tconstructor(data: LoginDataInterface) {\n\t\tthis.hasErrors = data.hasErrors\n\t\tthis.messagesLoader = new MessagesLoader(data)\n\t\tthis.merlinLogsLoader = new MerlinLogsLoader(data)\n\t\tthis.bookmarksLoader = new BookmarkLoader()\n\n\t\tthis.accountName = data.accountName\n\t\tthis.canCreate = data.canCreate\n\t\t\n\t\tif(data.isAdmin) {\n\t\t\tthis.isAdmin = true\n\t\t\tthis.permissions = {publish: [], msg: [], read: [], write: []}\n\t\t\tthis.freeDiskSpace = data.freeDiskSpace\n\t\t\tthis.totalDiskSpace = data.totalDiskSpace\n\t\t}\n\t\telse {\n\t\t\tthis.isAdmin = false\n\t\t\tthis.permissions = data.permissions\n\t\t\tthis.freeDiskSpace = 0\n\t\t\tthis.totalDiskSpace = 0\n\t\t}\n\t}\n\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.isAdmin || (this.permissions[name]?.indexOf(studyId) ?? -1) != -1\n\t}\n}"],"names":["data","parent","key","newLang","defaultLang","currentLangCode","get","translationData","langCode","serverName","translatable","impressum","privacyPolicy","homeMessage","addLanguage","ObservableStructure","primitive","langCodes","primitiveArray","siteTranslations","object","SiteTranslations","init","PromiseCache","Requests","loadJson","json","this","settings","ServerData","getSettings","saveSettings","Promise","resolve","currentLang","set","createJson","dontFilterDefaults","dontIncludeAllLanguages","exportData","JSON","stringify","importObserverData","hasMutated","document","getElementById","innerText","_key","accountName","admin","create","read","write","msg","publish","updateKeyName","_keyName","accountsJson","accounts","ObservableArray","Account","getAccounts","addAccount","password","accountJson","push","length","deleteAccount","account","index","Lang","remove","name","lastMsg","archived","pending","unread","messageParticipantInfoLists","studiesWithNewMessagesCount","ObservablePrimitive","studiesWithNewMessagesList","newMessages","id","hasUnread","list","getMessageParticipantInfoList","studyId","loadMessageParticipantInfoList","jsonList","hasOwnProperty","wasUnread","replace","isUnread","MessageParticipantInfo","getReloadedMessageParticipantInfoList","getMessageParticipantInfoListOrThrow","Error","listJson","sort","a","b","loadMessages","userId","studiesWithNewMerlinLogsCount","studiesWithNewMerlinLogsList","newMerlinLogs","setStudyNewLogsRemaining","logsRemaining","Object","values","filter","value","url","alias","bookmarksJson","bookmarks","Bookmark","addObserver","_origin","_","getBookmarkIndex","getBookmarkList","map","bookmark","indexOf","isBookmarkListEmpty","hasBookmark","deleteBookmark","setBookmark","bookmarkJson","settingsLoader","ServerSettingsLoader","accountsLoader","AccountsLoader","hasErrors","isAdmin","canCreate","messagesLoader","MessagesLoader","merlinLogsLoader","MerlinLogsLoader","bookmarksLoader","BookmarkLoader","permissions","freeDiskSpace","totalDiskSpace","hasPermission"],"sourceRoot":""}