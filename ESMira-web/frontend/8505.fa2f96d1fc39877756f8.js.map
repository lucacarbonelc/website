{"version":3,"file":"8505.fa2f96d1fc39877756f8.js","mappings":"m/DAUA,cAQC,WAAYA,EAAkBC,GAA9B,MACC,YAAMD,IAAQ,K,OACd,EAAKC,eAAiBA,E,CACvB,CA6ED,OAxF6B,OAGd,EAAAC,QAAd,SAAsBF,GACrB,MAAO,CACNA,EAAQG,WAAWF,eAAeG,OAEpC,EAMO,YAAAC,MAAP,WACC,OAAO,IAAKC,IAAI,aACjB,EAEc,YAAAC,cAAd,SAA4BC,EAAqBC,G,gGAClC,SAAMC,KAAKV,QAAQW,OAAOC,WAAWF,KAAKT,eAAeY,WAAWL,EAAaC,K,cAAzFK,EAAQ,SACdJ,KAAKK,WAAW,+BAAwBD,I,YAG3B,YAAAE,cAAd,SAA4BC,EAAkBH,G,0FAC7B,SAAMJ,KAAKV,QAAQW,OAAOC,WAAWF,KAAKT,eAAee,cAAcC,EAASH,K,cAAhF,WAEfI,OAAOC,SAASC,KAAO,UAAGV,KAAKV,QAAQqB,QAAQX,KAAKV,QAAQsB,S,YAIvD,YAAAC,QAAP,sBACC,OAAO,WAAKC,MAAM,cACjB,aAAOC,GAAG,cAAcD,MAAM,aAC7B,iBACA,cACC,UAAIA,MAAM,gBACV,cAAK,IAAKlB,IAAI,qBACd,cAAK,IAAKA,IAAI,sBACd,cAAK,IAAKA,IAAI,qBACd,cAAK,IAAKA,IAAI,mBACd,cAAK,IAAKA,IAAI,oBACd,iBAGD,iBACEI,KAAKT,eAAeyB,cAAcC,KAAI,SAACV,EAASH,GAChD,qBACC,UAAIU,MAAM,gBACR,QAAS,EAAKR,cAAcY,KAAK,EAAMX,EAASH,IACjD,SAAGe,KAAM,EAAKC,OAAO,+BAAwBhB,KAAWG,EAAQT,YAAYF,QAE7E,cACEW,EAAQc,MAAMzB,OACd,sBAGF,eACGW,EAAQc,MAAMzB,OAASW,EAAQe,OAAO1B,QACvC,sBAGF,cACC,gBAAOW,EAAQc,MAAMzB,MAAQ,UAAQ,YAAcW,EAAQgB,MAAM3B,MAAM4B,SAExE,cACC,gBAAOjB,EAAQc,MAAMzB,MAAQ,UAAQ,YAAcW,EAAQkB,IAAI7B,MAAM4B,SAEtE,cACC,gBAAOjB,EAAQc,MAAMzB,MAAQ,UAAQ,YAAcW,EAAQmB,KAAK9B,MAAM4B,SAEvE,cACC,SAAGL,KAAM,EAAKC,OAAO,+BAAwBhB,MAC3C,YA1BJ,OAmCF,OAAS,IAAKuB,aAAa,SAG3B,OAAc3B,KAAKH,cAAcqB,KAAKlB,OAAO,SAACyB,GAAU,EAAKnC,QAAQW,OAAO2B,MAAMH,EAAI,IAIzF,EACD,EAxFA,CAA6B,I,kCCqB7B,iBAGC,WAAYnC,GACXU,KAAKV,QAAUA,CAChB,CAmHD,OA7Ge,EAAAE,QAAd,SAAsBqC,GACrB,MAAO,EACR,EAMO,YAAAC,QAAP,W,IAAe,sDACd,OAAOC,QAAQC,SAChB,EACO,YAAAC,gBAAP,WACC,OAAO,CACR,EACO,YAAAC,gBAAP,WACC,OAAO,IACR,EAIO,YAAAC,WAAP,WACC,OAAO,IACR,EAGO,YAAAC,WAAP,SAA2CC,EAA0BC,GACpE,OAAOtC,KAAKV,QAAQ8C,WAAWC,EAAKC,EACrC,EACO,YAAAC,WAAP,SAA2CF,EAA0BG,GACpExC,KAAKV,QAAQmD,SAASC,cAAcC,SAASN,EAAKG,EACnD,EACO,YAAAI,aAAP,SAA4CP,GAC3C,OAAOrC,KAAKV,QAAQsD,aAAaP,EAClC,EACO,YAAAQ,gBAAP,SAA+CR,GAC9C,OAAOrC,KAAKV,QAAQuD,gBAAgBR,EACrC,EACU,YAAAS,eAAV,SAAyB/B,G,aAAA,IAAAA,IAAAA,EAAoC,QAApC,EAAaf,KAAK4C,aAAa,aAAK,SAAK,GACjE,IAAMG,EAAU/C,KAAKV,QAAQmD,SAASO,YAAYC,aAClD,OAAU,GAAPlC,EAC2B,GAAtBgC,EAAQG,YAAmBH,EAAQI,YAAsB,KAEtC,QAApB,EAAAJ,EAAQK,SAASrC,UAAG,QAAI,IAChC,EACO,YAAAsC,gBAAP,SAAuBtC,G,WAAA,IAAAA,IAAAA,EAAoC,QAApC,EAAaf,KAAK4C,aAAa,aAAK,SAAK,GAC/D,IAAMU,EAAQtD,KAAK8C,eAAe/B,GAClC,IAAIuC,EACH,MAAM,IAAIC,MAAM,gBAASxC,EAAE,qBAC5B,OAAOuC,CACR,EACU,YAAAE,uBAAV,SAAiCC,EAA8CH,G,MAC9E,QADgC,IAAAG,IAAAA,EAAsC,QAAtC,EAAczD,KAAK4C,aAAa,cAAM,SAAK,QAAG,IAAAU,IAAAA,EAAsBtD,KAAK8C,mBACrGQ,EACH,OAAO,KAER,IADA,IAC2B,MADJtD,KAAKqD,kBAAkBK,eAAe9D,MAClC,eAAgB,CAAvC,IAAM+D,EAAa,KACtB,GAAGA,EAAcC,WAAWhE,OAAS6D,EACpC,OAAOE,C,CAET,OAAO,IACR,EACU,YAAAE,wBAAV,SAAkCJ,G,WAAA,IAAAA,IAAAA,EAAsC,QAAtC,EAAczD,KAAK4C,aAAa,cAAM,SAAK,GAC5E,IAAMe,EAAgB3D,KAAKwD,uBAAuBC,EAAKzD,KAAKqD,mBAC5D,GAAIM,EAGH,OAAOA,EAFP,MAAM,IAAIJ,MAAM,wBAAiBE,EAAG,oBAGtC,EAEO,YAAAhE,SAAP,WACC,OAAOO,KAAKV,QAAQG,UACrB,EACO,YAAAqE,SAAP,WACC,OAAO9D,KAAKV,QAAQwE,UACrB,EAEO,YAAAC,cAAP,SAAqBC,EAAgCC,G,MACpD,OAAOjE,KAAK8D,WAAWI,cAA6D,QAA5C,EAAAlE,KAAKP,WAAWsE,cAAcC,EAAMC,UAAQ,QACrF,EAEO,YAAA7C,OAAP,SAAc4C,EAAcpD,GAC3B,YAD2B,IAAAA,IAAAA,EAAgBZ,KAAKV,QAAQsB,OACjD,UAAGZ,KAAKV,QAAQqB,QAAQC,GAAM,YAAIoD,EAC1C,EACO,YAAAG,KAAP,SAAYC,GACX5D,OAAOC,SAASC,KAAO,IAAI0D,CAC5B,EACO,YAAA/D,WAAP,SAAkB+D,EAAgBxD,QAAA,IAAAA,IAAAA,EAAgBZ,KAAKV,QAAQsB,OAC9DJ,OAAOC,SAASC,MAAiB,GAAVE,EAAcwD,EAAS,UAAGpE,KAAKV,QAAQqB,QAAQC,GAAM,YAAIwD,EACjF,EAmBO,YAAAC,QAAP,WAEA,EACD,EAxHA,E,qFCtBMC,EAAuC,CAC5CC,YAAW,SAACC,GACX,OAAOA,CACR,EACAC,MAAK,SAACD,GACL,OAAOA,CACR,GAEKE,EAA6C,CAClDH,YAAW,SAACC,GACX,OAAOA,CACR,EACAC,MAAK,SAACD,GACL,OAAOG,SAASH,IAAU,CAC3B,GAGD,aAEC,WAAYI,GACX5E,KAAK4E,eAAiBA,CACvB,CAOD,OANQ,YAAAL,YAAP,SAAmBC,GAClB,OAAOA,CACR,EACO,YAAAC,MAAP,SAAaD,EAAeK,GAC3B,OAAO7E,KAAK4E,eAAeC,EAAIjF,MAAO4E,IAAeA,CACtD,EACD,EAXA,GAYaM,EAAkC,CAC9CP,YAAW,SAACC,GACX,OAAOA,EAAQ,IAAM,GACtB,EACAC,MAAK,SAACD,GACL,MAAgB,KAATA,CACR,GAEYO,EAA+B,CAC3CR,YAAW,SAACC,GACX,IAAMQ,EAA2B,iBAATR,EAAoBA,EAASG,SAASH,EAAMS,aAAe,EACnF,OAAe,GAAZD,EACK,GACD,IAAKE,KAAKF,GAAWG,cAAcC,MAAM,KAAK,EACtD,EACAX,MAAK,SAACD,GACL,MAAa,KAAVA,EACK,EAEA,IAAKU,KAAKV,GAAQa,SAC3B,GAEYC,EAA+B,CAC3Cf,YAAW,SAACC,GACX,IAAMQ,EAA2B,iBAATR,EAAoBA,EAASG,SAASH,EAAMS,aAAe,EACnF,IAAgB,GAAbD,EACF,MAAO,GAEP,IAAMO,GAAW,UAEjB,OAAO,QAAsBA,EAAWP,EAE1C,EACAP,MAAK,SAACD,GACL,GAAY,IAATA,EACF,OAAQ,EAER,IAAMgB,EAAQhB,EAAMY,MAAM,KACpBG,GAAW,UAEXE,EAAO,IAAIP,KAIjB,OAHAO,EAAKC,SAASf,SAASa,EAAM,KAAO,GACpCC,EAAKE,WAAWhB,SAASa,EAAM,KAAO,GAE/BC,EAAKJ,UAAYE,CAE1B,GAGM,SAASK,EAAef,EAAoCgB,EAA2BC,EAA+BC,G,WAAA,IAAAA,IAAAA,EAAA,YAC5H,IAAMC,EAAYnB,EAAIjF,MActB,OAbIiG,IAEFA,EADsB,iBAAbG,EACKtB,EAEAJ,GAEZwB,IAEFA,EADsB,kBAAbE,EACF,UAEA,UAGF,EAAP,IACEF,GAAOD,EAAYtB,YAAYyB,GAChC,EAACD,GAAQ,SAACE,GACT,IAAMC,EAAUD,EAAE7B,OAClBS,EAAIsB,IAAIN,EAAapB,MAAMyB,EAAQJ,GAAkBjB,GACtD,E,CAEF,C,s7ECjGO,SAASuB,EACfC,EACAC,EACA3G,EACA4G,GAEA,YAHA,IAAA5G,IAAAA,EAAA,SACA,IAAA4G,IAAAA,EAAA,IAGC,GADM,CACN,OAAKzF,MAAM,gBAAgBwF,QAASA,EAAS3G,MAAOA,GAAS4G,GAC3DF,EACD,YAAMvF,MAAM,oBAAoBnB,GAGnC,CACO,SAAS6G,EAAUF,EAAqB3G,GAC9C,YAD8C,IAAAA,IAAAA,EAAA,IAE7C,GADM,CACN,OAAKmB,MAAM,0BAA0BwF,QAASA,EAAS3G,MAAOA,GAAS,IAAKC,IAAI,WAC9E,UAAQ,GACT,YAAMkB,MAAM,8BAA8BnB,GAG7C,CACO,SAAS8G,EAASH,EAAqB3G,GAC7C,YAD6C,IAAAA,IAAAA,EAAA,IAE5C,GADM,CACN,OAAKmB,MAAM,0BAA0BwF,QAASA,EAAS3G,MAAOA,GAAS,IAAKC,IAAI,WAC9E,UAAQ,GACT,YAAMkB,MAAM,oBAAoBnB,GAGnC,CAGO,SAAS+G,EAAOJ,EAAmC3G,GACzD,YADyD,IAAAA,IAAAA,EAAA,IAClDyG,EAAU,UAAQ,GAASE,EAAS3G,EAAO,IAAKC,IAAI,OAC5D,CAEO,SAAS+G,EAAQL,EAAsB3G,GAC7C,YAD6C,IAAAA,IAAAA,EAAA,IACtCyG,EAAU,UAAQ,GAAUE,EAAS3G,EAAO,IAAKC,IAAI,QAC7D,CAEO,SAASgH,EAAQN,EAAsB3G,GAC7C,YAD6C,IAAAA,IAAAA,EAAA,IACtCyG,EAAU,UAAQ,GAAUE,EAAS3G,EAAO,IAAKC,IAAI,UAC7D,CAMO,SAASiH,EAAMP,EAAsB3G,GAC3C,YAD2C,IAAAA,IAAAA,EAAA,IACpCyG,EAAU,UAAQ,GAAQE,EAAS3G,EAAO,IAAKC,IAAI,QAC3D,CAEO,SAASkH,EAAUR,EAAsB3G,GAC/C,YAD+C,IAAAA,IAAAA,EAAA,IACxCyG,EAAU,UAAQ,GAAYE,EAAS3G,EAAO,IAAKC,IAAI,UAC/D,CAEO,SAASmH,EAAYT,EAAsB3G,GACjD,YADiD,IAAAA,IAAAA,EAAA,IAC1CyG,EAAU,UAAQ,GAAcE,EAAS3G,EAAO,IAAKC,IAAI,YAEjE,C,uSC9DMoH,EAAe,gCACfC,EAAY,4BACZC,EAAe,yBAErB,aACC,KAAAzF,IAAc,GACd,KAAA0F,MAAsEH,CACvE,EAQA,0BACS,KAAAI,kBAA4B,EACnB,KAAAtH,YAA2C,IAAI,IAAoB,GAAI,KAAM,eAC7E,KAAAC,SAAwC,IAAI,IAAoB,GAAI,KAAM,YAC1E,KAAAsH,eAA8C,IAAI,IAAoB,GAAI,KAAM,kBACzF,KAAAC,iBAAmB,IAAIC,EACvB,KAAAC,UAAY,IAAID,EAChB,KAAAE,gBAAkB,IAAIF,EACtB,KAAAG,aAAuB,CAqGhC,QAnGQ,YAAAC,SAAP,SAAgBC,GAAhB,WACO9H,EAAc8H,EAAMC,MAAM/H,YAChCE,KAAKoH,kBAAoBtH,EAEtBA,GACFE,KAAKF,YAAYqG,IAAIrG,GAEtBE,KAAKF,YAAYgI,aAAY,WAC5B,EAAKR,iBAAmB,EAAKS,YAAY,EAAKjI,YAAYF,MApC9B,GAqC5B,EAAKoI,eACN,IACAhI,KAAKD,SAAS+H,aAAY,WACzB,EAAKN,UAAY,EAAKO,YAAY,EAAKhI,SAASH,MAvCvB,IAwCzB,EAAKoI,eACN,IACAhI,KAAKqH,eAAeS,aAAY,WAC/B,EAAKL,gBAAkB,EAAK1H,SAASH,OAAS,EAAKyH,eAAezH,MAC/D,CAAE6B,IAAK,GAAI0F,MAAOF,GAClB,EAAKc,YAAY,EAAKV,eAAezH,MA7Cf,IA8CzB,EAAKoI,eACN,GACD,EAEQ,YAAAD,YAAR,SAAoBvD,EAAeyD,GAClC,OAAIzD,EAAMhD,OAEFgD,EAAMhD,OAASyG,EACf,CAAExG,IAAK,IAAK7B,IAAI,iBAAkBqI,GAAYd,MAAOF,GAErD,CAAExF,IAAK,GAAI0F,MAAOD,GAJlB,CAAEzF,IAAK,GAAI0F,MAAOH,EAK3B,EAEQ,YAAAgB,cAAR,WACChI,KAAK0H,cAAgB1H,KAAKoH,kBAAoBpH,KAAKsH,iBAAiBH,OAASD,IAAiBlH,KAAKwH,UAAUL,OAASD,GAAgBlH,KAAKyH,gBAAgBN,OAASD,CACrK,EAEc,YAAAgB,WAAd,SAAyBC,EAAuEC,EAAgCnC,G,qpCAC/HA,EAAEoC,iBACCrI,KAAKF,YAAYF,MAAM4B,OAAS,GAClC4G,EAAQ,IAAKxI,IAAI,yB,OADf,M,cAEKI,KAAKD,SAASH,MAAM4B,OAnEF,IAoEzB4G,EAAQ,IAAKxI,IAAI,uB,OADV,M,OAGU,SAAMuI,EAASnI,KAAKF,YAAYF,MAAOI,KAAKD,SAASH,Q,OAArD,WAEbI,KAAKoH,kBACPpH,KAAKF,YAAYqG,IAAI,IACtBnG,KAAKD,SAASoG,IAAI,IAClBnG,KAAKqH,eAAelB,IAAI,K,gUAKpB,YAAAmC,KAAP,SAAYV,GACX,OAAO,eACN,YAAMW,OAAO,OAAOC,OAAO,GAAG1H,MAAM,SAAS2H,SAAUzI,KAAKkI,WAAWhH,KAAKlB,KAAM4H,EAAMC,MAAMM,SAAUP,EAAMC,MAAMO,UACnH,WAAKtH,MAAM,WACTd,KAAKoH,kBACL,iBACC,iBAAQ,IAAKxH,IAAI,aACjB,eACC8I,aAAa,WACbC,KAAK,SAAY,QAAe3I,KAAKF,aAAY,CACjDqH,MAAOnH,KAAKsH,iBAAiBH,SAE9B,iBAAQnH,KAAKsH,iBAAiB7F,OAKjC,WAAKX,MAAM,WACV,aAAOA,MAAM,UACZ,iBAAQ,IAAKlB,IAAI,aACjB,eACC8I,aAAa,eACbC,KAAK,WACLxB,MAAOnH,KAAKwH,UAAUL,QACjB,QAAenH,KAAKD,cAAU6I,OAAWA,EAAW,aAE1D,iBAAQ5I,KAAKwH,UAAU/F,MAExB,eACA,iBACC,iBAAQ,IAAK7B,IAAI,oBACjB,eACC8I,aAAa,eACbC,KAAK,WACLxB,MAAOnH,KAAKyH,gBAAgBN,QACvB,QAAenH,KAAKqH,oBAAgBuB,OAAWA,EAAW,aAEhE,iBAAQ5I,KAAKyH,gBAAgBhG,OAG/B,WAAKX,MAAM,WACV,aAAO6H,KAAK,SAASnE,MAAOoD,EAAMC,MAAMgB,SAAUC,UAAW9I,KAAK0H,gBAItE,EACD,EA7GA,GA+GO,SAASqB,EACfZ,EACAC,EACAtI,EACA+I,GAEA,YAFA,IAAAA,IAAAA,EAAmB,IAAKjJ,IAAI,SAErB,IAAEoJ,EAAyB,CACjCb,SAAUA,EACVC,QAASA,EACTtI,YAAaA,EACb+I,SAAUA,GAEZ,C,yDCjJO,SAASI,EACftJ,G,MAEA,MAAmB,iBAATA,EACF,WAAKmB,MAAM,YACjB,YAAMA,MAAM,SAASnB,KAItBA,EAAMkI,MAAiB,UAAI,mBAAoC,QAAxB,EAAAlI,EAAMkI,MAAiB,iBAAC,QAAI,IAC5DlI,EAET,C","sources":["webpack://ESMira/./src/frontend/ts/pages/accountList.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/BindObservable.tsx","webpack://ESMira/./src/frontend/ts/widgets/BtnWidgets.tsx","webpack://ESMira/./src/frontend/ts/widgets/ChangeAccount.tsx","webpack://ESMira/./src/frontend/ts/widgets/TitleRow.tsx"],"sourcesContent":["import {SectionContent} from \"../site/SectionContent\";\nimport m, {Vnode} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {Account} from \"../data/accounts/Account\";\nimport {ChangeAccount} from \"../widgets/ChangeAccount\";\nimport {TitleRow} from \"../widgets/TitleRow\";\nimport {AccountsLoader} from \"../loader/AccountsLoader\";\nimport {BtnEdit, BtnTrash} from \"../widgets/BtnWidgets\";\n\nexport class Content extends SectionContent {\n\tprivate accountsLoader: AccountsLoader\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\treturn [\n\t\t\tsection.getTools().accountsLoader.init()\n\t\t]\n\t}\n\tconstructor(section: Section, accountsLoader: AccountsLoader) {\n\t\tsuper(section)\n\t\tthis.accountsLoader = accountsLoader\n\t}\n\t\n\tpublic title(): string {\n\t\treturn Lang.get(\"edit_users\")\n\t}\n\t\n\tprivate async createAccount(accountName: string, password: string): Promise<any> {\n\t\tconst index = await this.section.loader.showLoader(this.accountsLoader.addAccount(accountName, password))\n\t\tthis.newSection(`accountView,accountI:${index}`)\n\t}\n\t\n\tprivate async deleteAccount(account: Account, index: number) {\n\t\tconst deleted = await this.section.loader.showLoader(this.accountsLoader.deleteAccount(account, index))\n\t\tif(deleted) {\n\t\t\twindow.location.hash = `${this.section.getHash(this.section.depth)}`\n\t\t}\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\treturn <div class=\"listParent\">\n\t\t\t<table id=\"accountList\" class=\"listChild\">\n\t\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th class=\"accountName\"></th>\n\t\t\t\t\t<th>{Lang.get(\"permission_admin\")}</th>\n\t\t\t\t\t<th>{Lang.get(\"permission_create\")}</th>\n\t\t\t\t\t<th>{Lang.get(\"permission_write\")}</th>\n\t\t\t\t\t<th>{Lang.get(\"permission_msg\")}</th>\n\t\t\t\t\t<th>{Lang.get(\"permission_read\")}</th>\n\t\t\t\t\t<th></th>\n\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{this.accountsLoader.getAccounts().map((account, index) =>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td class=\"accountName\">\n\t\t\t\t\t\t\t\t{BtnTrash(this.deleteAccount.bind(this, account, index))}\n\t\t\t\t\t\t\t\t<a href={this.getUrl(`accountView,accountI:${index}`)}>{account.accountName.get()}</a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{account.admin.get() &&\n\t\t\t\t\t\t\t\t\t<span>&#10004;</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t{(account.admin.get() || account.create.get()) &&\n\t\t\t\t\t\t\t\t\t<span>&#10004;</span>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<span>{account.admin.get() ? m.trust(\"&#10004;\") : account.write.get().length}</span>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<span>{account.admin.get() ? m.trust(\"&#10004;\") : account.msg.get().length}</span>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<span>{account.admin.get() ? m.trust(\"&#10004;\") : account.read.get().length}</span>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<a href={this.getUrl(`accountView,accountI:${index}`)}>\n\t\t\t\t\t\t\t\t\t{BtnEdit()}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t)}\n\t\t\t\t\t\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t\n\t\t\t{TitleRow(Lang.getWithColon(\"add\"))}\n\t\t\t\n\t\t\t{\n\t\t\t\tChangeAccount(this.createAccount.bind(this), (msg) => { this.section.loader.error(msg)})\n\t\t\t}\n\t\t\n\t\t</div>\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m from \"mithril\"\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {BaseObservable} from \"../observable/BaseObservable\";\nimport {getMidnightMillis, timeStampToTimeString} from \"../constants/methods\";\n\nexport interface Transformer {\n\ttoAttribute(value: PrimitiveType): PrimitiveType\n\ttoObs(value: string, obs: BaseObservable<PrimitiveType>): PrimitiveType\n}\nconst OptimusPrimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value\n\t}\n}\nconst OptimusPrimeNumberTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn parseInt(value) || 0\n\t}\n}\n\nexport class OnBeforeChangeTransformer<T extends PrimitiveType> implements Transformer {\n\tprivate readonly onBeforeChange: (before: T, after: T) => T\n\tconstructor(onBeforeChange: (before: T, after: T) => T) {\n\t\tthis.onBeforeChange = onBeforeChange\n\t}\n\tpublic toAttribute(value: T): T {\n\t\treturn value\n\t}\n\tpublic toObs(value: string, obs: BaseObservable<T>): T {\n\t\treturn this.onBeforeChange(obs.get(), value as T) || value as T\n\t}\n}\nexport const BooleanTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): PrimitiveType {\n\t\treturn value ? \"1\" : \"0\"\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\treturn value == \"1\"\n\t}\n}\nexport const DateTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == 0)\n\t\t\treturn \"\"\n\t\treturn (new Date(intValue)).toISOString().split(\"T\")[0]\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value === \"\")\n\t\t\treturn 0\n\t\telse\n\t\t\treturn (new Date(value)).getTime()\n\t}\n}\nexport const TimeTransformer: Transformer = {\n\ttoAttribute(value: PrimitiveType): string {\n\t\tconst intValue = typeof value == \"number\" ? value : (parseInt(value.toString()) || 0)\n\t\tif(intValue == -1)\n\t\t\treturn \"\"\n\t\telse {\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\treturn timeStampToTimeString(midnight + intValue)\n\t\t}\n\t},\n\ttoObs(value: string): PrimitiveType {\n\t\tif(value == \"\")\n\t\t\treturn -1\n\t\telse {\n\t\t\tconst parts = value.split(\":\")\n\t\t\tconst midnight = getMidnightMillis()\n\t\t\t\n\t\t\tconst date = new Date()\n\t\t\tdate.setHours(parseInt(parts[0]) || 0)\n\t\t\tdate.setMinutes(parseInt(parts[1]) || 0)\n\t\t\t\n\t\t\treturn date.getTime() - midnight\n\t\t}\n\t}\n}\n\nexport function BindObservable(obs: BaseObservable<PrimitiveType>, transformer?: Transformer, attr?: keyof HTMLInputElement, event: keyof HTMLInputElement = \"onchange\"): Record<string, any> {\n\tconst attrValue = obs.get()\n\tif(!transformer) {\n\t\tif(typeof attrValue == \"number\")\n\t\t\ttransformer = OptimusPrimeNumberTransformer\n\t\telse\n\t\t\ttransformer = OptimusPrimeTransformer\n\t}\n\tif(!attr) {\n\t\tif(typeof attrValue == \"boolean\")\n\t\t\tattr = \"checked\"\n\t\telse\n\t\t\tattr = \"value\"\n\t}\n\t\n\treturn {\n\t\t[attr]: transformer.toAttribute(attrValue),\n\t\t[event]: (e: InputEvent) => {\n\t\t\tconst element = e.target as HTMLInputElement\n\t\t\tobs.set(transformer!.toObs(element[attr!] as string, obs))\n\t\t}\n\t}\n}","import m, {Vnode} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport addSvg from \"../../imgs/icons/addCircle.svg?raw\";\nimport changeSvg from \"../../imgs/icons/change.svg?raw\";\nimport copySvg from \"../../imgs/icons/copy.svg?raw\";\nimport editSvg from \"../../imgs/icons/edit.svg?raw\";\nimport okSvg from \"../../imgs/icons/ok.svg?raw\";\nimport reloadSvg from \"../../imgs/icons/reload.svg?raw\";\nimport removeSvg from \"../../imgs/icons/remove.svg?raw\";\nimport transferSvg from \"../../imgs/icons/transfer.svg?raw\";\nimport trashSvg from \"../../imgs/icons/trash.svg?raw\";\n\nexport function BtnCustom(\n\ticon: Vnode<any, any>,\n\tonclick?: (e: MouseEvent) => void,\n\ttitle: string = \"\",\n\thoverTitle: string = \"\"\n): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn clickable\" onclick={onclick} title={title || hoverTitle}>\n\t\t\t{icon}\n\t\t\t<span class=\"middle smallText\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnRemove(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(removeSvg)}\n\t\t\t<span class=\"smallText highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\nexport function BtnTrash(onclick: () => void, title: string = \"\",): Vnode<any, any> {\n\treturn (\n\t\t<div class=\"btn btnDelete clickable\" onclick={onclick} title={title || Lang.get(\"delete\")}>\n\t\t\t{m.trust(trashSvg)}\n\t\t\t<span class=\"highlight middle\">{title}</span>\n\t\t</div>\n\t)\n}\n\n\nexport function BtnAdd(onclick?: (e: MouseEvent) => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(addSvg), onclick, title, Lang.get(\"add\"))\n}\n\nexport function BtnCopy(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(copySvg), onclick, title, Lang.get(\"copy\"))\n}\n\nexport function BtnEdit(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(editSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnChange(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(changeSvg), onclick, title, Lang.get(\"change\"))\n}\n\nexport function BtnOk(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(okSvg), onclick, title, Lang.get(\"save\"))\n}\n\nexport function BtnReload(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(reloadSvg), onclick, title, Lang.get(\"reload\"))\n}\n\nexport function BtnTransfer(onclick?: () => void, title: string = \"\"): Vnode<any, any> {\n\treturn BtnCustom(m.trust(transferSvg), onclick, title, Lang.get(\"transfer\"))\n\t\n}\n","import m, {Component, Vnode, VnodeDOM} from \"mithril\"\nimport {Lang} from \"../singletons/Lang\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {BindObservable} from \"./BindObservable\";\n\nconst ACCOUNTNAME_MIN_LENGTH = 3;\nconst PASSWORD_MIN_LENGTH = 12;\n\nconst neutralStyle = \"background-color: transparent\"\nconst failStyle = \"background-color: #ffe1d5\"\nconst successStyle = \"background-color: #dfd\"\n\nclass InputStyleData {\n\tmsg: string = \"\"\n\tstyle: typeof neutralStyle | typeof failStyle | typeof successStyle = neutralStyle\n}\n\ninterface AccountChangerComponentOptions {\n\tonFinish: (accountName: string, password: string) => Promise<boolean>\n\tonError: (msg: string) => void\n\taccountName?: string\n\tbtnLabel: string\n}\nclass AccountChangerComponent implements Component<AccountChangerComponentOptions, any> {\n\tprivate needsAccountName: boolean = false\n\tprivate readonly accountName: ObservablePrimitive<string> = new ObservablePrimitive(\"\", null, \"accountName\")\n\tprivate readonly password: ObservablePrimitive<string> = new ObservablePrimitive(\"\", null, \"password\")\n\tprivate readonly passwordRepeat: ObservablePrimitive<string> = new ObservablePrimitive(\"\", null, \"passwordRepeat\")\n\tprivate accountNameStyle = new InputStyleData()\n\tprivate passStyle = new InputStyleData()\n\tprivate passRepeatStyle = new InputStyleData()\n\tprivate formEnabled: boolean = false\n\t\n\tpublic oncreate(vNode: VnodeDOM<AccountChangerComponentOptions, any>): void {\n\t\tconst accountName = vNode.attrs.accountName\n\t\tthis.needsAccountName = !accountName\n\t\t\n\t\tif(accountName)\n\t\t\tthis.accountName.set(accountName)\n\t\t\n\t\tthis.accountName.addObserver(() => {\n\t\t\tthis.accountNameStyle = this.lengthCheck(this.accountName.get(), ACCOUNTNAME_MIN_LENGTH)\n\t\t\tthis.tryEnableForm()\n\t\t})\n\t\tthis.password.addObserver(() => {\n\t\t\tthis.passStyle = this.lengthCheck(this.password.get(), PASSWORD_MIN_LENGTH)\n\t\t\tthis.tryEnableForm()\n\t\t})\n\t\tthis.passwordRepeat.addObserver(() => {\n\t\t\tthis.passRepeatStyle = this.password.get() != this.passwordRepeat.get()\n\t\t\t\t? { msg: \"\", style: failStyle }\n\t\t\t\t: this.lengthCheck(this.passwordRepeat.get(), PASSWORD_MIN_LENGTH)\n\t\t\tthis.tryEnableForm()\n\t\t})\n\t}\n\t\n\tprivate lengthCheck(value: string, minLength: number): InputStyleData {\n\t\tif(!value.length)\n\t\t\treturn { msg: \"\", style: neutralStyle }\n\t\telse if(value.length < minLength)\n\t\t\treturn { msg: Lang.get(\"minimal_length\", minLength), style: failStyle }\n\t\telse\n\t\t\treturn { msg: \"\", style: successStyle }\n\t}\n\t\n\tprivate tryEnableForm(): void {\n\t\tthis.formEnabled = (!this.needsAccountName || this.accountNameStyle.style == successStyle) && this.passStyle.style == successStyle && this.passRepeatStyle.style == successStyle\n\t}\n\t\n\tprivate async submitForm(onFinish: (accountName: string, password: string) => Promise<boolean>, onError: (msg: string) => void, e: InputEvent): Promise<any> {\n\t\te.preventDefault()\n\t\tif(this.accountName.get().length < 3)\n\t\t\tonError(Lang.get('error_short_username'))\n\t\telse if(this.password.get().length < PASSWORD_MIN_LENGTH)\n\t\t\tonError(Lang.get('error_bad_password'))\n\t\telse {\n\t\t\tconst response = await onFinish(this.accountName.get(), this.password.get())\n\t\t\tif(response) {\n\t\t\t\tif(this.needsAccountName)\n\t\t\t\t\tthis.accountName.set(\"\")\n\t\t\t\tthis.password.set(\"\")\n\t\t\t\tthis.passwordRepeat.set(\"\")\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic view(vNode: Vnode<AccountChangerComponentOptions, any>): Vnode<any, any> {\n\t\treturn <div>\n\t\t\t<form method=\"post\" action=\"\" class=\"nowrap\" onsubmit={this.submitForm.bind(this, vNode.attrs.onFinish, vNode.attrs.onError)}>\n\t\t\t\t<div class=\"element\">\n\t\t\t\t\t{this.needsAccountName &&\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<small>{Lang.get(\"username\")}</small>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tautocomplete=\"username\"\n\t\t\t\t\t\t\t\ttype=\"text\" {... BindObservable(this.accountName)}\n\t\t\t\t\t\t\t\tstyle={this.accountNameStyle.style}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<small>{this.accountNameStyle.msg}</small>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"element\">\n\t\t\t\t\t<label class=\"noDesc\">\n\t\t\t\t\t\t<small>{Lang.get(\"password\")}</small>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tautocomplete=\"new-password\"\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tstyle={this.passStyle.style}\n\t\t\t\t\t\t\t{... BindObservable(this.password, undefined, undefined, \"onkeyup\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<small>{this.passStyle.msg}</small>\n\t\t\t\t\t</label>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<small>{Lang.get(\"repeat_password\")}</small>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tautocomplete=\"new-password\"\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tstyle={this.passRepeatStyle.style}\n\t\t\t\t\t\t\t{... BindObservable(this.passwordRepeat, undefined, undefined, \"onkeyup\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<small>{this.passRepeatStyle.msg}</small>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"element\">\n\t\t\t\t\t<input type=\"submit\" value={vNode.attrs.btnLabel} disabled={!this.formEnabled}/>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t}\n}\n\nexport function ChangeAccount(\n\tonFinish: (accountName: string, password: string) => Promise<boolean>,\n\tonError: (msg: string) => void,\n\taccountName?: string,\n\tbtnLabel: string = Lang.get(\"save\")\n): Vnode<any, any> {\n\treturn m(AccountChangerComponent, {\n\t\tonFinish: onFinish,\n\t\tonError: onError,\n\t\taccountName: accountName,\n\t\tbtnLabel: btnLabel\n\t})\n}","import m, {Vnode} from \"mithril\"\nexport function TitleRow(\n\ttitle: string | Vnode<any, any>\n): Vnode<any, any> {\n\tif(typeof title == \"string\") {\n\t\treturn <div class=\"titleRow\">\n\t\t\t<span class=\"title\">{title}</span>\n\t\t</div>\n\t}\n\telse {\n\t\ttitle.attrs[\"className\"] = `titleRow ${title.attrs[\"className\"] ?? \"\"}`\n\t\treturn title\n\t}\n}"],"names":["section","accountsLoader","preLoad","getTools","init","title","get","createAccount","accountName","password","this","loader","showLoader","addAccount","index","newSection","deleteAccount","account","window","location","hash","getHash","depth","getView","class","id","getAccounts","map","bind","href","getUrl","admin","create","write","length","msg","read","getWithColon","error","_section","preInit","Promise","resolve","hasAlternatives","getAlternatives","titleExtra","getDynamic","key","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStaticInt","getStaticString","getStudyOrNull","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","study","Error","getQuestionnaireOrNull","qId","questionnaires","questionnaire","internalId","getQuestionnaireOrThrow","getAdmin","hasPermission","name","studyId","isLoggedIn","goTo","target","destroy","OptimusPrimeTransformer","toAttribute","value","toObs","OptimusPrimeNumberTransformer","parseInt","onBeforeChange","obs","BooleanTransformer","DateTransformer","intValue","toString","Date","toISOString","split","getTime","TimeTransformer","midnight","parts","date","setHours","setMinutes","BindObservable","transformer","attr","event","attrValue","e","element","set","BtnCustom","icon","onclick","hoverTitle","BtnRemove","BtnTrash","BtnAdd","BtnCopy","BtnEdit","BtnOk","BtnReload","BtnTransfer","neutralStyle","failStyle","successStyle","style","needsAccountName","passwordRepeat","accountNameStyle","InputStyleData","passStyle","passRepeatStyle","formEnabled","oncreate","vNode","attrs","addObserver","lengthCheck","tryEnableForm","minLength","submitForm","onFinish","onError","preventDefault","view","method","action","onsubmit","autocomplete","type","undefined","btnLabel","disabled","ChangeAccount","AccountChangerComponent","TitleRow"],"sourceRoot":""}