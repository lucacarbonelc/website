{"version":3,"file":"3537.433dcd1fe7631ab40580.js","mappings":"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","sources":["webpack://ESMira/./src/frontend/ts/loader/csv/CsvSpecialType.ts","webpack://ESMira/./src/frontend/ts/pages/dataView.tsx","webpack://ESMira/./src/frontend/ts/site/SectionContent.tsx","webpack://ESMira/./src/frontend/ts/widgets/SearchWidget.tsx"],"sourcesContent":["export enum CsvSpecialType {\n\tskipped,\n\tempty,\n\ttimestamp,\n\timage,\n\taudio\n}","import {SectionContent} from \"../site/SectionContent\";\nimport m, {Component, Vnode, VnodeDOM} from \"mithril\";\nimport {Lang} from \"../singletons/Lang\";\nimport {Section} from \"../site/Section\";\nimport {FILE_ADMIN, FILE_AUDIO, FILE_IMAGE, FILE_RESPONSES} from \"../constants/urls\";\nimport {CsvLoader} from \"../loader/csv/CsvLoader\";\nimport {closeDropdown, createNativeDropdown, DropdownMenu} from \"../widgets/DropdownMenu\";\nimport {SearchWidget} from \"../widgets/SearchWidget\";\nimport {LoadingSpinner} from \"../widgets/LoadingSpinner\";\nimport {ValueListInfo} from \"../loader/csv/ValueListInfo\";\nimport {CsvRow} from \"../loader/csv/CsvRow\";\nimport {CsvSpecialType} from \"../loader/csv/CsvSpecialType\";\nimport {DATAVIEWER_SKIPPED_COLUMNS} from \"../constants/csv\";\nimport {StaticValues} from \"../site/StaticValues\";\nimport {BtnReload} from \"../widgets/BtnWidgets\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\n\nconst ROW_HEIGHT = 25;\n\ninterface DropDownOptions {\n\tupdateTableContent: () => void\n\tcsvLoader: CsvLoader\n\tcolumnName: string\n\tshowFilterForHeader: ObservablePrimitive<boolean>\n}\nclass DropDownComponent implements Component<DropDownOptions, any> {\n\tprivate csvLoader?: CsvLoader\n\tprivate showFilterForHeader?: ObservablePrimitive<boolean>\n\tprivate columnIndex: number = 0\n\tprivate valueListInfo?: ValueListInfo[]\n\tprivate readonly disabledValues: Record<string, boolean> = {}\n\tprivate checkedCount: number = 0\n\tprivate isAllUnchecked: boolean = true\n\tprivate updateTableContent: () => void = () => {/*will be replaced in oncreate()*/}\n\t\n\tpublic async oncreate(vNode: VnodeDOM<DropDownOptions, any>): Promise<void> {\n\t\tconst columnName = vNode.attrs.columnName\n\t\tthis.updateTableContent = vNode.attrs.updateTableContent\n\t\tthis.csvLoader = vNode.attrs.csvLoader\n\t\tthis.showFilterForHeader = vNode.attrs.showFilterForHeader\n\t\tthis.columnIndex = this.csvLoader?.getColumnNum(columnName)\n\t\t\n\t\tconst valueListInfo = await this.csvLoader.getValueListInfo(columnName, false, true)\n\t\tthis.valueListInfo = valueListInfo\n\t\tlet isAllUnchecked = true\n\t\tvalueListInfo.forEach((entry) => {\n\t\t\tif(!entry.visible) {\n\t\t\t\tthis.disabledValues[entry.name] = true\n\t\t\t\tisAllUnchecked = false\n\t\t\t}\n\t\t})\n\t\tthis.isAllUnchecked = isAllUnchecked\n\t\tm.redraw()\n\t}\n\t\n\tprivate async toggleAll(): Promise<void> {\n\t\tif(this.isAllUnchecked) {\n\t\t\tconst valueListInfo = this.valueListInfo\n\t\t\tif(!valueListInfo)\n\t\t\t\treturn\n\t\t\tfor(let i=valueListInfo.length-1; i >= 0; --i) {\n\t\t\t\tconst info = valueListInfo[i]\n\t\t\t\tthis.disabledValues[info.name] = true\n\t\t\t\tawait this.csvLoader?.filterByValue(false, this.columnIndex, info.name)\n\t\t\t}\n\t\t\tthis.checkedCount = this.valueListInfo?.length ?? 0\n\t\t\tthis.isAllUnchecked = false\n\t\t\tthis.showFilterForHeader?.set(true)\n\t\t}\n\t\telse {\n\t\t\tfor(let key in this.disabledValues) {\n\t\t\t\tdelete this.disabledValues[key]\n\t\t\t\tawait this.csvLoader?.filterByValue(true, this.columnIndex, key)\n\t\t\t}\n\t\t\tthis.checkedCount = 0\n\t\t\tthis.isAllUnchecked = true\n\t\t\tthis.showFilterForHeader?.set(false)\n\t\t}\n\t\tthis.updateTableContent()\n\t}\n\t\n\tprivate async toggleFilter(value: string): Promise<void> {\n\t\tconst enable = this.disabledValues.hasOwnProperty(value)\n\t\tif(enable) {\n\t\t\t--this.checkedCount\n\t\t\tdelete this.disabledValues[value]\n\t\t\tif(this.checkedCount == 0)\n\t\t\t\tthis.showFilterForHeader?.set(false)\n\t\t}\n\t\telse {\n\t\t\t++this.checkedCount\n\t\t\tthis.disabledValues[value] = true\n\t\t\tif(this.checkedCount == 1)\n\t\t\t\tthis.showFilterForHeader?.set(true)\n\t\t}\n\t\t\n\t\tawait this.csvLoader?.filterByValue(enable, this.columnIndex, value)\n\t\tthis.updateTableContent()\n\t}\n\t\n\tpublic view(): Vnode<any, any> {\n\t\tconst valueList = this.valueListInfo!\n\t\tif(valueList == undefined)\n\t\t\treturn <div class=\"center\">{LoadingSpinner()}</div>\n\t\t\n\t\treturn <div>\n\t\t\t{SearchWidget((tools) =>\n\t\t\t\t<div>\n\t\t\t\t\t<input class=\"search small vertical\" type=\"text\" onkeyup={tools.updateSearchFromEvent.bind(tools)}/>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=\"checkbox\" onchange={this.toggleAll.bind(this)} checked={this.isAllUnchecked}/>\n\t\t\t\t\t\t<span class=\"smallText\">{Lang.get(\"toggle_all\", valueList.length)}</span>\n\t\t\t\t\t</label>\n\t\t\t\t\t{valueList.map((entry) =>\n\t\t\t\t\t\ttools.searchView(entry.name,\n\t\t\t\t\t\t\t<label class=\"line noTitle noDesc\">\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" onchange={this.toggleFilter.bind(this, entry.name)} checked={!this.disabledValues.hasOwnProperty(entry.name)}/>\n\t\t\t\t\t\t\t\t<span class=\"smallText\">{entry.totalCount === entry.count ? `${entry.name} (${entry.totalCount})` : `${entry.name} (${entry.count}/${entry.totalCount})`}</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\t\t\t\t</div>)}\n\t\t</div>\n\t}\n}\n\ninterface DataComponentInterface {\n\tcsvLoader: CsvLoader\n\tstudyId: number\n\tfilterKey?: string\n\tfilterValue?: string\n}\nclass DataComponent implements Component<DataComponentInterface, any> {\n\tprivate scrollRoot?: HTMLElement\n\tprivate heightViewForScrollbar?: HTMLElement\n\tprivate markedRowsInfoView?: HTMLElement\n\tprivate tableContent?: HTMLElement\n\t\n\tprivate filterParentObservable = new ObservablePrimitive<boolean>(false, null, \"filterParentObservable\")\n\tprivate shownHeaderNames: string[] = []\n\tprivate showFilterForHeaderArray: ObservablePrimitive<boolean>[] = []\n\tprivate userIdColumnNum: number = 0\n\tprivate entryIdColumnNum: number = 0\n\t\n\tprivate columnWidths: number[] = []\n\tprivate maxElementsDisplayed: number = 0\n\tprivate lastScrollY: number = 0\n\tprivate markedRowsNum: number = 0\n\tprivate studyId: number = 0\n\t\n\tprivate csvLoader?: CsvLoader\n\t\n\tprivate async scrollUpdate(): Promise<void> {\n\t\tlet current_scrollY = this.scrollRoot?.scrollTop ?? 0\n\t\tif(current_scrollY !== this.lastScrollY)\n\t\t\tawait this.updateTableContent()\n\t\tthis.lastScrollY = current_scrollY\n\t}\n\t\n\tprivate updateVisibleRowNum(): void {\n\t\tthis.maxElementsDisplayed = Math.floor((this.scrollRoot?.clientHeight ?? 0) / ROW_HEIGHT - 1) //-1: header\n\t}\n\t\n\tprivate async markRow(row: CsvRow, rowView: HTMLElement): Promise<void> {\n\t\tif(rowView.classList.contains(\"marked\")) {\n\t\t\trowView.classList.remove(\"marked\")\n\t\t\tawait this.csvLoader?.mark(false, row.arrayIndex)\n\t\t\trow.marked = false\n\t\t\t--this.markedRowsNum\n\t\t}\n\t\telse {\n\t\t\trowView.classList.add(\"marked\");\n\t\t\tawait this.csvLoader?.mark(true, row.arrayIndex)\n\t\t\trow.marked = true\n\t\t\t++this.markedRowsNum\n\t\t}\n\t\t\n\t\tif(this.markedRowsInfoView) {\n\t\t\tif(this.markedRowsNum) {\n\t\t\t\tthis.markedRowsInfoView.innerText = Lang.get(\"selected_rows_x\", this.markedRowsNum)\n\t\t\t\tthis.markedRowsInfoView.classList.remove(\"hidden\")\n\t\t\t}\n\t\t\telse\n\t\t\t\tthis.markedRowsInfoView.classList.add(\"hidden\")\n\t\t}\n\t}\n\t\n\tprivate createTrView(row: CsvRow): HTMLElement {\n\t\tconst tr = document.createElement(\"tr\")\n\t\tconst csvLoader = this.csvLoader\n\t\tif(!csvLoader)\n\t\t\treturn tr\n\t\t\n\t\ttr.style.cssText = `height:${ROW_HEIGHT}px`\n\t\tif(row.marked)\n\t\t\ttr.classList.add(\"marked\")\n\t\ttr.addEventListener(\"click\", this.markRow.bind(this, row, tr))\n\t\t\n\t\tconst th = document.createElement(\"th\")\n\t\tth.innerText = (row.shownIndex+1).toString()\n\t\ttr.appendChild(th)\n\t\t\n\t\trow.columnCells.forEach((cell, columnNum) => {\n\t\t\tlet td: HTMLElement\n\t\t\tlet hoverInfo: HTMLElement | null = null\n\t\t\tswitch(cell.specialType) {\n\t\t\t\tcase CsvSpecialType.timestamp:\n\t\t\t\t\ttd = document.createElement(\"td\")\n\t\t\t\t\ttd.style.cssText = \"font-style: italic\"\n\t\t\t\t\t\n\t\t\t\t\tconst prettyValueDiv = document.createElement(\"div\")\n\t\t\t\t\tprettyValueDiv.classList.add(\"prettyValue\")\n\t\t\t\t\tprettyValueDiv.innerText = cell.value\n\t\t\t\t\ttd.appendChild(prettyValueDiv)\n\t\t\t\t\t\n\t\t\t\t\tconst realValueDiv = document.createElement(\"div\")\n\t\t\t\t\trealValueDiv.classList.add(\"realValue\")\n\t\t\t\t\trealValueDiv.innerText = cell.realValue\n\t\t\t\t\ttd.appendChild(realValueDiv)\n\t\t\t\t\t\n\t\t\t\t\thoverInfo = document.createElement(\"div\")\n\t\t\t\t\thoverInfo.classList.add(\"center\")\n\t\t\t\t\thoverInfo.innerText = `${cell.value}\\n${Lang.getWithColon(\"timestamp\")} ${cell.realValue}`\n\t\t\t\t\tbreak\n\t\t\t\tcase CsvSpecialType.image:\n\t\t\t\t\tconst imageUrl = FILE_IMAGE\n\t\t\t\t\t\t.replace(\"%1\", this.studyId.toString())\n\t\t\t\t\t\t.replace(\"%2\", row.columnCells[this.userIdColumnNum].value)\n\t\t\t\t\t\t.replace(\"%3\", row.columnCells[this.entryIdColumnNum].value)\n\t\t\t\t\t\t.replace(\"%4\", csvLoader.headerNames[columnNum])\n\t\t\t\t\t\n\t\t\t\t\ttd = document.createElement(\"td\")\n\t\t\t\t\ttd.style.cssText = \"font-style: italic\"\n\t\t\t\t\tconst imageA = document.createElement(\"a\")\n\t\t\t\t\timageA.href = imageUrl\n\t\t\t\t\timageA.target = \"_blank\"\n\t\t\t\t\timageA.innerText = cell.value\n\t\t\t\t\tcreateNativeDropdown(\"dataImage\", imageA, () => {\n\t\t\t\t\t\tconst img = document.createElement(\"img\")\n\t\t\t\t\t\timg.src = imageUrl\n\t\t\t\t\t\treturn img\n\t\t\t\t\t}, {eventName: \"mouseenter\"})\n\t\t\t\t\t\n\t\t\t\t\timageA.addEventListener(\"mouseleave\", () => {\n\t\t\t\t\t\tcloseDropdown(\"dataImage\")\n\t\t\t\t\t})\n\t\t\t\t\ttd.appendChild(imageA)\n\t\t\t\t\t\n\t\t\t\t\tconst imageView = document.createElement(\"img\")\n\t\t\t\t\timageView.style.cssText = \"max-width: 500px; max-height: 500px;\"\n\t\t\t\t\timageView.src = imageUrl\n\t\t\t\t\tbreak\n\t\t\t\tcase CsvSpecialType.audio:\n\t\t\t\t\tconst audioUrl = FILE_AUDIO\n\t\t\t\t\t\t.replace(\"%1\", this.studyId.toString())\n\t\t\t\t\t\t.replace(\"%2\", row.columnCells[this.userIdColumnNum].value)\n\t\t\t\t\t\t.replace(\"%3\", row.columnCells[this.entryIdColumnNum].value)\n\t\t\t\t\t\t.replace(\"%4\", csvLoader.headerNames[columnNum])\n\t\t\t\t\t\n\t\t\t\t\ttd = document.createElement(\"td\")\n\t\t\t\t\ttd.style.cssText = \"font-style: italic\"\n\t\t\t\t\tconst audioA = document.createElement(\"a\")\n\t\t\t\t\taudioA.href = audioUrl\n\t\t\t\t\taudioA.target = \"_blank\"\n\t\t\t\t\taudioA.innerText = cell.value\n\t\t\t\t\ttd.appendChild(audioA)\n\t\t\t\t\tbreak\n\t\t\t\tcase CsvSpecialType.empty:\n\t\t\t\t\ttd = document.createElement(\"td\")\n\t\t\t\t\ttd.style.cssText = \"font-style: italic\"\n\t\t\t\t\ttd.innerText = cell.value\n\t\t\t\t\tbreak\n\t\t\t\tcase CsvSpecialType.skipped:\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t\ttd = document.createElement(\"td\")\n\t\t\t\t\ttd.innerText = cell.value\n\t\t\t}\n\t\t\t\n\t\t\tif(hoverInfo != null) {\n\t\t\t\tcreateNativeDropdown(\"dataHoverInfo\", td, () => hoverInfo!, {eventName: \"mouseenter\"})\n\t\t\t\ttd.addEventListener(\"mouseleave\", () => { closeDropdown(\"dataHoverInfo\") })\n\t\t\t}\n\t\t\ttr.appendChild(td);\n\t\t})\n\t\t\n\t\treturn tr\n\t}\n\t\n\tprivate emptyTableContent(): void {\n\t\twhile(this.tableContent?.hasChildNodes()) {\n\t\t\tthis.tableContent.removeChild(this.tableContent.firstChild!)\n\t\t}\n\t}\n\tprivate async updateTableContent(): Promise<void> {\n\t\tconst csvLoader = this.csvLoader\n\t\tif(!csvLoader)\n\t\t\treturn Promise.resolve()\n\t\t\n\t\tconst bottomIndex = Math.min(csvLoader.visibleRowsCount, Math.ceil((this.scrollRoot?.scrollTop ?? 0) / ROW_HEIGHT) + this.maxElementsDisplayed - 1) //-1 index starts with 0\n\t\tconst rows = await csvLoader.getVisibleRows(Math.max(bottomIndex - this.maxElementsDisplayed + 1, 0), bottomIndex + 1)\n\t\t\n\t\tif(this.heightViewForScrollbar)\n\t\t\tthis.heightViewForScrollbar.style.height = `${(csvLoader.visibleRowsCount+1) * ROW_HEIGHT}px` //+1: for header line\n\t\t\n\t\tconst tableContent = this.tableContent\n\t\tif(!tableContent)\n\t\t\treturn\n\t\tthis.emptyTableContent()\n\n\t\t//Rows are reversed when adding them to DOM. Remember that the table shows the newest values first (reversed!)\n\t\trows.forEach((row) => {\n\t\t\ttableContent.appendChild(this.createTrView(row))\n\t\t})\n\t}\n\t\n\tprivate getHeaderDropDown(csvLoader: CsvLoader, columnName: string, filterIndex: number): Vnode<any, any> {\n\t\treturn m(DropDownComponent, {\n\t\t\tupdateTableContent: this.updateTableContent.bind(this),\n\t\t\tcsvLoader: csvLoader,\n\t\t\tcolumnName: columnName,\n\t\t\tshowFilterForHeader: this.showFilterForHeaderArray[filterIndex]\n\t\t})\n\t}\n\t\n\tpublic view(vNode: Vnode<DataComponentInterface, any>): Vnode<any, any> {\n\t\tconst csvLoader = vNode.attrs.csvLoader\n\t\t\n\t\treturn <div class=\"dataContainer\">\n\t\t\t<div class=\"heightViewForScrollbar\"></div>\n\t\t\t<table class=\"dataTable\">\n\t\t\t\t<thead class=\"dataHeader\">\n\t\t\t\t<th style={`min-width: ${this.columnWidths[0] ?? 0}px`}></th>\n\t\t\t\t{this.shownHeaderNames.map((columnName, shownColumnIndex) =>\n\t\t\t\t\t//Note: shownHeaderNames does not have all headers. So shownColumnIndex is NOT columnIndex\n\t\t\t\t\tDropdownMenu(\"dataHeaderMenu\",\n\t\t\t\t\t\t<th style={`min-width: ${this.columnWidths[shownColumnIndex + 1] ?? 0}px`}>\n\t\t\t\t\t\t\t<span class={this.showFilterForHeaderArray[shownColumnIndex].get() ? \"highlight clickable\" : \"clickable\"} style={`height: ${ROW_HEIGHT}px`}>{columnName}</span>\n\t\t\t\t\t\t</th>,\n\t\t\t\t\t\t() => this.getHeaderDropDown(csvLoader, columnName, shownColumnIndex)\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t\t</thead>\n\t\t\t\t<tbody class=\"dataContent\">\n\t\t\t\t\n\t\t\t\t</tbody>\n\t\t\t\t\n\t\t\t</table>\n\t\t\t<pre class=\"markedRowsInfoView hidden smallText highlight infoSticker\"></pre>\n\t\t</div>\n\t}\n\tpublic async oncreate(vNode: VnodeDOM<DataComponentInterface, any>): Promise<void> {\n\t\tthis.studyId = vNode.attrs.studyId\n\t\tthis.csvLoader = vNode.attrs.csvLoader\n\t\t\n\t\tthis.scrollRoot = vNode.dom as HTMLElement\n\t\tthis.tableContent = vNode.dom.getElementsByClassName(\"dataContent\")[0] as HTMLElement\n\t\tthis.heightViewForScrollbar = vNode.dom.getElementsByClassName(\"heightViewForScrollbar\")[0] as HTMLElement\n\t\tthis.markedRowsInfoView = vNode.dom.getElementsByClassName(\"markedRowsInfoView\")[0] as HTMLElement\n\t\t\n\t\t//These columns do not exist in web_access or in old studies\n\t\t//But these values are only needed for photo items, which are new and dont exist in web_access\n\t\t//So we can ignore them if they do not exist\n\t\tthis.userIdColumnNum = this.csvLoader.hasColumn(\"userId\") ? this.csvLoader.getColumnNum(\"userId\") : 0\n\t\tthis.entryIdColumnNum = this.csvLoader.hasColumn(\"userId\") ? this.csvLoader.getColumnNum(\"entryId\") : 0\n\t\t\n\t\t\n\t\tconst skippedIndex: Record<string, boolean> = {}\n\t\tfor(const entry of DATAVIEWER_SKIPPED_COLUMNS) {\n\t\t\tskippedIndex[entry] = true\n\t\t}\n\t\t\n\t\tfor(const headerName of this.csvLoader.headerNames) {\n\t\t\tif(skippedIndex.hasOwnProperty(headerName))\n\t\t\t\tcontinue\n\t\t\t\n\t\t\tthis.shownHeaderNames.push(headerName)\n\t\t\tthis.showFilterForHeaderArray.push(new ObservablePrimitive<boolean>(false, this.filterParentObservable, headerName))\n\t\t}\n\t\t\n\t\t\n\t\tthis.scrollRoot.addEventListener(\"scroll\", this.scrollUpdate.bind(this))\n\t\tthis.updateVisibleRowNum()\n\t\tawait this.updateTableContent()\n\t\t\n\t\t//Making sure changing that column width stays the same when row content changes:\n\t\t// (has to happen after tableHeader was added to the DOM)\n\t\tconst headerChildren = vNode.dom.getElementsByClassName(\"dataHeader\")[0].childNodes\n\t\theaderChildren.forEach((view) => {\n\t\t\tconst htmlView = view as HTMLElement\n\t\t\tthis.columnWidths.push(htmlView.offsetWidth)\n\t\t})\n\t\t\n\t\tconst filterKey = vNode.attrs.filterKey\n\t\tconst filterValue = vNode.attrs.filterValue\n\t\tif(filterKey && filterValue && this.csvLoader) {\n\t\t\tawait this.csvLoader.filterEntireColumn(false, filterKey)\n\t\t\tawait this.csvLoader.filterByValue(true, filterKey, filterValue)\n\t\t\tawait this.updateTableContent()\n\t\t\tconst columnIndex = this.csvLoader.getColumnNum(filterKey)\n\t\t\tthis.showFilterForHeaderArray[columnIndex].set(true)\n\t\t}\n\t\t\n\t\tthis.filterParentObservable.addObserver(() => m.redraw())\n\t\tm.redraw()\n\t}\n\tpublic onupdate(): void {\n\t\tthis.updateVisibleRowNum()\n\t}\n\tpublic onremove(): void {\n\t\tcloseDropdown(\"dataHoverInfo\")\n\t}\n}\n\nexport class Content extends SectionContent {\n\tprivate readonly csvLoader: CsvLoader\n\t\n\tpublic static preLoad(section: Section): Promise<any>[] {\n\t\tif(!window.Worker) {\n\t\t\tsection.loader.error(Lang.get('error_no_webWorkers'))\n\t\t\treturn []\n\t\t}\n\t\tswitch(section.sectionValue) {\n\t\t\tcase \"logins\":\n\t\t\t\treturn [\n\t\t\t\t\tCsvLoader.fromUrl(section.loader, `${FILE_ADMIN}?type=GetLoginHistory`)\n\t\t\t\t]\n\t\t\tcase \"questionnaire\":\n\t\t\tcase \"backup\":\n\t\t\tcase \"general\":\n\t\t\tdefault:\n\t\t\t\treturn [\n\t\t\t\t\tsection.getStudyPromise().then((study) => {\n\t\t\t\t\t\tconst studyId = study.id.get()\n\t\t\t\t\t\tconst fileName = section.getStaticString(section.sectionValue == \"questionnaire\" ? \"qId\" : \"file\") ?? \"error\"\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn CsvLoader.fromUrl(\n\t\t\t\t\t\t\tsection.loader,\n\t\t\t\t\t\t\tFILE_RESPONSES.replace('%1', studyId.toString()).replace('%2', fileName),\n\t\t\t\t\t\t\tstudy.getInputNamesPerType()\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t}\n\t}\n\t\n\tconstructor(section: Section, csvLoader: CsvLoader) {\n\t\tsuper(section)\n\t\tthis.csvLoader = csvLoader\n\t}\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn BtnReload(this.section.reload.bind(this.section), Lang.get(\"reload\"))\n\t}\n\t\n\tpublic title(): string {\n\t\tconst titlePart = `(${Lang.get(\"entry_count\", this.csvLoader.visibleRowsCount)})`\n\t\tswitch(this.section.sectionValue) {\n\t\t\tcase \"logins\":\n\t\t\t\treturn Lang.get(\"login_history\")\n\t\t\tcase \"questionnaire\":\n\t\t\t\treturn `${this.getQuestionnaireOrThrow().getTitle()}.csv ${titlePart}`\n\t\t\tcase \"backup\":\n\t\t\t\tconst fileName = this.getStaticString(\"file\") ?? \"\"\n\t\t\t\tconst [match, date, internalId] = fileName.match(/^(\\d{4}-\\d{2}-\\d{2})_(\\d+)$/) ?? []\n\t\t\t\tif(match)\n\t\t\t\t\treturn `${date} ${this.getQuestionnaireOrNull(parseInt(internalId))?.getTitle() ?? internalId} ${titlePart}`\n\t\t\t\telse\n\t\t\t\t\treturn fileName\n\t\t\tdefault:\n\t\t\t\treturn `${this.getStaticString(\"file\") ?? Lang.get(\"error_unknown\")} ${titlePart}`\n\t\t}\n\t}\n\t\n\tpublic getView(): Vnode<any, any> {\n\t\tconst filterKey = this.getStaticString(\"filter\")\n\t\tconst studyId = this.getStaticInt(\"id\") ?? -1\n\t\tif(filterKey) {\n\t\t\tconst filterValue = this.getStaticString(filterKey as StaticValues)\n\t\t\tif(filterValue)\n\t\t\t\treturn m(DataComponent, {csvLoader: this.csvLoader, studyId: studyId, filterKey: filterKey, filterValue: atob(filterValue)})\n\t\t}\n\t\treturn m(DataComponent, {csvLoader: this.csvLoader, studyId: studyId})\n\t}\n}","import m, {Vnode} from \"mithril\";\nimport {Section} from \"./Section\";\nimport {Study} from \"../data/study/Study\";\nimport {StaticValues} from \"./StaticValues\";\nimport {ObservablePrimitive} from \"../observable/ObservablePrimitive\";\nimport {Questionnaire} from \"../data/study/Questionnaire\";\nimport {DynamicValues} from \"./DynamicValues\";\nimport {PrimitiveType} from \"../observable/types/PrimitiveType\";\nimport {AccountPermissions} from \"../admin/AccountPermissions\";\nimport {AdminToolsInterface} from \"../admin/AdminToolsInterface\";\nimport {Admin} from \"../admin/Admin\";\n\nexport interface SectionAlternative {\n\ttitle: string\n\ttarget: string | false\n\theader?: boolean\n}\n\n/**\n * The dynamic content class of each section. Each section extends this class. SectionContent is a child of {@link Section} which takes care of loading and\n * displaying SectionContent.\n * Important: Changes to Observables in data.dataTypes will lead to {@link m.redraw()} (see {@link StudyLoader.constructor()}).\n * BUT, changes to the dom will happen asynchronously. In other words: The philosophy is, that {@link getView()} always works with fresh (not cached) data\n * and always constructs the full section (instead of just updating it). Mithril will take care of keeping track of changes and updates the dom when necessary.\n *\n * Method calls are guaranteed to be in this order:\n * 1. {@link preLoad()}\n * 2. {@link preInit()}\n * 3. {@link title()}, {@link titleExtra()}, {@link getView()}\n * Have a look at the implementation in {@link Section.load()} for more information\n */\nexport abstract class SectionContent {\n\tpublic readonly section: Section\n\t\n\tconstructor(section: Section) {\n\t\tthis.section = section\n\t}\n\t\n\t/**\n\t * Is always called before anything else.\n\t * @returns Promise array. The section will be in loading state and not other methods will be called as long as these Promises are loading\n\t */\n\tpublic static preLoad(_section: Section): Promise<any>[] {\n\t\treturn []\n\t}\n\t\n\t/**\n\t * Is guaranteed to run AFTER all promises in {@link preLoad()} are finished\n\t * @param _responses Holds the return values of each Promise from {@link preLoad()}\n\t */\n\tpublic preInit(... _responses: any): Promise<any> {\n\t\treturn Promise.resolve()\n\t}\n\tpublic hasAlternatives(): boolean {\n\t\treturn false\n\t}\n\tpublic getAlternatives(): SectionAlternative[] | Promise<SectionAlternative[]> | null {\n\t\treturn null\n\t}\n\t\n\tpublic abstract title(): string\n\t\n\tpublic titleExtra(): Vnode<any, any> | null {\n\t\treturn null\n\t}\n\t\n\t\n\tpublic getDynamic<T extends PrimitiveType>(key: keyof DynamicValues, defaultValue: T): ObservablePrimitive<T> {\n\t\treturn this.section.getDynamic(key, defaultValue)\n\t}\n\tpublic setDynamic<T extends PrimitiveType>(key: keyof DynamicValues, newValue: T) {\n\t\tthis.section.siteData.dynamicValues.setChild(key, newValue)\n\t}\n\tpublic getStaticInt<T extends StaticValues>(key: T): number | null {\n\t\treturn this.section.getStaticInt(key)\n\t}\n\tpublic getStaticString<T extends StaticValues>(key: T): string | null {\n\t\treturn this.section.getStaticString(key)\n\t}\n\tprotected getStudyOrNull(id: number = this.getStaticInt(\"id\") ?? -1): Study | null {\n\t\tconst studies = this.section.siteData.studyLoader.getStudies()\n\t\tif(id == -1)\n\t\t\treturn studies.getCount() == 1 ? (studies.getFirst() || null) : null\n\t\t\n\t\treturn studies.getEntry(id) ?? null\n\t}\n\tpublic getStudyOrThrow(id: number = this.getStaticInt(\"id\") ?? -1): Study {\n\t\tconst study = this.getStudyOrNull(id)\n\t\tif(!study)\n\t\t\tthrow new Error(`Study ${id} does not exist!`)\n\t\treturn study\n\t}\n\tprotected getQuestionnaireOrNull(qId: number = this.getStaticInt(\"qId\") ?? -1, study: Study | null = this.getStudyOrNull()): Questionnaire | null {\n\t\tif(!study)\n\t\t\treturn null\n\t\tconst questionnaires = this.getStudyOrThrow().questionnaires.get()\n\t\tfor(const questionnaire of questionnaires) {\n\t\t\tif(questionnaire.internalId.get() == qId)\n\t\t\t\treturn questionnaire\n\t\t}\n\t\treturn null\n\t}\n\tprotected getQuestionnaireOrThrow(qId: number = this.getStaticInt(\"qId\") ?? -1): Questionnaire {\n\t\tconst questionnaire = this.getQuestionnaireOrNull(qId, this.getStudyOrThrow())\n\t\tif(!questionnaire)\n\t\t\tthrow new Error(`Questionnaire ${qId} does not exist!`)\n\t\telse\n\t\t\treturn questionnaire\n\t}\n\t\n\tpublic getTools(): AdminToolsInterface {\n\t\treturn this.section.getTools()\n\t}\n\tpublic getAdmin(): Admin {\n\t\treturn this.section.getAdmin()\n\t}\n\t\n\tpublic hasPermission(name: keyof AccountPermissions, studyId: number): boolean {\n\t\treturn this.getAdmin().isLoggedIn() && (this.getTools().hasPermission(name, studyId) ?? false)\n\t}\n\t\n\tpublic getUrl(name: string, depth: number = this.section.depth): string {\n\t\treturn `${this.section.getHash(depth)}/${name}`\n\t}\n\tpublic goTo(target: string): void {\n\t\twindow.location.hash = \"#\"+target;\n\t}\n\tpublic newSection(target: string, depth: number = this.section.depth): void {\n\t\twindow.location.hash = depth == -1 ? target : `${this.section.getHash(depth)}/${target}`\n\t}\n\t\n\t\n\t/**\n\t * Remember: Values or references of observables should NOT be cached (also when the value is an observable itself)\n\t * It would lead to new values not being updated properly on {@link m.redraw()}\n\t *\n\t * Examples:\n\t * You can cache: {@link StudyLoader.studyCache}. Because this observable is readonly and will never be replaced\n\t * You can NOT cache {@link StudyLoader.studyCache.get()} or {@link getStudyOrThrow()} or {@link getStudy().questionnaires.get()[2]}.\n\t * \t\tBecause all study entries in StudyLoader might have been replaced or removed between {@link m.redraw()}\n\t *\n\t * You can cache: {@link SiteData.dynamicValues[\"accessKey\"]} because {@link Container} uses Singletons (see {@link Container.getOrCreateObs()})\n\t * You can not cache: {@link SiteData.dynamicValues[\"accessKey\"].get()} because its value might change\n\t *\n\t * In conclusion: {@link getView()} always needs to work with fresh values. Starting, for example, with {@link getStudyOrThrow()}\n\t */\n\tpublic abstract getView(): Vnode<any, any>\n\t\n\tpublic destroy(): void {\n\t\t//do nothing\n\t}\n}","import m, {Component, Vnode} from \"mithril\"\n\nexport interface SearchTools {\n\tsearchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null\n\tupdateSearchFromEvent(e: InputEvent): void\n\tupdateSearch(s: string): void\n}\ninterface SearchBarComponentOptions {\n\tcontent: (tools: SearchTools) => Vnode<any, any>\n\tclassName?: string //in case the parent has added a className that we need to include\n}\nclass SearchBarComponent implements SearchTools, Component<SearchBarComponentOptions, any> {\n\tprivate currentSearchValue: string = \"\"\n\t\n\tpublic updateSearch(s: string): void {\n\t\tthis.currentSearchValue = s\n\t}\n\tpublic updateSearchFromEvent(e: InputEvent): void {\n\t\tthis.updateSearch((e.target as HTMLInputElement).value)\n\t}\n\tpublic searchView(key: string, content: Vnode<any, any>): Vnode<any, any> | null {\n\t\treturn key.search(this.currentSearchValue) != -1 ? content : null\n\t}\n\t\n\tpublic view(vNode: Vnode<SearchBarComponentOptions, any>): Vnode<any, any> {\n\t\tconst view = vNode.attrs.content(this)\n\t\tview.attrs.className = `${vNode.attrs.className ?? \"\"} ${view.attrs.className ?? \"\"}`\n\t\treturn view\n\t}\n}\n\nexport function SearchWidget(content: (tools: SearchTools) => Vnode<any, any>): Vnode<any, any> {\n\treturn m(SearchBarComponent, { content: content })\n}"],"names":["CsvSpecialType","columnIndex","disabledValues","checkedCount","isAllUnchecked","updateTableContent","oncreate","vNode","columnName","attrs","this","csvLoader","showFilterForHeader","getColumnNum","getValueListInfo","valueListInfo","forEach","entry","visible","name","toggleAll","i","length","info","filterByValue","set","key","toggleFilter","value","enable","hasOwnProperty","view","valueList","undefined","class","LoadingSpinner","SearchWidget","tools","type","onkeyup","updateSearchFromEvent","bind","onchange","checked","Lang","get","map","searchView","totalCount","count","filterParentObservable","ObservablePrimitive","shownHeaderNames","showFilterForHeaderArray","userIdColumnNum","entryIdColumnNum","columnWidths","maxElementsDisplayed","lastScrollY","markedRowsNum","studyId","scrollUpdate","current_scrollY","scrollRoot","scrollTop","updateVisibleRowNum","Math","floor","clientHeight","markRow","row","rowView","classList","contains","remove","mark","arrayIndex","marked","add","markedRowsInfoView","innerText","createTrView","tr","document","createElement","style","cssText","addEventListener","th","shownIndex","toString","appendChild","columnCells","cell","columnNum","td","hoverInfo","specialType","timestamp","prettyValueDiv","realValueDiv","realValue","getWithColon","image","replace","headerNames","imageA","href","target","img","src","eventName","imageView","audio","audioUrl","audioA","empty","skipped","emptyTableContent","tableContent","hasChildNodes","removeChild","firstChild","bottomIndex","min","visibleRowsCount","ceil","getVisibleRows","max","Promise","resolve","rows","heightViewForScrollbar","height","getHeaderDropDown","filterIndex","DropDownComponent","shownColumnIndex","DropdownMenu","dom","getElementsByClassName","hasColumn","skippedIndex","headerName","push","childNodes","htmlView","offsetWidth","filterKey","filterValue","filterEntireColumn","addObserver","onupdate","onremove","section","preLoad","window","Worker","sectionValue","CsvLoader","fromUrl","loader","getStudyPromise","then","study","id","fileName","getStaticString","getInputNamesPerType","error","titleExtra","reload","title","titlePart","getQuestionnaireOrThrow","getTitle","match","date","internalId","getQuestionnaireOrNull","parseInt","getView","getStaticInt","DataComponent","atob","SectionContent","_section","preInit","hasAlternatives","getAlternatives","getDynamic","defaultValue","setDynamic","newValue","siteData","dynamicValues","setChild","getStudyOrNull","studies","studyLoader","getStudies","getCount","getFirst","getEntry","getStudyOrThrow","Error","qId","questionnaires","questionnaire","getTools","getAdmin","hasPermission","isLoggedIn","getUrl","depth","getHash","goTo","location","hash","newSection","destroy","currentSearchValue","updateSearch","s","e","content","search","className","SearchBarComponent"],"sourceRoot":""}